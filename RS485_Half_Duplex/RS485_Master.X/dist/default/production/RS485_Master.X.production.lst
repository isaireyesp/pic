

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Sep 30 17:57:08 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    38  0000                     
    39                           ; Version 2.20
    40                           ; Generated 12/02/2020 GMT
    41                           ; 
    42                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4550 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  001570                     __pidataBANK0:
    76                           	callstack 0
    77                           
    78                           ;initializer for _bit_flag
    79  001570  0001               	dw	1
    80  0000                     _RCREG	set	4014
    81  0000                     _RCSTAbits	set	4011
    82  0000                     _TXREG	set	4013
    83  0000                     _TXSTAbits	set	4012
    84  0000                     _PIR1bits	set	3998
    85  0000                     _SPBRGH	set	4016
    86  0000                     _SPBRG	set	4015
    87  0000                     _BAUDCONbits	set	4024
    88  0000                     _BAUDCON	set	4024
    89  0000                     _RCSTA	set	4011
    90  0000                     _TXSTA	set	4012
    91  0000                     _PORTB	set	3969
    92  0000                     _LATCbits	set	3979
    93  0000                     _TRISCbits	set	3988
    94  0000                     _LATD	set	3980
    95  0000                     _TRISDbits	set	3989
    96  0000                     _TRISB	set	3987
    97  0000                     _ADCON1bits	set	4033
    98                           
    99                           	psect	smallconst
   100  000800                     __psmallconst:
   101                           	callstack 0
   102  000800  00                 	db	0
   103  000801                     STR_1:
   104  000801  25                 	db	37
   105  000802  75                 	db	117	;'u'
   106  000803  0D                 	db	13
   107  000804  0A                 	db	10
   108  000805  00                 	db	0
   109  000806  00                 	db	0	; dummy byte at the end
   110  0000                     
   111                           ; #config settings
   112                           
   113                           	psect	cinit
   114  0014E0                     __pcinit:
   115                           	callstack 0
   116  0014E0                     start_initialization:
   117                           	callstack 0
   118  0014E0                     __initialization:
   119                           	callstack 0
   120                           
   121                           ; Initialize objects allocated to BANK0 (2 bytes)
   122                           ; load TBLPTR registers with __pidataBANK0
   123  0014E0  0E70               	movlw	low __pidataBANK0
   124  0014E2  6EF6               	movwf	tblptrl,c
   125  0014E4  0E15               	movlw	high __pidataBANK0
   126  0014E6  6EF7               	movwf	tblptrh,c
   127  0014E8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   128  0014EA  6EF8               	movwf	tblptru,c
   129  0014EC  0009               	tblrd		*+	;fetch initializer
   130  0014EE  CFF5 F0A4          	movff	tablat,__pdataBANK0
   131  0014F2  0009               	tblrd		*+	;fetch initializer
   132  0014F4  CFF5 F0A5          	movff	tablat,__pdataBANK0+1
   133                           
   134                           ; Clear objects allocated to BANK0 (60 bytes)
   135  0014F8  EE00  F060         	lfsr	0,__pbssBANK0
   136  0014FC  0E3C               	movlw	60
   137  0014FE                     clear_0:
   138  0014FE  6AEE               	clrf	postinc0,c
   139  001500  06E8               	decf	wreg,f,c
   140  001502  E1FD               	bnz	clear_0
   141  001504                     end_of_initialization:
   142                           	callstack 0
   143  001504                     __end_of__initialization:
   144                           	callstack 0
   145  001504  0E00               	movlw	low (__Lmediumconst shr (0+16))
   146  001506  6EF8               	movwf	tblptru,c
   147  001508  0100               	movlb	0
   148  00150A  EF93  F006         	goto	_main	;jump to C main() function
   149                           
   150                           	psect	bssBANK0
   151  000060                     __pbssBANK0:
   152                           	callstack 0
   153  000060                     _nout:
   154                           	callstack 0
   155  000060                     	ds	2
   156  000062                     _width:
   157                           	callstack 0
   158  000062                     	ds	2
   159  000064                     _prec:
   160                           	callstack 0
   161  000064                     	ds	2
   162  000066                     _flags:
   163                           	callstack 0
   164  000066                     	ds	2
   165  000068                     _dbuf:
   166                           	callstack 0
   167  000068                     	ds	32
   168  000088                     _buffer_tx:
   169                           	callstack 0
   170  000088                     	ds	10
   171  000092                     _buffer_rx:
   172                           	callstack 0
   173  000092                     	ds	10
   174                           
   175                           	psect	dataBANK0
   176  0000A4                     __pdataBANK0:
   177                           	callstack 0
   178  0000A4                     _bit_flag:
   179                           	callstack 0
   180  0000A4                     	ds	2
   181                           
   182                           	psect	cstackBANK0
   183  00009C                     __pcstackBANK0:
   184                           	callstack 0
   185  00009C                     sprintf@ap:
   186                           	callstack 0
   187                           
   188                           ; 2 bytes @ 0x0
   189  00009C                     	ds	2
   190  00009E                     sprintf@f:
   191                           	callstack 0
   192                           
   193                           ; 6 bytes @ 0x2
   194  00009E                     	ds	6
   195                           
   196                           	psect	cstackCOMRAM
   197  000001                     __pcstackCOMRAM:
   198                           	callstack 0
   199  000001                     ?_strlen:
   200                           	callstack 0
   201  000001                     ?_isspace:
   202                           	callstack 0
   203  000001                     ?_isdigit:
   204                           	callstack 0
   205  000001                     ?___wmul:
   206                           	callstack 0
   207  000001                     ?___lldiv:
   208                           	callstack 0
   209  000001                     ?___lodiv:
   210                           	callstack 0
   211  000001                     ?___lomod:
   212                           	callstack 0
   213  000001                     Uart_Send_Char@txData:
   214                           	callstack 0
   215  000001                     Uart_Read_String@Buf:
   216                           	callstack 0
   217  000001                     ___wmul@multiplier:
   218                           	callstack 0
   219  000001                     isdigit@c:
   220                           	callstack 0
   221  000001                     isspace@c:
   222                           	callstack 0
   223  000001                     fputc@c:
   224                           	callstack 0
   225  000001                     strlen@s:
   226                           	callstack 0
   227  000001                     ___lldiv@dividend:
   228                           	callstack 0
   229  000001                     ___lodiv@dividend:
   230                           	callstack 0
   231  000001                     ___lomod@dividend:
   232                           	callstack 0
   233                           
   234                           ; 8 bytes @ 0x0
   235  000001                     	ds	1
   236  000002                     Uart_Send_String@info:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0x1
   240  000002                     	ds	1
   241  000003                     ??_isspace:
   242  000003                     ??_isdigit:
   243  000003                     Uart_Read_String@s_buf:
   244                           	callstack 0
   245  000003                     ___wmul@multiplicand:
   246                           	callstack 0
   247  000003                     fputc@fp:
   248                           	callstack 0
   249  000003                     strlen@a:
   250                           	callstack 0
   251                           
   252                           ; 2 bytes @ 0x2
   253  000003                     	ds	1
   254  000004                     
   255                           ; 1 bytes @ 0x3
   256  000004                     	ds	1
   257  000005                     ??_Uart_Read_String:
   258  000005                     ??_fputc:
   259  000005                     ___wmul@product:
   260                           	callstack 0
   261  000005                     ___lldiv@divisor:
   262                           	callstack 0
   263                           
   264                           ; 4 bytes @ 0x4
   265  000005                     	ds	2
   266  000007                     Uart_Read_String@c:
   267                           	callstack 0
   268  000007                     _isspace$977:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x6
   272  000007                     	ds	1
   273  000008                     ?_atoi:
   274                           	callstack 0
   275  000008                     Uart_Read_String@cont_buf:
   276                           	callstack 0
   277  000008                     atoi@s:
   278                           	callstack 0
   279                           
   280                           ; 2 bytes @ 0x7
   281  000008                     	ds	1
   282  000009                     ___lldiv@quotient:
   283                           	callstack 0
   284  000009                     ___lodiv@divisor:
   285                           	callstack 0
   286  000009                     ___lomod@divisor:
   287                           	callstack 0
   288                           
   289                           ; 8 bytes @ 0x8
   290  000009                     	ds	1
   291  00000A                     ??_atoi:
   292  00000A                     fputs@s:
   293                           	callstack 0
   294                           
   295                           ; 2 bytes @ 0x9
   296  00000A                     	ds	2
   297  00000C                     fputs@fp:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0xB
   301  00000C                     	ds	1
   302  00000D                     ___lldiv@counter:
   303                           	callstack 0
   304                           
   305                           ; 1 bytes @ 0xC
   306  00000D                     	ds	1
   307  00000E                     fputs@c:
   308                           	callstack 0
   309  00000E                     atoi@neg:
   310                           	callstack 0
   311  00000E                     Uart_Init@baud:
   312                           	callstack 0
   313                           
   314                           ; 4 bytes @ 0xD
   315  00000E                     	ds	1
   316  00000F                     fputs@i:
   317                           	callstack 0
   318                           
   319                           ; 2 bytes @ 0xE
   320  00000F                     	ds	1
   321  000010                     _atoi$959:
   322                           	callstack 0
   323                           
   324                           ; 2 bytes @ 0xF
   325  000010                     	ds	1
   326  000011                     ?_pad:
   327                           	callstack 0
   328  000011                     ___lomod@counter:
   329                           	callstack 0
   330  000011                     pad@fp:
   331                           	callstack 0
   332  000011                     ___lodiv@quotient:
   333                           	callstack 0
   334                           
   335                           ; 8 bytes @ 0x10
   336  000011                     	ds	1
   337  000012                     ??_Uart_Init:
   338  000012                     _atoi$961:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0x11
   342  000012                     	ds	1
   343  000013                     pad@buf:
   344                           	callstack 0
   345                           
   346                           ; 2 bytes @ 0x12
   347  000013                     	ds	1
   348  000014                     _atoi$960:
   349                           	callstack 0
   350                           
   351                           ; 1 bytes @ 0x13
   352  000014                     	ds	1
   353  000015                     atoi@n:
   354                           	callstack 0
   355  000015                     pad@p:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0x14
   359  000015                     	ds	1
   360  000016                     Uart_Init@vx:
   361                           	callstack 0
   362                           
   363                           ; 2 bytes @ 0x15
   364  000016                     	ds	1
   365  000017                     ??_pad:
   366                           
   367                           ; 1 bytes @ 0x16
   368  000017                     	ds	1
   369  000018                     pad@i:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x17
   373  000018                     	ds	1
   374  000019                     ___lodiv@counter:
   375                           	callstack 0
   376                           
   377                           ; 1 bytes @ 0x18
   378  000019                     	ds	1
   379  00001A                     pad@w:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x19
   383  00001A                     	ds	2
   384  00001C                     ?_utoa:
   385                           	callstack 0
   386  00001C                     utoa@fp:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x1B
   390  00001C                     	ds	2
   391  00001E                     utoa@d:
   392                           	callstack 0
   393                           
   394                           ; 8 bytes @ 0x1D
   395  00001E                     	ds	8
   396  000026                     ??_utoa:
   397                           
   398                           ; 1 bytes @ 0x25
   399  000026                     	ds	8
   400  00002E                     utoa@p:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x2D
   404  00002E                     	ds	2
   405  000030                     utoa@w:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x2F
   409  000030                     	ds	2
   410  000032                     utoa@n:
   411                           	callstack 0
   412                           
   413                           ; 8 bytes @ 0x31
   414  000032                     	ds	8
   415  00003A                     utoa@i:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x39
   419  00003A                     	ds	2
   420  00003C                     ?_vfpfcnvrt:
   421                           	callstack 0
   422  00003C                     vfpfcnvrt@fp:
   423                           	callstack 0
   424                           
   425                           ; 2 bytes @ 0x3B
   426  00003C                     	ds	2
   427  00003E                     vfpfcnvrt@fmt:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x3D
   431  00003E                     	ds	2
   432  000040                     vfpfcnvrt@ap:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x3F
   436  000040                     	ds	2
   437  000042                     ??_vfpfcnvrt:
   438                           
   439                           ; 1 bytes @ 0x41
   440  000042                     	ds	4
   441  000046                     vfpfcnvrt@llu:
   442                           	callstack 0
   443                           
   444                           ; 8 bytes @ 0x45
   445  000046                     	ds	8
   446  00004E                     ?_vfprintf:
   447                           	callstack 0
   448  00004E                     vfprintf@fp:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x4D
   452  00004E                     	ds	2
   453  000050                     vfprintf@fmt:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x4F
   457  000050                     	ds	2
   458  000052                     vfprintf@ap:
   459                           	callstack 0
   460                           
   461                           ; 2 bytes @ 0x51
   462  000052                     	ds	2
   463  000054                     vfprintf@cfmt:
   464                           	callstack 0
   465                           
   466                           ; 2 bytes @ 0x53
   467  000054                     	ds	2
   468  000056                     ?_sprintf:
   469                           	callstack 0
   470  000056                     sprintf@s:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x55
   474  000056                     	ds	2
   475  000058                     sprintf@fmt:
   476                           	callstack 0
   477                           
   478                           ; 2 bytes @ 0x57
   479  000058                     	ds	4
   480  00005C                     ??_main:
   481                           
   482                           ; 1 bytes @ 0x5B
   483  00005C                     	ds	1
   484  00005D                     main@v_dato:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0x5C
   488  00005D                     	ds	1
   489  00005E                     main@dato_rx:
   490                           	callstack 0
   491                           
   492                           ; 1 bytes @ 0x5D
   493  00005E                     	ds	1
   494                           
   495 ;;
   496 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   497 ;;
   498 ;; *************** function _main *****************
   499 ;; Defined at:
   500 ;;		line 30 in file "RS485_Master.c"
   501 ;; Parameters:    Size  Location     Type
   502 ;;		None
   503 ;; Auto vars:     Size  Location     Type
   504 ;;  dato_rx         1   93[COMRAM] unsigned char 
   505 ;;  v_dato          1   92[COMRAM] unsigned char 
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   515 ;;      Params:         0       0       0       0       0       0       0       0       0
   516 ;;      Locals:         2       0       0       0       0       0       0       0       0
   517 ;;      Temps:          1       0       0       0       0       0       0       0       0
   518 ;;      Totals:         3       0       0       0       0       0       0       0       0
   519 ;;Total ram usage:        3 bytes
   520 ;; Hardware stack levels required when called: 8
   521 ;; This function calls:
   522 ;;		_Uart_Init
   523 ;;		_Uart_Read_String
   524 ;;		_Uart_Send_String
   525 ;;		_atoi
   526 ;;		_sprintf
   527 ;;		_strlen
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text0
   534  000D26                     __ptext0:
   535                           	callstack 0
   536  000D26                     _main:
   537                           	callstack 23
   538  000D26                     
   539                           ;RS485_Master.c: 32:     ADCON1bits.PCFG = 0x0F;
   540  000D26  0E0F               	movlw	15
   541  000D28  12C1               	iorwf	193,f,c	;volatile
   542  000D2A                     
   543                           ;RS485_Master.c: 33:     TRISB = 0xFF;
   544  000D2A  6893               	setf	147,c	;volatile
   545  000D2C                     
   546                           ;RS485_Master.c: 34:     TRISDbits.RD0 = 0;
   547  000D2C  9095               	bcf	149,0,c	;volatile
   548  000D2E                     
   549                           ;RS485_Master.c: 35:     TRISDbits.RD1 = 0;
   550  000D2E  9295               	bcf	149,1,c	;volatile
   551  000D30                     
   552                           ;RS485_Master.c: 36:     TRISDbits.RD2 = 0;
   553  000D30  9495               	bcf	149,2,c	;volatile
   554  000D32                     
   555                           ;RS485_Master.c: 37:     TRISDbits.RD3 = 0;
   556  000D32  9695               	bcf	149,3,c	;volatile
   557                           
   558                           ;RS485_Master.c: 38:     LATD = 0x00;
   559  000D34  0E00               	movlw	0
   560  000D36  6E8C               	movwf	140,c	;volatile
   561  000D38                     
   562                           ;RS485_Master.c: 39:     TRISCbits.RC2 = 0;
   563  000D38  9494               	bcf	148,2,c	;volatile
   564  000D3A                     
   565                           ;RS485_Master.c: 40:     LATCbits.LC2 = 0;
   566  000D3A  948B               	bcf	139,2,c	;volatile
   567  000D3C                     
   568                           ;RS485_Master.c: 41:     Uart_Init(9600);
   569  000D3C  0E80               	movlw	128
   570  000D3E  6E0E               	movwf	Uart_Init@baud^0,c
   571  000D40  0E25               	movlw	37
   572  000D42  6E0F               	movwf	(Uart_Init@baud+1)^0,c
   573  000D44  0E00               	movlw	0
   574  000D46  6E10               	movwf	(Uart_Init@baud+2)^0,c
   575  000D48  0E00               	movlw	0
   576  000D4A  6E11               	movwf	(Uart_Init@baud+3)^0,c
   577  000D4C  EC0F  F009         	call	_Uart_Init	;wreg free
   578  000D50  EFCE  F006         	goto	l1680
   579  000D54                     l41:
   580                           
   581                           ; BSR set to: 0
   582                           ;RS485_Master.c: 46:         {;RS485_Master.c: 47:             LATCbits.LC2 = 1;
   583  000D54  848B               	bsf	139,2,c	;volatile
   584  000D56                     
   585                           ; BSR set to: 0
   586                           ;RS485_Master.c: 48:             char v_dato = PORTB & 0x0F;
   587  000D56  5081               	movf	129,w,c	;volatile
   588  000D58  0B0F               	andlw	15
   589  000D5A  6E5D               	movwf	main@v_dato^0,c
   590  000D5C                     
   591                           ; BSR set to: 0
   592                           ;RS485_Master.c: 49:             sprintf(buffer_tx, "%u\r\n", v_dato);
   593  000D5C  0E88               	movlw	low _buffer_tx
   594  000D5E  6E56               	movwf	sprintf@s^0,c
   595  000D60  0E00               	movlw	high _buffer_tx
   596  000D62  6E57               	movwf	(sprintf@s+1)^0,c
   597  000D64  0E01               	movlw	low STR_1
   598  000D66  6E58               	movwf	sprintf@fmt^0,c
   599  000D68  0E08               	movlw	high STR_1
   600  000D6A  6E59               	movwf	(sprintf@fmt+1)^0,c
   601  000D6C  C05D  F05A         	movff	main@v_dato,?_sprintf+4
   602  000D70  6A5B               	clrf	(?_sprintf+5)^0,c
   603  000D72  ECAD  F009         	call	_sprintf	;wreg free
   604  000D76                     
   605                           ;RS485_Master.c: 50:             Uart_Send_String(buffer_tx);
   606  000D76  0E88               	movlw	low _buffer_tx
   607  000D78  6E02               	movwf	Uart_Send_String@info^0,c
   608  000D7A  0E00               	movlw	high _buffer_tx
   609  000D7C  6E03               	movwf	(Uart_Send_String@info+1)^0,c
   610  000D7E  EC58  F00A         	call	_Uart_Send_String	;wreg free
   611  000D82                     
   612                           ;RS485_Master.c: 51:             _delay((unsigned long)((10)*(48000000/4000.0)));
   613  000D82  0E9C               	movlw	156
   614  000D84  6E5C               	movwf	??_main^0,c
   615  000D86  0ED7               	movlw	215
   616  000D88                     u1087:
   617  000D88  2EE8               	decfsz	wreg,f,c
   618  000D8A  D7FE               	bra	u1087
   619  000D8C  2E5C               	decfsz	??_main^0,f,c
   620  000D8E  D7FC               	bra	u1087
   621  000D90  F000               	nop	
   622  000D92                     
   623                           ;RS485_Master.c: 52:             bit_flag = 0;
   624  000D92  0E00               	movlw	0
   625  000D94  0100               	movlb	0	; () banked
   626  000D96  6FA5               	movwf	(_bit_flag+1)& (0+255),b
   627  000D98  0E00               	movlw	0
   628  000D9A  6FA4               	movwf	_bit_flag& (0+255),b
   629  000D9C                     l1680:
   630                           
   631                           ;RS485_Master.c: 45:         while(bit_flag == 1)
   632  000D9C  0100               	movlb	0	; () banked
   633  000D9E  05A4               	decf	_bit_flag& (0+255),w,b
   634  000DA0  11A5               	iorwf	(_bit_flag+1)& (0+255),w,b
   635  000DA2  B4D8               	btfsc	status,2,c
   636  000DA4  EFD6  F006         	goto	u1041
   637  000DA8  EFD8  F006         	goto	u1040
   638  000DAC                     u1041:
   639  000DAC  EFAA  F006         	goto	l41
   640  000DB0                     u1040:
   641  000DB0                     
   642                           ; BSR set to: 0
   643                           ;RS485_Master.c: 55:         LATCbits.LC2 = 0;
   644  000DB0  948B               	bcf	139,2,c	;volatile
   645  000DB2                     
   646                           ; BSR set to: 0
   647                           ;RS485_Master.c: 56:         Uart_Read_String(buffer_rx, 10);
   648  000DB2  0E92               	movlw	low _buffer_rx
   649  000DB4  6E01               	movwf	Uart_Read_String@Buf^0,c
   650  000DB6  0E00               	movlw	high _buffer_rx
   651  000DB8  6E02               	movwf	(Uart_Read_String@Buf+1)^0,c
   652  000DBA  0E00               	movlw	0
   653  000DBC  6E04               	movwf	(Uart_Read_String@s_buf+1)^0,c
   654  000DBE  0E0A               	movlw	10
   655  000DC0  6E03               	movwf	Uart_Read_String@s_buf^0,c
   656  000DC2  EC46  F009         	call	_Uart_Read_String	;wreg free
   657                           
   658                           ;RS485_Master.c: 57:         if(strlen(buffer_rx) > 0)
   659  000DC6  0E92               	movlw	low _buffer_rx
   660  000DC8  6E01               	movwf	strlen@s^0,c
   661  000DCA  0E00               	movlw	high _buffer_rx
   662  000DCC  6E02               	movwf	(strlen@s+1)^0,c
   663  000DCE  EC3D  F00A         	call	_strlen	;wreg free
   664  000DD2  5001               	movf	?_strlen^0,w,c
   665  000DD4  1002               	iorwf	(?_strlen+1)^0,w,c
   666  000DD6  B4D8               	btfsc	status,2,c
   667  000DD8  EFF0  F006         	goto	u1051
   668  000DDC  EFF2  F006         	goto	u1050
   669  000DE0                     u1051:
   670  000DE0  EF09  F007         	goto	l1692
   671  000DE4                     u1050:
   672  000DE4                     
   673                           ;RS485_Master.c: 58:         {;RS485_Master.c: 59:             char dato_rx = atoi(buffe
      +                          r_rx);
   674  000DE4  0E92               	movlw	low _buffer_rx
   675  000DE6  6E08               	movwf	atoi@s^0,c
   676  000DE8  0E00               	movlw	high _buffer_rx
   677  000DEA  6E09               	movwf	(atoi@s+1)^0,c
   678  000DEC  ECCE  F005         	call	_atoi	;wreg free
   679  000DF0  5008               	movf	?_atoi^0,w,c
   680  000DF2  6E5E               	movwf	main@dato_rx^0,c
   681  000DF4                     
   682                           ;RS485_Master.c: 60:             LATD = dato_rx;
   683  000DF4  C05E  FF8C         	movff	main@dato_rx,3980	;volatile
   684  000DF8                     
   685                           ;RS485_Master.c: 61:             _delay((unsigned long)((10)*(48000000/4000.0)));
   686  000DF8  0E9C               	movlw	156
   687  000DFA  6E5C               	movwf	??_main^0,c
   688  000DFC  0ED7               	movlw	215
   689  000DFE                     u1097:
   690  000DFE  2EE8               	decfsz	wreg,f,c
   691  000E00  D7FE               	bra	u1097
   692  000E02  2E5C               	decfsz	??_main^0,f,c
   693  000E04  D7FC               	bra	u1097
   694  000E06  F000               	nop	
   695  000E08                     
   696                           ;RS485_Master.c: 62:             bit_flag = 1;
   697  000E08  0E00               	movlw	0
   698  000E0A  0100               	movlb	0	; () banked
   699  000E0C  6FA5               	movwf	(_bit_flag+1)& (0+255),b
   700  000E0E  0E01               	movlw	1
   701  000E10  6FA4               	movwf	_bit_flag& (0+255),b
   702  000E12                     l1692:
   703                           
   704                           ;RS485_Master.c: 64:         _delay((unsigned long)((1)*(48000000/4000.0)));
   705  000E12  0E10               	movlw	16
   706  000E14  6E5C               	movwf	??_main^0,c
   707  000E16  0E94               	movlw	148
   708  000E18                     u1107:
   709  000E18  2EE8               	decfsz	wreg,f,c
   710  000E1A  D7FE               	bra	u1107
   711  000E1C  2E5C               	decfsz	??_main^0,f,c
   712  000E1E  D7FC               	bra	u1107
   713  000E20  D000               	nop2	
   714  000E22  EFCE  F006         	goto	l1680
   715  000E26  EF00  F000         	goto	start
   716  000E2A                     __end_of_main:
   717                           	callstack 0
   718                           
   719 ;; *************** function _sprintf *****************
   720 ;; Defined at:
   721 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;  s               2   85[COMRAM] PTR unsigned char 
   724 ;;		 -> buffer_tx(10), 
   725 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   726 ;;		 -> STR_1(5), 
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  f               6    2[BANK0 ] struct _IO_FILE
   729 ;;  ap              2    0[BANK0 ] PTR void [1]
   730 ;;		 -> ?_sprintf(2), 
   731 ;;  ret             2    0        int 
   732 ;; Return value:  Size  Location     Type
   733 ;;                  2   85[COMRAM] int 
   734 ;; Registers used:
   735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   741 ;;      Params:         6       0       0       0       0       0       0       0       0
   742 ;;      Locals:         0       8       0       0       0       0       0       0       0
   743 ;;      Temps:          0       0       0       0       0       0       0       0       0
   744 ;;      Totals:         6       8       0       0       0       0       0       0       0
   745 ;;Total ram usage:       14 bytes
   746 ;; Hardware stack levels used: 1
   747 ;; Hardware stack levels required when called: 7
   748 ;; This function calls:
   749 ;;		_vfprintf
   750 ;; This function is called by:
   751 ;;		_main
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text1
   756  00135A                     __ptext1:
   757                           	callstack 0
   758  00135A                     _sprintf:
   759                           	callstack 23
   760  00135A  0E5A               	movlw	low (?_sprintf+4)
   761  00135C  0100               	movlb	0	; () banked
   762  00135E  6F9C               	movwf	sprintf@ap& (0+255),b
   763  001360  0E00               	movlw	high (?_sprintf+4)
   764  001362  6F9D               	movwf	(sprintf@ap+1)& (0+255),b
   765  001364  C056  F09E         	movff	sprintf@s,sprintf@f
   766  001368  C057  F09F         	movff	sprintf@s+1,sprintf@f+1
   767  00136C                     
   768                           ; BSR set to: 0
   769  00136C  0E00               	movlw	0
   770  00136E  6FA1               	movwf	(sprintf@f+3)& (0+255),b
   771  001370  0E00               	movlw	0
   772  001372  6FA0               	movwf	(sprintf@f+2)& (0+255),b
   773  001374                     
   774                           ; BSR set to: 0
   775  001374  0E00               	movlw	0
   776  001376  6FA3               	movwf	(sprintf@f+5)& (0+255),b
   777  001378  0E00               	movlw	0
   778  00137A  6FA2               	movwf	(sprintf@f+4)& (0+255),b
   779  00137C                     
   780                           ; BSR set to: 0
   781  00137C  0E9E               	movlw	low sprintf@f
   782  00137E  6E4E               	movwf	vfprintf@fp^0,c
   783  001380  0E00               	movlw	high sprintf@f
   784  001382  6E4F               	movwf	(vfprintf@fp+1)^0,c
   785  001384  C058  F050         	movff	sprintf@fmt,vfprintf@fmt
   786  001388  C059  F051         	movff	sprintf@fmt+1,vfprintf@fmt+1
   787  00138C  0E9C               	movlw	low sprintf@ap
   788  00138E  6E52               	movwf	vfprintf@ap^0,c
   789  001390  0E00               	movlw	high sprintf@ap
   790  001392  6E53               	movwf	(vfprintf@ap+1)^0,c
   791  001394  EC7C  F009         	call	_vfprintf	;wreg free
   792  001398  0100               	movlb	0	; () banked
   793  00139A  51A0               	movf	(sprintf@f+2)& (0+255),w,b
   794  00139C  2456               	addwf	sprintf@s^0,w,c
   795  00139E  6ED9               	movwf	fsr2l,c
   796  0013A0  51A1               	movf	(sprintf@f+3)& (0+255),w,b
   797  0013A2  2057               	addwfc	(sprintf@s+1)^0,w,c
   798  0013A4  6EDA               	movwf	fsr2h,c
   799  0013A6  0E00               	movlw	0
   800  0013A8  6EDF               	movwf	indf2,c
   801  0013AA                     
   802                           ; BSR set to: 0
   803  0013AA  0012               	return		;funcret
   804  0013AC                     __end_of_sprintf:
   805                           	callstack 0
   806                           
   807 ;; *************** function _vfprintf *****************
   808 ;; Defined at:
   809 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  fp              2   77[COMRAM] PTR struct _IO_FILE
   812 ;;		 -> sprintf@f(6), 
   813 ;;  fmt             2   79[COMRAM] PTR const unsigned char 
   814 ;;		 -> STR_1(5), 
   815 ;;  ap              2   81[COMRAM] PTR PTR void 
   816 ;;		 -> sprintf@ap(2), 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
   819 ;;		 -> STR_1(5), 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  2   77[COMRAM] int 
   822 ;; Registers used:
   823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   829 ;;      Params:         6       0       0       0       0       0       0       0       0
   830 ;;      Locals:         2       0       0       0       0       0       0       0       0
   831 ;;      Temps:          0       0       0       0       0       0       0       0       0
   832 ;;      Totals:         8       0       0       0       0       0       0       0       0
   833 ;;Total ram usage:        8 bytes
   834 ;; Hardware stack levels used: 1
   835 ;; Hardware stack levels required when called: 6
   836 ;; This function calls:
   837 ;;		_vfpfcnvrt
   838 ;; This function is called by:
   839 ;;		_sprintf
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text2
   844  0012F8                     __ptext2:
   845                           	callstack 0
   846  0012F8                     _vfprintf:
   847                           	callstack 23
   848  0012F8                     
   849                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   850  0012F8  C050  F054         	movff	vfprintf@fmt,vfprintf@cfmt
   851  0012FC  C051  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   852  001300                     
   853                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   854  001300  0E00               	movlw	0
   855  001302  0100               	movlb	0	; () banked
   856  001304  6F61               	movwf	(_nout+1)& (0+255),b
   857  001306  0E00               	movlw	0
   858  001308  6F60               	movwf	_nout& (0+255),b
   859                           
   860                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   861  00130A  EF9A  F009         	goto	l1558
   862  00130E                     l1556:
   863                           
   864                           ; BSR set to: 0
   865                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   866  00130E  C04E  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
   867  001312  C04F  F03D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   868  001316  0E54               	movlw	low vfprintf@cfmt
   869  001318  6E3E               	movwf	vfpfcnvrt@fmt^0,c
   870  00131A  0E00               	movlw	high vfprintf@cfmt
   871  00131C  6E3F               	movwf	(vfpfcnvrt@fmt+1)^0,c
   872  00131E  C052  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
   873  001322  C053  F041         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   874  001326  EC05  F005         	call	_vfpfcnvrt	;wreg free
   875  00132A  503C               	movf	?_vfpfcnvrt^0,w,c
   876  00132C  0100               	movlb	0	; () banked
   877  00132E  2760               	addwf	_nout& (0+255),f,b
   878  001330  503D               	movf	(?_vfpfcnvrt+1)^0,w,c
   879  001332  2361               	addwfc	(_nout+1)& (0+255),f,b
   880  001334                     l1558:
   881                           
   882                           ; BSR set to: 0
   883                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   884  001334  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
   885  001338  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   886  00133C                     	if	0	;tblptru may be non-zero
   887  00133C                     	endif
   888  00133C                     	if	0	;tblptru may be non-zero
   889  00133C                     	endif
   890  00133C  0008               	tblrd		*
   891  00133E  50F5               	movf	tablat,w,c
   892  001340  0900               	iorlw	0
   893  001342  A4D8               	btfss	status,2,c
   894  001344  EFA6  F009         	goto	u921
   895  001348  EFA8  F009         	goto	u920
   896  00134C                     u921:
   897  00134C  EF87  F009         	goto	l1556
   898  001350                     u920:
   899  001350                     
   900                           ; BSR set to: 0
   901                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   902  001350  C060  F04E         	movff	_nout,?_vfprintf
   903  001354  C061  F04F         	movff	_nout+1,?_vfprintf+1
   904  001358                     
   905                           ; BSR set to: 0
   906  001358  0012               	return		;funcret
   907  00135A                     __end_of_vfprintf:
   908                           	callstack 0
   909                           
   910 ;; *************** function _vfpfcnvrt *****************
   911 ;; Defined at:
   912 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  fp              2   59[COMRAM] PTR struct _IO_FILE
   915 ;;		 -> sprintf@f(6), 
   916 ;;  fmt             2   61[COMRAM] PTR PTR unsigned char 
   917 ;;		 -> vfprintf@cfmt(2), 
   918 ;;  ap              2   63[COMRAM] PTR PTR void 
   919 ;;		 -> sprintf@ap(2), 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  llu             8   69[COMRAM] unsigned long long 
   922 ;;  ll              8    0        long long 
   923 ;;  f               4    0        long long 
   924 ;;  vp              3    0        PTR void 
   925 ;;  ct              3    0        unsigned char [3]
   926 ;;  cp              3    0        PTR unsigned char 
   927 ;;  i               2    0        int 
   928 ;;  done            2    0        int 
   929 ;;  c               1    0        unsigned char 
   930 ;; Return value:  Size  Location     Type
   931 ;;                  2   59[COMRAM] int 
   932 ;; Registers used:
   933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   939 ;;      Params:         6       0       0       0       0       0       0       0       0
   940 ;;      Locals:         8       0       0       0       0       0       0       0       0
   941 ;;      Temps:          4       0       0       0       0       0       0       0       0
   942 ;;      Totals:        18       0       0       0       0       0       0       0       0
   943 ;;Total ram usage:       18 bytes
   944 ;; Hardware stack levels used: 1
   945 ;; Hardware stack levels required when called: 5
   946 ;; This function calls:
   947 ;;		_fputc
   948 ;;		_utoa
   949 ;; This function is called by:
   950 ;;		_vfprintf
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text3
   955  000A0A                     __ptext3:
   956                           	callstack 0
   957  000A0A                     _vfpfcnvrt:
   958                           	callstack 23
   959  000A0A                     
   960                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   961  000A0A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   962  000A0E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   963  000A12  CFDE FFF6          	movff	postinc2,tblptrl
   964  000A16  CFDD FFF7          	movff	postdec2,tblptrh
   965  000A1A                     	if	0	;tblptru may be non-zero
   966  000A1A                     	endif
   967  000A1A                     	if	0	;tblptru may be non-zero
   968  000A1A                     	endif
   969  000A1A  0008               	tblrd		*
   970  000A1C  50F5               	movf	tablat,w,c
   971  000A1E  0A25               	xorlw	37
   972  000A20  A4D8               	btfss	status,2,c
   973  000A22  EF15  F005         	goto	u791
   974  000A26  EF17  F005         	goto	u790
   975  000A2A                     u791:
   976  000A2A  EFB2  F005         	goto	l1488
   977  000A2E                     u790:
   978  000A2E                     
   979                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   980  000A2E  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   981  000A32  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   982  000A36  2ADE               	incf	postinc2,f,c
   983  000A38  0E00               	movlw	0
   984  000A3A  22DD               	addwfc	postdec2,f,c
   985  000A3C                     
   986                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   987  000A3C  0E00               	movlw	0
   988  000A3E  0100               	movlb	0	; () banked
   989  000A40  6F63               	movwf	(_width+1)& (0+255),b
   990  000A42  0E00               	movlw	0
   991  000A44  6F62               	movwf	_width& (0+255),b
   992  000A46  C062  F066         	movff	_width,_flags
   993  000A4A  C063  F067         	movff	_width+1,_flags+1
   994  000A4E                     
   995                           ; BSR set to: 0
   996                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   997  000A4E  6964               	setf	_prec& (0+255),b
   998  000A50  6965               	setf	(_prec+1)& (0+255),b
   999  000A52                     
  1000                           ; BSR set to: 0
  1001                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1204:         if 
      +                          (*fmt[0] == 'u') {
  1002  000A52  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1003  000A56  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1004  000A5A  CFDE FFF6          	movff	postinc2,tblptrl
  1005  000A5E  CFDD FFF7          	movff	postdec2,tblptrh
  1006  000A62                     	if	0	;tblptru may be non-zero
  1007  000A62                     	endif
  1008  000A62                     	if	0	;tblptru may be non-zero
  1009  000A62                     	endif
  1010  000A62  0008               	tblrd		*
  1011  000A64  50F5               	movf	tablat,w,c
  1012  000A66  0A75               	xorlw	117
  1013  000A68  A4D8               	btfss	status,2,c
  1014  000A6A  EF39  F005         	goto	u801
  1015  000A6E  EF3B  F005         	goto	u800
  1016  000A72                     u801:
  1017  000A72  EF7C  F005         	goto	l1472
  1018  000A76                     u800:
  1019  000A76                     
  1020                           ; BSR set to: 0
  1021                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1206:            
      +                           ++*fmt;
  1022  000A76  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1023  000A7A  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1024  000A7E  2ADE               	incf	postinc2,f,c
  1025  000A80  0E00               	movlw	0
  1026  000A82  22DD               	addwfc	postdec2,f,c
  1027                           
  1028                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1207:            
      +                           llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned in
      +                          t)0));
  1029  000A84  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1030  000A88  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1031  000A8C  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1032  000A90  0E02               	movlw	2
  1033  000A92  26DE               	addwf	postinc2,f,c
  1034  000A94  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1035  000A98  0E00               	movlw	0
  1036  000A9A  22DD               	addwfc	postdec2,f,c
  1037  000A9C  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1038  000AA0  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1039  000AA4  CFDE F044          	movff	postinc2,??_vfpfcnvrt+2
  1040  000AA8  CFDD F045          	movff	postdec2,??_vfpfcnvrt+3
  1041  000AAC  C044  F046         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1042  000AB0  C045  F047         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1043  000AB4  6A48               	clrf	(vfpfcnvrt@llu+2)^0,c
  1044  000AB6  6A49               	clrf	(vfpfcnvrt@llu+3)^0,c
  1045  000AB8  6A4A               	clrf	(vfpfcnvrt@llu+4)^0,c
  1046  000ABA  6A4B               	clrf	(vfpfcnvrt@llu+5)^0,c
  1047  000ABC  6A4C               	clrf	(vfpfcnvrt@llu+6)^0,c
  1048  000ABE  6A4D               	clrf	(vfpfcnvrt@llu+7)^0,c
  1049  000AC0                     
  1050                           ; BSR set to: 0
  1051                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1209:            
      +                           return utoa(fp, llu);
  1052  000AC0  C03C  F01C         	movff	vfpfcnvrt@fp,utoa@fp
  1053  000AC4  C03D  F01D         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1054  000AC8  C046  F01E         	movff	vfpfcnvrt@llu,utoa@d
  1055  000ACC  C047  F01F         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1056  000AD0  C048  F020         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1057  000AD4  C049  F021         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1058  000AD8  C04A  F022         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1059  000ADC  C04B  F023         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1060  000AE0  C04C  F024         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1061  000AE4  C04D  F025         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1062  000AE8  EC04  F004         	call	_utoa	;wreg free
  1063  000AEC  C01C  F03C         	movff	?_utoa,?_vfpfcnvrt
  1064  000AF0  C01D  F03D         	movff	?_utoa+1,?_vfpfcnvrt+1
  1065  000AF4  EFCD  F005         	goto	l890
  1066  000AF8                     l1472:
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1070  000AF8  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1071  000AFC  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1072  000B00  CFDE FFF6          	movff	postinc2,tblptrl
  1073  000B04  CFDD FFF7          	movff	postdec2,tblptrh
  1074  000B08                     	if	0	;tblptru may be non-zero
  1075  000B08                     	endif
  1076  000B08                     	if	0	;tblptru may be non-zero
  1077  000B08                     	endif
  1078  000B08  0008               	tblrd		*
  1079  000B0A  50F5               	movf	tablat,w,c
  1080  000B0C  0A25               	xorlw	37
  1081  000B0E  A4D8               	btfss	status,2,c
  1082  000B10  EF8C  F005         	goto	u811
  1083  000B14  EF8E  F005         	goto	u810
  1084  000B18                     u811:
  1085  000B18  EFA5  F005         	goto	l1482
  1086  000B1C                     u810:
  1087  000B1C                     
  1088                           ; BSR set to: 0
  1089                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1090  000B1C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1091  000B20  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1092  000B24  2ADE               	incf	postinc2,f,c
  1093  000B26  0E00               	movlw	0
  1094  000B28  22DD               	addwfc	postdec2,f,c
  1095  000B2A                     
  1096                           ; BSR set to: 0
  1097                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1098  000B2A  0E00               	movlw	0
  1099  000B2C  6E02               	movwf	(fputc@c+1)^0,c
  1100  000B2E  0E25               	movlw	37
  1101  000B30  6E01               	movwf	fputc@c^0,c
  1102  000B32  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1103  000B36  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1104  000B3A  ECF5  F007         	call	_fputc	;wreg free
  1105  000B3E                     l1478:
  1106                           
  1107                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1108  000B3E  0E00               	movlw	0
  1109  000B40  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1110  000B42  0E01               	movlw	1
  1111  000B44  6E3C               	movwf	?_vfpfcnvrt^0,c
  1112  000B46  EFCD  F005         	goto	l890
  1113  000B4A                     l1482:
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1117  000B4A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1118  000B4E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1119  000B52  2ADE               	incf	postinc2,f,c
  1120  000B54  0E00               	movlw	0
  1121  000B56  22DD               	addwfc	postdec2,f,c
  1122  000B58                     
  1123                           ; BSR set to: 0
  1124                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1125  000B58  0E00               	movlw	0
  1126  000B5A  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1127  000B5C  0E00               	movlw	0
  1128  000B5E  6E3C               	movwf	?_vfpfcnvrt^0,c
  1129  000B60  EFCD  F005         	goto	l890
  1130  000B64                     l1488:
  1131                           
  1132                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1133  000B64  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1134  000B68  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1135  000B6C  CFDE FFF6          	movff	postinc2,tblptrl
  1136  000B70  CFDD FFF7          	movff	postdec2,tblptrh
  1137  000B74                     	if	0	;tblptru may be non-zero
  1138  000B74                     	endif
  1139  000B74                     	if	0	;tblptru may be non-zero
  1140  000B74                     	endif
  1141  000B74  0008               	tblrd		*
  1142  000B76  50F5               	movf	tablat,w,c
  1143  000B78  6E01               	movwf	fputc@c^0,c
  1144  000B7A  6A02               	clrf	(fputc@c+1)^0,c
  1145  000B7C  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1146  000B80  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1147  000B84  ECF5  F007         	call	_fputc	;wreg free
  1148  000B88                     
  1149                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1150  000B88  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1151  000B8C  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1152  000B90  2ADE               	incf	postinc2,f,c
  1153  000B92  0E00               	movlw	0
  1154  000B94  22DD               	addwfc	postdec2,f,c
  1155  000B96  EF9F  F005         	goto	l1478
  1156  000B9A                     l890:
  1157  000B9A  0012               	return		;funcret
  1158  000B9C                     __end_of_vfpfcnvrt:
  1159                           	callstack 0
  1160                           
  1161 ;; *************** function _utoa *****************
  1162 ;; Defined at:
  1163 ;;		line 615 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1166 ;;		 -> sprintf@f(6), 
  1167 ;;  d               8   29[COMRAM] unsigned long long 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  n               8   49[COMRAM] unsigned long long 
  1170 ;;  i               2   57[COMRAM] int 
  1171 ;;  w               2   47[COMRAM] int 
  1172 ;;  p               2   45[COMRAM] int 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  2   27[COMRAM] int 
  1175 ;; Registers used:
  1176 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1182 ;;      Params:        10       0       0       0       0       0       0       0       0
  1183 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1184 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1185 ;;      Totals:        32       0       0       0       0       0       0       0       0
  1186 ;;Total ram usage:       32 bytes
  1187 ;; Hardware stack levels used: 1
  1188 ;; Hardware stack levels required when called: 4
  1189 ;; This function calls:
  1190 ;;		___lodiv
  1191 ;;		___lomod
  1192 ;;		_pad
  1193 ;; This function is called by:
  1194 ;;		_vfpfcnvrt
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text4
  1199  000808                     __ptext4:
  1200                           	callstack 0
  1201  000808                     _utoa:
  1202                           	callstack 23
  1203  000808                     
  1204                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 615: static int u
      +                          toa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99
      +                          \common\doprnt.c: 616: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\dop
      +                          rnt.c: 617:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common
      +                          \doprnt.c: 618:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sourc
      +                          es\c99\common\doprnt.c: 621:     if (!(prec < 0)) {
  1205  000808  0100               	movlb	0	; () banked
  1206  00080A  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1207  00080C  EF0A  F004         	goto	u721
  1208  000810  EF0C  F004         	goto	u720
  1209  000814                     u721:
  1210  000814  EF0D  F004         	goto	l1424
  1211  000818                     u720:
  1212  000818                     
  1213                           ; BSR set to: 0
  1214                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 622:         flag
      +                          s &= ~(1 << 1);
  1215  000818  9366               	bcf	_flags& (0+255),1,b
  1216  00081A                     l1424:
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 624:     p = (0 <
      +                           prec) ? prec : 1;
  1220  00081A  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1221  00081C  EF1A  F004         	goto	u730
  1222  000820  5165               	movf	(_prec+1)& (0+255),w,b
  1223  000822  E106               	bnz	u731
  1224  000824  0564               	decf	_prec& (0+255),w,b
  1225  000826  B0D8               	btfsc	status,0,c
  1226  000828  EF18  F004         	goto	u731
  1227  00082C  EF1A  F004         	goto	u730
  1228  000830                     u731:
  1229  000830  EF20  F004         	goto	l875
  1230  000834                     u730:
  1231  000834                     
  1232                           ; BSR set to: 0
  1233  000834  0E00               	movlw	0
  1234  000836  6E2F               	movwf	(utoa@p+1)^0,c
  1235  000838  0E01               	movlw	1
  1236  00083A  6E2E               	movwf	utoa@p^0,c
  1237  00083C  EF24  F004         	goto	l877
  1238  000840                     l875:
  1239                           
  1240                           ; BSR set to: 0
  1241  000840  C064  F02E         	movff	_prec,utoa@p
  1242  000844  C065  F02F         	movff	_prec+1,utoa@p+1
  1243  000848                     l877:
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 625:     w = widt
      +                          h;
  1247  000848  C062  F030         	movff	_width,utoa@w
  1248  00084C  C063  F031         	movff	_width+1,utoa@w+1
  1249                           
  1250                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 628:     n = d;
  1251  000850  C01E  F032         	movff	utoa@d,utoa@n
  1252  000854  C01F  F033         	movff	utoa@d+1,utoa@n+1
  1253  000858  C020  F034         	movff	utoa@d+2,utoa@n+2
  1254  00085C  C021  F035         	movff	utoa@d+3,utoa@n+3
  1255  000860  C022  F036         	movff	utoa@d+4,utoa@n+4
  1256  000864  C023  F037         	movff	utoa@d+5,utoa@n+5
  1257  000868  C024  F038         	movff	utoa@d+6,utoa@n+6
  1258  00086C  C025  F039         	movff	utoa@d+7,utoa@n+7
  1259  000870                     
  1260                           ; BSR set to: 0
  1261                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 629:     i = size
      +                          of(dbuf) - 1;
  1262  000870  0E00               	movlw	0
  1263  000872  6E3B               	movwf	(utoa@i+1)^0,c
  1264  000874  0E1F               	movlw	31
  1265  000876  6E3A               	movwf	utoa@i^0,c
  1266  000878                     
  1267                           ; BSR set to: 0
  1268                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 630:     dbuf[i] 
      +                          = '\0';
  1269  000878  0E00               	movlw	0
  1270  00087A  6F87               	movwf	(_dbuf+31)& (0+255),b
  1271                           
  1272                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1273  00087C  EFB6  F004         	goto	l1442
  1274  000880                     l1432:
  1275                           
  1276                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 632:         --i;
  1277  000880  063A               	decf	utoa@i^0,f,c
  1278  000882  A0D8               	btfss	status,0,c
  1279  000884  063B               	decf	(utoa@i+1)^0,f,c
  1280  000886                     
  1281                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 633:         dbuf
      +                          [i] = '0' + (n % 10);
  1282  000886  0E68               	movlw	low _dbuf
  1283  000888  243A               	addwf	utoa@i^0,w,c
  1284  00088A  6ED9               	movwf	fsr2l,c
  1285  00088C  0E00               	movlw	high _dbuf
  1286  00088E  203B               	addwfc	(utoa@i+1)^0,w,c
  1287  000890  6EDA               	movwf	fsr2h,c
  1288  000892  C032  F001         	movff	utoa@n,___lomod@dividend
  1289  000896  C033  F002         	movff	utoa@n+1,___lomod@dividend+1
  1290  00089A  C034  F003         	movff	utoa@n+2,___lomod@dividend+2
  1291  00089E  C035  F004         	movff	utoa@n+3,___lomod@dividend+3
  1292  0008A2  C036  F005         	movff	utoa@n+4,___lomod@dividend+4
  1293  0008A6  C037  F006         	movff	utoa@n+5,___lomod@dividend+5
  1294  0008AA  C038  F007         	movff	utoa@n+6,___lomod@dividend+6
  1295  0008AE  C039  F008         	movff	utoa@n+7,___lomod@dividend+7
  1296  0008B2  0E0A               	movlw	10
  1297  0008B4  6E09               	movwf	___lomod@divisor^0,c
  1298  0008B6  0E00               	movlw	0
  1299  0008B8  6E0A               	movwf	(___lomod@divisor+1)^0,c
  1300  0008BA  0E00               	movlw	0
  1301  0008BC  6E0B               	movwf	(___lomod@divisor+2)^0,c
  1302  0008BE  0E00               	movlw	0
  1303  0008C0  6E0C               	movwf	(___lomod@divisor+3)^0,c
  1304  0008C2  0E00               	movlw	0
  1305  0008C4  6E0D               	movwf	(___lomod@divisor+4)^0,c
  1306  0008C6  0E00               	movlw	0
  1307  0008C8  6E0E               	movwf	(___lomod@divisor+5)^0,c
  1308  0008CA  0E00               	movlw	0
  1309  0008CC  6E0F               	movwf	(___lomod@divisor+6)^0,c
  1310  0008CE  0E00               	movlw	0
  1311  0008D0  6E10               	movwf	(___lomod@divisor+7)^0,c
  1312  0008D2  EC8D  F007         	call	___lomod	;wreg free
  1313  0008D6  C001  F026         	movff	?___lomod,??_utoa
  1314  0008DA  C002  F027         	movff	?___lomod+1,??_utoa+1
  1315  0008DE  C003  F028         	movff	?___lomod+2,??_utoa+2
  1316  0008E2  C004  F029         	movff	?___lomod+3,??_utoa+3
  1317  0008E6  C005  F02A         	movff	?___lomod+4,??_utoa+4
  1318  0008EA  C006  F02B         	movff	?___lomod+5,??_utoa+5
  1319  0008EE  C007  F02C         	movff	?___lomod+6,??_utoa+6
  1320  0008F2  C008  F02D         	movff	?___lomod+7,??_utoa+7
  1321  0008F6  5026               	movf	??_utoa^0,w,c
  1322  0008F8  0F30               	addlw	48
  1323  0008FA  6EDF               	movwf	indf2,c
  1324  0008FC                     
  1325                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 634:         --p;
  1326  0008FC  062E               	decf	utoa@p^0,f,c
  1327  0008FE  A0D8               	btfss	status,0,c
  1328  000900  062F               	decf	(utoa@p+1)^0,f,c
  1329  000902                     
  1330                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 635:         --w;
  1331  000902  0630               	decf	utoa@w^0,f,c
  1332  000904  A0D8               	btfss	status,0,c
  1333  000906  0631               	decf	(utoa@w+1)^0,f,c
  1334  000908                     
  1335                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 636:         n = 
      +                          n / 10;
  1336  000908  C032  F001         	movff	utoa@n,___lodiv@dividend
  1337  00090C  C033  F002         	movff	utoa@n+1,___lodiv@dividend+1
  1338  000910  C034  F003         	movff	utoa@n+2,___lodiv@dividend+2
  1339  000914  C035  F004         	movff	utoa@n+3,___lodiv@dividend+3
  1340  000918  C036  F005         	movff	utoa@n+4,___lodiv@dividend+4
  1341  00091C  C037  F006         	movff	utoa@n+5,___lodiv@dividend+5
  1342  000920  C038  F007         	movff	utoa@n+6,___lodiv@dividend+6
  1343  000924  C039  F008         	movff	utoa@n+7,___lodiv@dividend+7
  1344  000928  0E0A               	movlw	10
  1345  00092A  6E09               	movwf	___lodiv@divisor^0,c
  1346  00092C  0E00               	movlw	0
  1347  00092E  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  1348  000930  0E00               	movlw	0
  1349  000932  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  1350  000934  0E00               	movlw	0
  1351  000936  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  1352  000938  0E00               	movlw	0
  1353  00093A  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  1354  00093C  0E00               	movlw	0
  1355  00093E  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  1356  000940  0E00               	movlw	0
  1357  000942  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  1358  000944  0E00               	movlw	0
  1359  000946  6E10               	movwf	(___lodiv@divisor+7)^0,c
  1360  000948  EC15  F007         	call	___lodiv	;wreg free
  1361  00094C  C001  F032         	movff	?___lodiv,utoa@n
  1362  000950  C002  F033         	movff	?___lodiv+1,utoa@n+1
  1363  000954  C003  F034         	movff	?___lodiv+2,utoa@n+2
  1364  000958  C004  F035         	movff	?___lodiv+3,utoa@n+3
  1365  00095C  C005  F036         	movff	?___lodiv+4,utoa@n+4
  1366  000960  C006  F037         	movff	?___lodiv+5,utoa@n+5
  1367  000964  C007  F038         	movff	?___lodiv+6,utoa@n+6
  1368  000968  C008  F039         	movff	?___lodiv+7,utoa@n+7
  1369  00096C                     l1442:
  1370                           
  1371                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1372  00096C  503A               	movf	utoa@i^0,w,c
  1373  00096E  103B               	iorwf	(utoa@i+1)^0,w,c
  1374  000970  B4D8               	btfsc	status,2,c
  1375  000972  EFBD  F004         	goto	u741
  1376  000976  EFBF  F004         	goto	u740
  1377  00097A                     u741:
  1378  00097A  EFF0  F004         	goto	l1452
  1379  00097E                     u740:
  1380  00097E  5032               	movf	utoa@n^0,w,c
  1381  000980  1033               	iorwf	(utoa@n+1)^0,w,c
  1382  000982  1034               	iorwf	(utoa@n+2)^0,w,c
  1383  000984  1035               	iorwf	(utoa@n+3)^0,w,c
  1384  000986  1036               	iorwf	(utoa@n+4)^0,w,c
  1385  000988  1037               	iorwf	(utoa@n+5)^0,w,c
  1386  00098A  1038               	iorwf	(utoa@n+6)^0,w,c
  1387  00098C  1039               	iorwf	(utoa@n+7)^0,w,c
  1388  00098E  A4D8               	btfss	status,2,c
  1389  000990  EFCC  F004         	goto	u751
  1390  000994  EFCE  F004         	goto	u750
  1391  000998                     u751:
  1392  000998  EF40  F004         	goto	l1432
  1393  00099C                     u750:
  1394  00099C  BE2F               	btfsc	(utoa@p+1)^0,7,c
  1395  00099E  EFDB  F004         	goto	u760
  1396  0009A2  502F               	movf	(utoa@p+1)^0,w,c
  1397  0009A4  E106               	bnz	u761
  1398  0009A6  042E               	decf	utoa@p^0,w,c
  1399  0009A8  B0D8               	btfsc	status,0,c
  1400  0009AA  EFD9  F004         	goto	u761
  1401  0009AE  EFDB  F004         	goto	u760
  1402  0009B2                     u761:
  1403  0009B2  EF40  F004         	goto	l1432
  1404  0009B6                     u760:
  1405  0009B6  BE31               	btfsc	(utoa@w+1)^0,7,c
  1406  0009B8  EFE6  F004         	goto	u771
  1407  0009BC  5031               	movf	(utoa@w+1)^0,w,c
  1408  0009BE  E108               	bnz	u770
  1409  0009C0  0430               	decf	utoa@w^0,w,c
  1410  0009C2  A0D8               	btfss	status,0,c
  1411  0009C4  EFE6  F004         	goto	u771
  1412  0009C8  EFE8  F004         	goto	u770
  1413  0009CC                     u771:
  1414  0009CC  EFF0  F004         	goto	l1452
  1415  0009D0                     u770:
  1416  0009D0  0100               	movlb	0	; () banked
  1417  0009D2  B366               	btfsc	_flags& (0+255),1,b
  1418  0009D4  EFEE  F004         	goto	u781
  1419  0009D8  EFF0  F004         	goto	u780
  1420  0009DC                     u781:
  1421  0009DC  EF40  F004         	goto	l1432
  1422  0009E0                     u780:
  1423  0009E0                     l1452:
  1424                           
  1425                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 640:     return p
      +                          ad(fp, &dbuf[i], w);
  1426  0009E0  C01C  F011         	movff	utoa@fp,pad@fp
  1427  0009E4  C01D  F012         	movff	utoa@fp+1,pad@fp+1
  1428  0009E8  0E68               	movlw	low _dbuf
  1429  0009EA  243A               	addwf	utoa@i^0,w,c
  1430  0009EC  6E13               	movwf	pad@buf^0,c
  1431  0009EE  0E00               	movlw	high _dbuf
  1432  0009F0  203B               	addwfc	(utoa@i+1)^0,w,c
  1433  0009F2  6E14               	movwf	(pad@buf+1)^0,c
  1434  0009F4  C030  F015         	movff	utoa@w,pad@p
  1435  0009F8  C031  F016         	movff	utoa@w+1,pad@p+1
  1436  0009FC  EC5A  F008         	call	_pad	;wreg free
  1437  000A00  C011  F01C         	movff	?_pad,?_utoa
  1438  000A04  C012  F01D         	movff	?_pad+1,?_utoa+1
  1439  000A08  0012               	return		;funcret
  1440  000A0A                     __end_of_utoa:
  1441                           	callstack 0
  1442                           
  1443 ;; *************** function _pad *****************
  1444 ;; Defined at:
  1445 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1448 ;;		 -> sprintf@f(6), 
  1449 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1450 ;;		 -> dbuf(32), 
  1451 ;;  p               2   20[COMRAM] int 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  w               2   25[COMRAM] int 
  1454 ;;  i               2   23[COMRAM] int 
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  2   16[COMRAM] int 
  1457 ;; Registers used:
  1458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1464 ;;      Params:         6       0       0       0       0       0       0       0       0
  1465 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1466 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1467 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1468 ;;Total ram usage:       11 bytes
  1469 ;; Hardware stack levels used: 1
  1470 ;; Hardware stack levels required when called: 3
  1471 ;; This function calls:
  1472 ;;		_fputc
  1473 ;;		_fputs
  1474 ;;		_strlen
  1475 ;; This function is called by:
  1476 ;;		_utoa
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text5
  1481  0010B4                     __ptext5:
  1482                           	callstack 0
  1483  0010B4                     _pad:
  1484                           	callstack 23
  1485  0010B4                     
  1486                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1487  0010B4  0100               	movlb	0	; () banked
  1488  0010B6  A166               	btfss	_flags& (0+255),0,b
  1489  0010B8  EF60  F008         	goto	u681
  1490  0010BC  EF62  F008         	goto	u680
  1491  0010C0                     u681:
  1492  0010C0  EF6C  F008         	goto	l1402
  1493  0010C4                     u680:
  1494  0010C4                     
  1495                           ; BSR set to: 0
  1496                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1497  0010C4  C013  F00A         	movff	pad@buf,fputs@s
  1498  0010C8  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1499  0010CC  C011  F00C         	movff	pad@fp,fputs@fp
  1500  0010D0  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1501  0010D4  ECFF  F009         	call	_fputs	;wreg free
  1502  0010D8                     l1402:
  1503                           
  1504                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1505  0010D8  BE16               	btfsc	(pad@p+1)^0,7,c
  1506  0010DA  EF71  F008         	goto	u691
  1507  0010DE  EF73  F008         	goto	u690
  1508  0010E2                     u691:
  1509  0010E2  EF79  F008         	goto	l1406
  1510  0010E6                     u690:
  1511  0010E6  C015  F01A         	movff	pad@p,pad@w
  1512  0010EA  C016  F01B         	movff	pad@p+1,pad@w+1
  1513  0010EE  EF7D  F008         	goto	l865
  1514  0010F2                     l1406:
  1515  0010F2  0E00               	movlw	0
  1516  0010F4  6E1B               	movwf	(pad@w+1)^0,c
  1517  0010F6  0E00               	movlw	0
  1518  0010F8  6E1A               	movwf	pad@w^0,c
  1519  0010FA                     l865:
  1520                           
  1521                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1522  0010FA  0E00               	movlw	0
  1523  0010FC  6E19               	movwf	(pad@i+1)^0,c
  1524  0010FE  0E00               	movlw	0
  1525  001100  6E18               	movwf	pad@i^0,c
  1526                           
  1527                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1528  001102  EF8F  F008         	goto	l1412
  1529  001106                     l1408:
  1530                           
  1531                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1532  001106  0E00               	movlw	0
  1533  001108  6E02               	movwf	(fputc@c+1)^0,c
  1534  00110A  0E20               	movlw	32
  1535  00110C  6E01               	movwf	fputc@c^0,c
  1536  00110E  C011  F003         	movff	pad@fp,fputc@fp
  1537  001112  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1538  001116  ECF5  F007         	call	_fputc	;wreg free
  1539  00111A                     
  1540                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1541  00111A  4A18               	infsnz	pad@i^0,f,c
  1542  00111C  2A19               	incf	(pad@i+1)^0,f,c
  1543  00111E                     l1412:
  1544                           
  1545                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1546  00111E  501A               	movf	pad@w^0,w,c
  1547  001120  5C18               	subwf	pad@i^0,w,c
  1548  001122  5019               	movf	(pad@i+1)^0,w,c
  1549  001124  0A80               	xorlw	128
  1550  001126  6E17               	movwf	??_pad^0,c
  1551  001128  501B               	movf	(pad@w+1)^0,w,c
  1552  00112A  0A80               	xorlw	128
  1553  00112C  5817               	subwfb	??_pad^0,w,c
  1554  00112E  A0D8               	btfss	status,0,c
  1555  001130  EF9C  F008         	goto	u701
  1556  001134  EF9E  F008         	goto	u700
  1557  001138                     u701:
  1558  001138  EF83  F008         	goto	l1408
  1559  00113C                     u700:
  1560  00113C                     
  1561                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1562  00113C  0100               	movlb	0	; () banked
  1563  00113E  B166               	btfsc	_flags& (0+255),0,b
  1564  001140  EFA4  F008         	goto	u711
  1565  001144  EFA6  F008         	goto	u710
  1566  001148                     u711:
  1567  001148  EFB0  F008         	goto	l1416
  1568  00114C                     u710:
  1569  00114C                     
  1570                           ; BSR set to: 0
  1571                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1572  00114C  C013  F00A         	movff	pad@buf,fputs@s
  1573  001150  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1574  001154  C011  F00C         	movff	pad@fp,fputs@fp
  1575  001158  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1576  00115C  ECFF  F009         	call	_fputs	;wreg free
  1577  001160                     l1416:
  1578                           
  1579                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1580  001160  C013  F001         	movff	pad@buf,strlen@s
  1581  001164  C014  F002         	movff	pad@buf+1,strlen@s+1
  1582  001168  EC3D  F00A         	call	_strlen	;wreg free
  1583  00116C  501A               	movf	pad@w^0,w,c
  1584  00116E  2401               	addwf	?_strlen^0,w,c
  1585  001170  6E11               	movwf	?_pad^0,c
  1586  001172  501B               	movf	(pad@w+1)^0,w,c
  1587  001174  2002               	addwfc	(?_strlen+1)^0,w,c
  1588  001176  6E12               	movwf	(?_pad+1)^0,c
  1589  001178  0012               	return		;funcret
  1590  00117A                     __end_of_pad:
  1591                           	callstack 0
  1592                           
  1593 ;; *************** function _strlen *****************
  1594 ;; Defined at:
  1595 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1598 ;;		 -> dbuf(32), buffer_rx(10), 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1601 ;;		 -> dbuf(32), buffer_rx(10), 
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  2    0[COMRAM] unsigned int 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1611 ;;      Params:         2       0       0       0       0       0       0       0       0
  1612 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1613 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1614 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1615 ;;Total ram usage:        4 bytes
  1616 ;; Hardware stack levels used: 1
  1617 ;; This function calls:
  1618 ;;		Nothing
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;;		_pad
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text6
  1626  00147A                     __ptext6:
  1627                           	callstack 0
  1628  00147A                     _strlen:
  1629                           	callstack 30
  1630  00147A  C001  F003         	movff	strlen@s,strlen@a
  1631  00147E  C002  F004         	movff	strlen@s+1,strlen@a+1
  1632  001482  EF45  F00A         	goto	l1346
  1633  001486                     l1344:
  1634  001486  4A01               	infsnz	strlen@s^0,f,c
  1635  001488  2A02               	incf	(strlen@s+1)^0,f,c
  1636  00148A                     l1346:
  1637  00148A  C001  FFD9         	movff	strlen@s,fsr2l
  1638  00148E  C002  FFDA         	movff	strlen@s+1,fsr2h
  1639  001492  50DF               	movf	indf2,w,c
  1640  001494  A4D8               	btfss	status,2,c
  1641  001496  EF4F  F00A         	goto	u591
  1642  00149A  EF51  F00A         	goto	u590
  1643  00149E                     u591:
  1644  00149E  EF43  F00A         	goto	l1344
  1645  0014A2                     u590:
  1646  0014A2  5003               	movf	strlen@a^0,w,c
  1647  0014A4  5C01               	subwf	strlen@s^0,w,c
  1648  0014A6  6E01               	movwf	?_strlen^0,c
  1649  0014A8  5004               	movf	(strlen@a+1)^0,w,c
  1650  0014AA  5802               	subwfb	(strlen@s+1)^0,w,c
  1651  0014AC  6E02               	movwf	(?_strlen+1)^0,c
  1652  0014AE  0012               	return		;funcret
  1653  0014B0                     __end_of_strlen:
  1654                           	callstack 0
  1655                           
  1656 ;; *************** function _fputs *****************
  1657 ;; Defined at:
  1658 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1661 ;;		 -> dbuf(32), 
  1662 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1663 ;;		 -> sprintf@f(6), 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  i               2   14[COMRAM] int 
  1666 ;;  c               1   13[COMRAM] unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  2    9[COMRAM] int 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1676 ;;      Params:         4       0       0       0       0       0       0       0       0
  1677 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1679 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1680 ;;Total ram usage:        7 bytes
  1681 ;; Hardware stack levels used: 1
  1682 ;; Hardware stack levels required when called: 2
  1683 ;; This function calls:
  1684 ;;		_fputc
  1685 ;; This function is called by:
  1686 ;;		_pad
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text7
  1691  0013FE                     __ptext7:
  1692                           	callstack 0
  1693  0013FE                     _fputs:
  1694                           	callstack 23
  1695  0013FE  0E00               	movlw	0
  1696  001400  6E10               	movwf	(fputs@i+1)^0,c
  1697  001402  0E00               	movlw	0
  1698  001404  6E0F               	movwf	fputs@i^0,c
  1699  001406  EF10  F00A         	goto	l1358
  1700  00140A                     l1354:
  1701  00140A  C00E  F001         	movff	fputs@c,fputc@c
  1702  00140E  6A02               	clrf	(fputc@c+1)^0,c
  1703  001410  C00C  F003         	movff	fputs@fp,fputc@fp
  1704  001414  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1705  001418  ECF5  F007         	call	_fputc	;wreg free
  1706  00141C  4A0F               	infsnz	fputs@i^0,f,c
  1707  00141E  2A10               	incf	(fputs@i+1)^0,f,c
  1708  001420                     l1358:
  1709  001420  500F               	movf	fputs@i^0,w,c
  1710  001422  240A               	addwf	fputs@s^0,w,c
  1711  001424  6ED9               	movwf	fsr2l,c
  1712  001426  5010               	movf	(fputs@i+1)^0,w,c
  1713  001428  200B               	addwfc	(fputs@s+1)^0,w,c
  1714  00142A  6EDA               	movwf	fsr2h,c
  1715  00142C  50DF               	movf	indf2,w,c
  1716  00142E  6E0E               	movwf	fputs@c^0,c
  1717  001430  500E               	movf	fputs@c^0,w,c
  1718  001432  A4D8               	btfss	status,2,c
  1719  001434  EF1E  F00A         	goto	u601
  1720  001438  EF20  F00A         	goto	u600
  1721  00143C                     u601:
  1722  00143C  EF05  F00A         	goto	l1354
  1723  001440                     u600:
  1724  001440  0012               	return		;funcret
  1725  001442                     __end_of_fputs:
  1726                           	callstack 0
  1727                           
  1728 ;; *************** function _fputc *****************
  1729 ;; Defined at:
  1730 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  c               2    0[COMRAM] int 
  1733 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1734 ;;		 -> sprintf@f(6), 
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  2    0[COMRAM] int 
  1739 ;; Registers used:
  1740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1746 ;;      Params:         4       0       0       0       0       0       0       0       0
  1747 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1748 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1749 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1750 ;;Total ram usage:        9 bytes
  1751 ;; Hardware stack levels used: 1
  1752 ;; Hardware stack levels required when called: 1
  1753 ;; This function calls:
  1754 ;;		_putch
  1755 ;; This function is called by:
  1756 ;;		_pad
  1757 ;;		_vfpfcnvrt
  1758 ;;		_fputs
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text8
  1763  000FEA                     __ptext8:
  1764                           	callstack 0
  1765  000FEA                     _fputc:
  1766                           	callstack 23
  1767  000FEA  5003               	movf	fputc@fp^0,w,c
  1768  000FEC  1004               	iorwf	(fputc@fp+1)^0,w,c
  1769  000FEE  B4D8               	btfsc	status,2,c
  1770  000FF0  EFFC  F007         	goto	u551
  1771  000FF4  EFFE  F007         	goto	u550
  1772  000FF8                     u551:
  1773  000FF8  EF07  F008         	goto	l1332
  1774  000FFC                     u550:
  1775  000FFC  5003               	movf	fputc@fp^0,w,c
  1776  000FFE  1004               	iorwf	(fputc@fp+1)^0,w,c
  1777  001000  A4D8               	btfss	status,2,c
  1778  001002  EF05  F008         	goto	u561
  1779  001006  EF07  F008         	goto	u560
  1780  00100A                     u561:
  1781  00100A  EF0C  F008         	goto	l1334
  1782  00100E                     u560:
  1783  00100E                     l1332:
  1784  00100E  5001               	movf	fputc@c^0,w,c
  1785  001010  ECB9  F00A         	call	_putch
  1786  001014  EF59  F008         	goto	l909
  1787  001018                     l1334:
  1788  001018  EE20 F004          	lfsr	2,4
  1789  00101C  5003               	movf	fputc@fp^0,w,c
  1790  00101E  26D9               	addwf	fsr2l,f,c
  1791  001020  5004               	movf	(fputc@fp+1)^0,w,c
  1792  001022  22DA               	addwfc	fsr2h,f,c
  1793  001024  50DE               	movf	postinc2,w,c
  1794  001026  10DE               	iorwf	postinc2,w,c
  1795  001028  B4D8               	btfsc	status,2,c
  1796  00102A  EF19  F008         	goto	u571
  1797  00102E  EF1B  F008         	goto	u570
  1798  001032                     u571:
  1799  001032  EF36  F008         	goto	l1338
  1800  001036                     u570:
  1801  001036  EE20 F004          	lfsr	2,4
  1802  00103A  5003               	movf	fputc@fp^0,w,c
  1803  00103C  26D9               	addwf	fsr2l,f,c
  1804  00103E  5004               	movf	(fputc@fp+1)^0,w,c
  1805  001040  22DA               	addwfc	fsr2h,f,c
  1806  001042  EE10 F002          	lfsr	1,2
  1807  001046  5003               	movf	fputc@fp^0,w,c
  1808  001048  26E1               	addwf	fsr1l,f,c
  1809  00104A  5004               	movf	(fputc@fp+1)^0,w,c
  1810  00104C  22E2               	addwfc	fsr1h,f,c
  1811  00104E  50DE               	movf	postinc2,w,c
  1812  001050  5CE6               	subwf	postinc1,w,c
  1813  001052  50E6               	movf	postinc1,w,c
  1814  001054  0A80               	xorlw	128
  1815  001056  6E09               	movwf	(??_fputc+4)^0,c
  1816  001058  50DE               	movf	postinc2,w,c
  1817  00105A  0A80               	xorlw	128
  1818  00105C  5809               	subwfb	(??_fputc+4)^0,w,c
  1819  00105E  B0D8               	btfsc	status,0,c
  1820  001060  EF34  F008         	goto	u581
  1821  001064  EF36  F008         	goto	u580
  1822  001068                     u581:
  1823  001068  EF59  F008         	goto	l909
  1824  00106C                     u580:
  1825  00106C                     l1338:
  1826  00106C  EE20 F002          	lfsr	2,2
  1827  001070  5003               	movf	fputc@fp^0,w,c
  1828  001072  26D9               	addwf	fsr2l,f,c
  1829  001074  5004               	movf	(fputc@fp+1)^0,w,c
  1830  001076  22DA               	addwfc	fsr2h,f,c
  1831  001078  CFDE F005          	movff	postinc2,??_fputc
  1832  00107C  CFDD F006          	movff	postdec2,??_fputc+1
  1833  001080  C003  FFD9         	movff	fputc@fp,fsr2l
  1834  001084  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1835  001088  CFDE F007          	movff	postinc2,??_fputc+2
  1836  00108C  CFDD F008          	movff	postdec2,??_fputc+3
  1837  001090  5005               	movf	??_fputc^0,w,c
  1838  001092  2407               	addwf	(??_fputc+2)^0,w,c
  1839  001094  6ED9               	movwf	fsr2l,c
  1840  001096  5006               	movf	(??_fputc+1)^0,w,c
  1841  001098  2008               	addwfc	(??_fputc+3)^0,w,c
  1842  00109A  6EDA               	movwf	fsr2h,c
  1843  00109C  C001  FFDF         	movff	fputc@c,indf2
  1844  0010A0  EE20 F002          	lfsr	2,2
  1845  0010A4  5003               	movf	fputc@fp^0,w,c
  1846  0010A6  26D9               	addwf	fsr2l,f,c
  1847  0010A8  5004               	movf	(fputc@fp+1)^0,w,c
  1848  0010AA  22DA               	addwfc	fsr2h,f,c
  1849  0010AC  2ADE               	incf	postinc2,f,c
  1850  0010AE  0E00               	movlw	0
  1851  0010B0  22DD               	addwfc	postdec2,f,c
  1852  0010B2                     l909:
  1853  0010B2  0012               	return		;funcret
  1854  0010B4                     __end_of_fputc:
  1855                           	callstack 0
  1856                           
  1857 ;; *************** function _putch *****************
  1858 ;; Defined at:
  1859 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  c               1    wreg     unsigned char 
  1862 ;; Auto vars:     Size  Location     Type
  1863 ;;  c               1    0[COMRAM] unsigned char 
  1864 ;; Return value:  Size  Location     Type
  1865 ;;                  1    wreg      void 
  1866 ;; Registers used:
  1867 ;;		wreg
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1873 ;;      Params:         0       0       0       0       0       0       0       0       0
  1874 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1875 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1876 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1877 ;;Total ram usage:        0 bytes
  1878 ;; Hardware stack levels used: 1
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_fputc
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text9
  1887  001572                     __ptext9:
  1888                           	callstack 0
  1889  001572                     _putch:
  1890                           	callstack 23
  1891  001572  0012               	return		;funcret
  1892  001574                     __end_of_putch:
  1893                           	callstack 0
  1894                           
  1895 ;; *************** function ___lomod *****************
  1896 ;; Defined at:
  1897 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lomod.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  dividend        8    0[COMRAM] unsigned long long 
  1900 ;;  divisor         8    8[COMRAM] unsigned long long 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  counter         1   16[COMRAM] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  8    0[COMRAM] unsigned long long 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2, status,0
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1912 ;;      Params:        16       0       0       0       0       0       0       0       0
  1913 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1915 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1916 ;;Total ram usage:       17 bytes
  1917 ;; Hardware stack levels used: 1
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_utoa
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text10
  1926  000F1A                     __ptext10:
  1927                           	callstack 0
  1928  000F1A                     ___lomod:
  1929                           	callstack 26
  1930  000F1A  5009               	movf	___lomod@divisor^0,w,c
  1931  000F1C  100A               	iorwf	(___lomod@divisor+1)^0,w,c
  1932  000F1E  100B               	iorwf	(___lomod@divisor+2)^0,w,c
  1933  000F20  100C               	iorwf	(___lomod@divisor+3)^0,w,c
  1934  000F22  100D               	iorwf	(___lomod@divisor+4)^0,w,c
  1935  000F24  100E               	iorwf	(___lomod@divisor+5)^0,w,c
  1936  000F26  100F               	iorwf	(___lomod@divisor+6)^0,w,c
  1937  000F28  1010               	iorwf	(___lomod@divisor+7)^0,w,c
  1938  000F2A  B4D8               	btfsc	status,2,c
  1939  000F2C  EF9A  F007         	goto	u651
  1940  000F30  EF9C  F007         	goto	u650
  1941  000F34                     u651:
  1942  000F34  EFE4  F007         	goto	l565
  1943  000F38                     u650:
  1944  000F38  0E01               	movlw	1
  1945  000F3A  6E11               	movwf	___lomod@counter^0,c
  1946  000F3C  EFAA  F007         	goto	l1388
  1947  000F40                     l1386:
  1948  000F40  90D8               	bcf	status,0,c
  1949  000F42  3609               	rlcf	___lomod@divisor^0,f,c
  1950  000F44  360A               	rlcf	(___lomod@divisor+1)^0,f,c
  1951  000F46  360B               	rlcf	(___lomod@divisor+2)^0,f,c
  1952  000F48  360C               	rlcf	(___lomod@divisor+3)^0,f,c
  1953  000F4A  360D               	rlcf	(___lomod@divisor+4)^0,f,c
  1954  000F4C  360E               	rlcf	(___lomod@divisor+5)^0,f,c
  1955  000F4E  360F               	rlcf	(___lomod@divisor+6)^0,f,c
  1956  000F50  3610               	rlcf	(___lomod@divisor+7)^0,f,c
  1957  000F52  2A11               	incf	___lomod@counter^0,f,c
  1958  000F54                     l1388:
  1959  000F54  AE10               	btfss	(___lomod@divisor+7)^0,7,c
  1960  000F56  EFAF  F007         	goto	u661
  1961  000F5A  EFB1  F007         	goto	u660
  1962  000F5E                     u661:
  1963  000F5E  EFA0  F007         	goto	l1386
  1964  000F62                     u660:
  1965  000F62                     l1390:
  1966  000F62  5009               	movf	___lomod@divisor^0,w,c
  1967  000F64  5C01               	subwf	___lomod@dividend^0,w,c
  1968  000F66  500A               	movf	(___lomod@divisor+1)^0,w,c
  1969  000F68  5802               	subwfb	(___lomod@dividend+1)^0,w,c
  1970  000F6A  500B               	movf	(___lomod@divisor+2)^0,w,c
  1971  000F6C  5803               	subwfb	(___lomod@dividend+2)^0,w,c
  1972  000F6E  500C               	movf	(___lomod@divisor+3)^0,w,c
  1973  000F70  5804               	subwfb	(___lomod@dividend+3)^0,w,c
  1974  000F72  500D               	movf	(___lomod@divisor+4)^0,w,c
  1975  000F74  5805               	subwfb	(___lomod@dividend+4)^0,w,c
  1976  000F76  500E               	movf	(___lomod@divisor+5)^0,w,c
  1977  000F78  5806               	subwfb	(___lomod@dividend+5)^0,w,c
  1978  000F7A  500F               	movf	(___lomod@divisor+6)^0,w,c
  1979  000F7C  5807               	subwfb	(___lomod@dividend+6)^0,w,c
  1980  000F7E  5010               	movf	(___lomod@divisor+7)^0,w,c
  1981  000F80  5808               	subwfb	(___lomod@dividend+7)^0,w,c
  1982  000F82  A0D8               	btfss	status,0,c
  1983  000F84  EFC6  F007         	goto	u671
  1984  000F88  EFC8  F007         	goto	u670
  1985  000F8C                     u671:
  1986  000F8C  EFD8  F007         	goto	l1394
  1987  000F90                     u670:
  1988  000F90  5009               	movf	___lomod@divisor^0,w,c
  1989  000F92  5E01               	subwf	___lomod@dividend^0,f,c
  1990  000F94  500A               	movf	(___lomod@divisor+1)^0,w,c
  1991  000F96  5A02               	subwfb	(___lomod@dividend+1)^0,f,c
  1992  000F98  500B               	movf	(___lomod@divisor+2)^0,w,c
  1993  000F9A  5A03               	subwfb	(___lomod@dividend+2)^0,f,c
  1994  000F9C  500C               	movf	(___lomod@divisor+3)^0,w,c
  1995  000F9E  5A04               	subwfb	(___lomod@dividend+3)^0,f,c
  1996  000FA0  500D               	movf	(___lomod@divisor+4)^0,w,c
  1997  000FA2  5A05               	subwfb	(___lomod@dividend+4)^0,f,c
  1998  000FA4  500E               	movf	(___lomod@divisor+5)^0,w,c
  1999  000FA6  5A06               	subwfb	(___lomod@dividend+5)^0,f,c
  2000  000FA8  500F               	movf	(___lomod@divisor+6)^0,w,c
  2001  000FAA  5A07               	subwfb	(___lomod@dividend+6)^0,f,c
  2002  000FAC  5010               	movf	(___lomod@divisor+7)^0,w,c
  2003  000FAE  5A08               	subwfb	(___lomod@dividend+7)^0,f,c
  2004  000FB0                     l1394:
  2005  000FB0  90D8               	bcf	status,0,c
  2006  000FB2  3210               	rrcf	(___lomod@divisor+7)^0,f,c
  2007  000FB4  320F               	rrcf	(___lomod@divisor+6)^0,f,c
  2008  000FB6  320E               	rrcf	(___lomod@divisor+5)^0,f,c
  2009  000FB8  320D               	rrcf	(___lomod@divisor+4)^0,f,c
  2010  000FBA  320C               	rrcf	(___lomod@divisor+3)^0,f,c
  2011  000FBC  320B               	rrcf	(___lomod@divisor+2)^0,f,c
  2012  000FBE  320A               	rrcf	(___lomod@divisor+1)^0,f,c
  2013  000FC0  3209               	rrcf	___lomod@divisor^0,f,c
  2014  000FC2  2E11               	decfsz	___lomod@counter^0,f,c
  2015  000FC4  EFB1  F007         	goto	l1390
  2016  000FC8                     l565:
  2017  000FC8  C001  F001         	movff	___lomod@dividend,?___lomod
  2018  000FCC  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  2019  000FD0  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  2020  000FD4  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  2021  000FD8  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  2022  000FDC  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  2023  000FE0  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  2024  000FE4  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  2025  000FE8  0012               	return		;funcret
  2026  000FEA                     __end_of___lomod:
  2027                           	callstack 0
  2028                           
  2029 ;; *************** function ___lodiv *****************
  2030 ;; Defined at:
  2031 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lodiv.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;  dividend        8    0[COMRAM] unsigned long long 
  2034 ;;  divisor         8    8[COMRAM] unsigned long long 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  quotient        8   16[COMRAM] unsigned long long 
  2037 ;;  counter         1   24[COMRAM] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  8    0[COMRAM] unsigned long long 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2047 ;;      Params:        16       0       0       0       0       0       0       0       0
  2048 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2050 ;;      Totals:        25       0       0       0       0       0       0       0       0
  2051 ;;Total ram usage:       25 bytes
  2052 ;; Hardware stack levels used: 1
  2053 ;; This function calls:
  2054 ;;		Nothing
  2055 ;; This function is called by:
  2056 ;;		_utoa
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           	psect	text11
  2061  000E2A                     __ptext11:
  2062                           	callstack 0
  2063  000E2A                     ___lodiv:
  2064                           	callstack 26
  2065  000E2A  EE20  F011         	lfsr	2,___lodiv@quotient
  2066  000E2E  0E07               	movlw	7
  2067  000E30                     u611:
  2068  000E30  6ADE               	clrf	postinc2,c
  2069  000E32  06E8               	decf	wreg,f,c
  2070  000E34  E2FD               	bc	u611
  2071  000E36  5009               	movf	___lodiv@divisor^0,w,c
  2072  000E38  100A               	iorwf	(___lodiv@divisor+1)^0,w,c
  2073  000E3A  100B               	iorwf	(___lodiv@divisor+2)^0,w,c
  2074  000E3C  100C               	iorwf	(___lodiv@divisor+3)^0,w,c
  2075  000E3E  100D               	iorwf	(___lodiv@divisor+4)^0,w,c
  2076  000E40  100E               	iorwf	(___lodiv@divisor+5)^0,w,c
  2077  000E42  100F               	iorwf	(___lodiv@divisor+6)^0,w,c
  2078  000E44  1010               	iorwf	(___lodiv@divisor+7)^0,w,c
  2079  000E46  B4D8               	btfsc	status,2,c
  2080  000E48  EF28  F007         	goto	u621
  2081  000E4C  EF2A  F007         	goto	u620
  2082  000E50                     u621:
  2083  000E50  EF7C  F007         	goto	l555
  2084  000E54                     u620:
  2085  000E54  0E01               	movlw	1
  2086  000E56  6E19               	movwf	___lodiv@counter^0,c
  2087  000E58  EF38  F007         	goto	l1368
  2088  000E5C                     l1366:
  2089  000E5C  90D8               	bcf	status,0,c
  2090  000E5E  3609               	rlcf	___lodiv@divisor^0,f,c
  2091  000E60  360A               	rlcf	(___lodiv@divisor+1)^0,f,c
  2092  000E62  360B               	rlcf	(___lodiv@divisor+2)^0,f,c
  2093  000E64  360C               	rlcf	(___lodiv@divisor+3)^0,f,c
  2094  000E66  360D               	rlcf	(___lodiv@divisor+4)^0,f,c
  2095  000E68  360E               	rlcf	(___lodiv@divisor+5)^0,f,c
  2096  000E6A  360F               	rlcf	(___lodiv@divisor+6)^0,f,c
  2097  000E6C  3610               	rlcf	(___lodiv@divisor+7)^0,f,c
  2098  000E6E  2A19               	incf	___lodiv@counter^0,f,c
  2099  000E70                     l1368:
  2100  000E70  AE10               	btfss	(___lodiv@divisor+7)^0,7,c
  2101  000E72  EF3D  F007         	goto	u631
  2102  000E76  EF3F  F007         	goto	u630
  2103  000E7A                     u631:
  2104  000E7A  EF2E  F007         	goto	l1366
  2105  000E7E                     u630:
  2106  000E7E                     l1370:
  2107  000E7E  90D8               	bcf	status,0,c
  2108  000E80  3611               	rlcf	___lodiv@quotient^0,f,c
  2109  000E82  3612               	rlcf	(___lodiv@quotient+1)^0,f,c
  2110  000E84  3613               	rlcf	(___lodiv@quotient+2)^0,f,c
  2111  000E86  3614               	rlcf	(___lodiv@quotient+3)^0,f,c
  2112  000E88  3615               	rlcf	(___lodiv@quotient+4)^0,f,c
  2113  000E8A  3616               	rlcf	(___lodiv@quotient+5)^0,f,c
  2114  000E8C  3617               	rlcf	(___lodiv@quotient+6)^0,f,c
  2115  000E8E  3618               	rlcf	(___lodiv@quotient+7)^0,f,c
  2116  000E90  5009               	movf	___lodiv@divisor^0,w,c
  2117  000E92  5C01               	subwf	___lodiv@dividend^0,w,c
  2118  000E94  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2119  000E96  5802               	subwfb	(___lodiv@dividend+1)^0,w,c
  2120  000E98  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2121  000E9A  5803               	subwfb	(___lodiv@dividend+2)^0,w,c
  2122  000E9C  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2123  000E9E  5804               	subwfb	(___lodiv@dividend+3)^0,w,c
  2124  000EA0  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2125  000EA2  5805               	subwfb	(___lodiv@dividend+4)^0,w,c
  2126  000EA4  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2127  000EA6  5806               	subwfb	(___lodiv@dividend+5)^0,w,c
  2128  000EA8  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2129  000EAA  5807               	subwfb	(___lodiv@dividend+6)^0,w,c
  2130  000EAC  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2131  000EAE  5808               	subwfb	(___lodiv@dividend+7)^0,w,c
  2132  000EB0  A0D8               	btfss	status,0,c
  2133  000EB2  EF5D  F007         	goto	u641
  2134  000EB6  EF5F  F007         	goto	u640
  2135  000EBA                     u641:
  2136  000EBA  EF70  F007         	goto	l1378
  2137  000EBE                     u640:
  2138  000EBE  5009               	movf	___lodiv@divisor^0,w,c
  2139  000EC0  5E01               	subwf	___lodiv@dividend^0,f,c
  2140  000EC2  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2141  000EC4  5A02               	subwfb	(___lodiv@dividend+1)^0,f,c
  2142  000EC6  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2143  000EC8  5A03               	subwfb	(___lodiv@dividend+2)^0,f,c
  2144  000ECA  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2145  000ECC  5A04               	subwfb	(___lodiv@dividend+3)^0,f,c
  2146  000ECE  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2147  000ED0  5A05               	subwfb	(___lodiv@dividend+4)^0,f,c
  2148  000ED2  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2149  000ED4  5A06               	subwfb	(___lodiv@dividend+5)^0,f,c
  2150  000ED6  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2151  000ED8  5A07               	subwfb	(___lodiv@dividend+6)^0,f,c
  2152  000EDA  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2153  000EDC  5A08               	subwfb	(___lodiv@dividend+7)^0,f,c
  2154  000EDE  8011               	bsf	___lodiv@quotient^0,0,c
  2155  000EE0                     l1378:
  2156  000EE0  90D8               	bcf	status,0,c
  2157  000EE2  3210               	rrcf	(___lodiv@divisor+7)^0,f,c
  2158  000EE4  320F               	rrcf	(___lodiv@divisor+6)^0,f,c
  2159  000EE6  320E               	rrcf	(___lodiv@divisor+5)^0,f,c
  2160  000EE8  320D               	rrcf	(___lodiv@divisor+4)^0,f,c
  2161  000EEA  320C               	rrcf	(___lodiv@divisor+3)^0,f,c
  2162  000EEC  320B               	rrcf	(___lodiv@divisor+2)^0,f,c
  2163  000EEE  320A               	rrcf	(___lodiv@divisor+1)^0,f,c
  2164  000EF0  3209               	rrcf	___lodiv@divisor^0,f,c
  2165  000EF2  2E19               	decfsz	___lodiv@counter^0,f,c
  2166  000EF4  EF3F  F007         	goto	l1370
  2167  000EF8                     l555:
  2168  000EF8  C011  F001         	movff	___lodiv@quotient,?___lodiv
  2169  000EFC  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  2170  000F00  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  2171  000F04  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  2172  000F08  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  2173  000F0C  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  2174  000F10  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  2175  000F14  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  2176  000F18  0012               	return		;funcret
  2177  000F1A                     __end_of___lodiv:
  2178                           	callstack 0
  2179                           
  2180 ;; *************** function _atoi *****************
  2181 ;; Defined at:
  2182 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\atoi.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2185 ;;		 -> buffer_rx(10), 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  n               2   20[COMRAM] int 
  2188 ;;  neg             2   13[COMRAM] int 
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  2    7[COMRAM] int 
  2191 ;; Registers used:
  2192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2198 ;;      Params:         2       0       0       0       0       0       0       0       0
  2199 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2200 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2201 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2202 ;;Total ram usage:       15 bytes
  2203 ;; Hardware stack levels used: 1
  2204 ;; Hardware stack levels required when called: 1
  2205 ;; This function calls:
  2206 ;;		___wmul
  2207 ;;		_isdigit
  2208 ;;		_isspace
  2209 ;; This function is called by:
  2210 ;;		_main
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text12
  2215  000B9C                     __ptext12:
  2216                           	callstack 0
  2217  000B9C                     _atoi:
  2218                           	callstack 29
  2219  000B9C  0E00               	movlw	0
  2220  000B9E  6E16               	movwf	(atoi@n+1)^0,c
  2221  000BA0  0E00               	movlw	0
  2222  000BA2  6E15               	movwf	atoi@n^0,c
  2223  000BA4  0E00               	movlw	0
  2224  000BA6  6E0F               	movwf	(atoi@neg+1)^0,c
  2225  000BA8  0E00               	movlw	0
  2226  000BAA  6E0E               	movwf	atoi@neg^0,c
  2227  000BAC  EFDA  F005         	goto	l1614
  2228  000BB0                     l1612:
  2229  000BB0  4A08               	infsnz	atoi@s^0,f,c
  2230  000BB2  2A09               	incf	(atoi@s+1)^0,f,c
  2231  000BB4                     l1614:
  2232  000BB4  0E01               	movlw	1
  2233  000BB6  6E14               	movwf	_atoi$960^0,c
  2234  000BB8  C008  FFD9         	movff	atoi@s,fsr2l
  2235  000BBC  C009  FFDA         	movff	atoi@s+1,fsr2h
  2236  000BC0  0E20               	movlw	32
  2237  000BC2  18DE               	xorwf	postinc2,w,c
  2238  000BC4  B4D8               	btfsc	status,2,c
  2239  000BC6  EFE7  F005         	goto	u971
  2240  000BCA  EFE9  F005         	goto	u970
  2241  000BCE                     u971:
  2242  000BCE  EF05  F006         	goto	l1622
  2243  000BD2                     u970:
  2244  000BD2  0EF7               	movlw	247
  2245  000BD4  6E0A               	movwf	??_atoi^0,c
  2246  000BD6  0EFF               	movlw	255
  2247  000BD8  6E0B               	movwf	(??_atoi+1)^0,c
  2248  000BDA  C008  FFD9         	movff	atoi@s,fsr2l
  2249  000BDE  C009  FFDA         	movff	atoi@s+1,fsr2h
  2250  000BE2  50DF               	movf	indf2,w,c
  2251  000BE4  6E0C               	movwf	(??_atoi+2)^0,c
  2252  000BE6  6A0D               	clrf	(??_atoi+3)^0,c
  2253  000BE8  500A               	movf	??_atoi^0,w,c
  2254  000BEA  260C               	addwf	(??_atoi+2)^0,f,c
  2255  000BEC  500B               	movf	(??_atoi+1)^0,w,c
  2256  000BEE  220D               	addwfc	(??_atoi+3)^0,f,c
  2257  000BF0  500D               	movf	(??_atoi+3)^0,w,c
  2258  000BF2  E109               	bnz	u980
  2259  000BF4  0E05               	movlw	5
  2260  000BF6  5C0C               	subwf	(??_atoi+2)^0,w,c
  2261  000BF8  A0D8               	btfss	status,0,c
  2262  000BFA  EF01  F006         	goto	u981
  2263  000BFE  EF03  F006         	goto	u980
  2264  000C02                     u981:
  2265  000C02  EF05  F006         	goto	l1622
  2266  000C06                     u980:
  2267  000C06  0E00               	movlw	0
  2268  000C08  6E14               	movwf	_atoi$960^0,c
  2269  000C0A                     l1622:
  2270  000C0A  C014  F010         	movff	_atoi$960,_atoi$959
  2271  000C0E  6A11               	clrf	(_atoi$959+1)^0,c
  2272  000C10  5010               	movf	_atoi$959^0,w,c
  2273  000C12  1011               	iorwf	(_atoi$959+1)^0,w,c
  2274  000C14  A4D8               	btfss	status,2,c
  2275  000C16  EF0F  F006         	goto	u991
  2276  000C1A  EF11  F006         	goto	u990
  2277  000C1E                     u991:
  2278  000C1E  EFD8  F005         	goto	l1612
  2279  000C22                     u990:
  2280  000C22  EF1B  F006         	goto	l1632
  2281  000C26                     l1628:
  2282  000C26  0E00               	movlw	0
  2283  000C28  6E0F               	movwf	(atoi@neg+1)^0,c
  2284  000C2A  0E01               	movlw	1
  2285  000C2C  6E0E               	movwf	atoi@neg^0,c
  2286  000C2E                     l1630:
  2287  000C2E  4A08               	infsnz	atoi@s^0,f,c
  2288  000C30  2A09               	incf	(atoi@s+1)^0,f,c
  2289  000C32  EF50  F006         	goto	l1638
  2290  000C36                     l1632:
  2291  000C36  C008  FFD9         	movff	atoi@s,fsr2l
  2292  000C3A  C009  FFDA         	movff	atoi@s+1,fsr2h
  2293  000C3E  50DF               	movf	indf2,w,c
  2294  000C40  6E0A               	movwf	??_atoi^0,c
  2295  000C42  6A0B               	clrf	(??_atoi+1)^0,c
  2296                           
  2297                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2298                           ; Switch size 1, requested type "simple"
  2299                           ; Number of cases is 1, Range of values is 0 to 0
  2300                           ; switch strategies available:
  2301                           ; Name         Instructions Cycles
  2302                           ; simple_byte            4     3 (average)
  2303                           ;	Chosen strategy is simple_byte
  2304  000C44  500B               	movf	(??_atoi+1)^0,w,c
  2305  000C46  0A00               	xorlw	0	; case 0
  2306  000C48  B4D8               	btfsc	status,2,c
  2307  000C4A  EF29  F006         	goto	l1730
  2308  000C4E  EF50  F006         	goto	l1638
  2309  000C52                     l1730:
  2310                           
  2311                           ; Switch size 1, requested type "simple"
  2312                           ; Number of cases is 2, Range of values is 43 to 45
  2313                           ; switch strategies available:
  2314                           ; Name         Instructions Cycles
  2315                           ; simple_byte            7     4 (average)
  2316                           ;	Chosen strategy is simple_byte
  2317  000C52  500A               	movf	??_atoi^0,w,c
  2318  000C54  0A2B               	xorlw	43	; case 43
  2319  000C56  B4D8               	btfsc	status,2,c
  2320  000C58  EF17  F006         	goto	l1630
  2321  000C5C  0A06               	xorlw	6	; case 45
  2322  000C5E  B4D8               	btfsc	status,2,c
  2323  000C60  EF13  F006         	goto	l1628
  2324  000C64  EF50  F006         	goto	l1638
  2325  000C68                     l1634:
  2326  000C68  C015  F001         	movff	atoi@n,___wmul@multiplier
  2327  000C6C  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2328  000C70  0E00               	movlw	0
  2329  000C72  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2330  000C74  0E0A               	movlw	10
  2331  000C76  6E03               	movwf	___wmul@multiplicand^0,c
  2332  000C78  EC87  F00A         	call	___wmul	;wreg free
  2333  000C7C  C008  FFD9         	movff	atoi@s,fsr2l
  2334  000C80  C009  FFDA         	movff	atoi@s+1,fsr2h
  2335  000C84  50DF               	movf	indf2,w,c
  2336  000C86  6E0A               	movwf	??_atoi^0,c
  2337  000C88  500A               	movf	??_atoi^0,w,c
  2338  000C8A  5E01               	subwf	?___wmul^0,f,c
  2339  000C8C  0E00               	movlw	0
  2340  000C8E  5A02               	subwfb	(?___wmul+1)^0,f,c
  2341  000C90  0E30               	movlw	48
  2342  000C92  2401               	addwf	?___wmul^0,w,c
  2343  000C94  6E15               	movwf	atoi@n^0,c
  2344  000C96  0E00               	movlw	0
  2345  000C98  2002               	addwfc	(?___wmul+1)^0,w,c
  2346  000C9A  6E16               	movwf	(atoi@n+1)^0,c
  2347  000C9C  EF17  F006         	goto	l1630
  2348  000CA0                     l1638:
  2349  000CA0  0ED0               	movlw	208
  2350  000CA2  6E0A               	movwf	??_atoi^0,c
  2351  000CA4  0EFF               	movlw	255
  2352  000CA6  6E0B               	movwf	(??_atoi+1)^0,c
  2353  000CA8  C008  FFD9         	movff	atoi@s,fsr2l
  2354  000CAC  C009  FFDA         	movff	atoi@s+1,fsr2h
  2355  000CB0  50DF               	movf	indf2,w,c
  2356  000CB2  6E0C               	movwf	(??_atoi+2)^0,c
  2357  000CB4  6A0D               	clrf	(??_atoi+3)^0,c
  2358  000CB6  500A               	movf	??_atoi^0,w,c
  2359  000CB8  260C               	addwf	(??_atoi+2)^0,f,c
  2360  000CBA  500B               	movf	(??_atoi+1)^0,w,c
  2361  000CBC  220D               	addwfc	(??_atoi+3)^0,f,c
  2362  000CBE  500D               	movf	(??_atoi+3)^0,w,c
  2363  000CC0  E10A               	bnz	u1000
  2364  000CC2  0E0A               	movlw	10
  2365  000CC4  5C0C               	subwf	(??_atoi+2)^0,w,c
  2366  000CC6  A0D8               	btfss	status,0,c
  2367  000CC8  EF68  F006         	goto	u1001
  2368  000CCC  EF6B  F006         	goto	u1000
  2369  000CD0                     u1001:
  2370  000CD0  0E01               	movlw	1
  2371  000CD2  EF6C  F006         	goto	u1010
  2372  000CD6                     u1000:
  2373  000CD6  0E00               	movlw	0
  2374  000CD8                     u1010:
  2375  000CD8  6E12               	movwf	_atoi$961^0,c
  2376  000CDA  6A13               	clrf	(_atoi$961+1)^0,c
  2377  000CDC  5012               	movf	_atoi$961^0,w,c
  2378  000CDE  1013               	iorwf	(_atoi$961+1)^0,w,c
  2379  000CE0  A4D8               	btfss	status,2,c
  2380  000CE2  EF75  F006         	goto	u1021
  2381  000CE6  EF77  F006         	goto	u1020
  2382  000CEA                     u1021:
  2383  000CEA  EF34  F006         	goto	l1634
  2384  000CEE                     u1020:
  2385  000CEE  500E               	movf	atoi@neg^0,w,c
  2386  000CF0  100F               	iorwf	(atoi@neg+1)^0,w,c
  2387  000CF2  A4D8               	btfss	status,2,c
  2388  000CF4  EF7E  F006         	goto	u1031
  2389  000CF8  EF80  F006         	goto	u1030
  2390  000CFC                     u1031:
  2391  000CFC  EF8E  F006         	goto	l816
  2392  000D00                     u1030:
  2393  000D00  C015  F00A         	movff	atoi@n,??_atoi
  2394  000D04  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2395  000D08  1E0A               	comf	??_atoi^0,f,c
  2396  000D0A  1E0B               	comf	(??_atoi+1)^0,f,c
  2397  000D0C  4A0A               	infsnz	??_atoi^0,f,c
  2398  000D0E  2A0B               	incf	(??_atoi+1)^0,f,c
  2399  000D10  C00A  F008         	movff	??_atoi,?_atoi
  2400  000D14  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2401  000D18  EF92  F006         	goto	l819
  2402  000D1C                     l816:
  2403  000D1C  C015  F008         	movff	atoi@n,?_atoi
  2404  000D20  C016  F009         	movff	atoi@n+1,?_atoi+1
  2405  000D24                     l819:
  2406  000D24  0012               	return		;funcret
  2407  000D26                     __end_of_atoi:
  2408                           	callstack 0
  2409                           
  2410 ;; *************** function _isspace *****************
  2411 ;; Defined at:
  2412 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isspace.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  c               2    0[COMRAM] int 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;		None
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  2    0[COMRAM] int 
  2419 ;; Registers used:
  2420 ;;		wreg, status,2, status,0
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2426 ;;      Params:         2       0       0       0       0       0       0       0       0
  2427 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2428 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2429 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2430 ;;Total ram usage:        7 bytes
  2431 ;; Hardware stack levels used: 1
  2432 ;; This function calls:
  2433 ;;		Nothing
  2434 ;; This function is called by:
  2435 ;;		_atoi
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text13
  2440  0013AC                     __ptext13:
  2441                           	callstack 0
  2442  0013AC                     _isspace:
  2443                           	callstack 29
  2444  0013AC  0E01               	movlw	1
  2445  0013AE  6E07               	movwf	_isspace$977^0,c
  2446  0013B0  0E20               	movlw	32
  2447  0013B2  1801               	xorwf	isspace@c^0,w,c
  2448  0013B4  1002               	iorwf	(isspace@c+1)^0,w,c
  2449  0013B6  B4D8               	btfsc	status,2,c
  2450  0013B8  EFE0  F009         	goto	u881
  2451  0013BC  EFE2  F009         	goto	u880
  2452  0013C0                     u881:
  2453  0013C0  EFFB  F009         	goto	l1544
  2454  0013C4                     u880:
  2455  0013C4  0EF7               	movlw	247
  2456  0013C6  6E03               	movwf	??_isspace^0,c
  2457  0013C8  0EFF               	movlw	255
  2458  0013CA  6E04               	movwf	(??_isspace+1)^0,c
  2459  0013CC  C001  F005         	movff	isspace@c,??_isspace+2
  2460  0013D0  C002  F006         	movff	isspace@c+1,??_isspace+3
  2461  0013D4  5003               	movf	??_isspace^0,w,c
  2462  0013D6  2605               	addwf	(??_isspace+2)^0,f,c
  2463  0013D8  5004               	movf	(??_isspace+1)^0,w,c
  2464  0013DA  2206               	addwfc	(??_isspace+3)^0,f,c
  2465  0013DC  5006               	movf	(??_isspace+3)^0,w,c
  2466  0013DE  E109               	bnz	u890
  2467  0013E0  0E05               	movlw	5
  2468  0013E2  5C05               	subwf	(??_isspace+2)^0,w,c
  2469  0013E4  A0D8               	btfss	status,0,c
  2470  0013E6  EFF7  F009         	goto	u891
  2471  0013EA  EFF9  F009         	goto	u890
  2472  0013EE                     u891:
  2473  0013EE  EFFB  F009         	goto	l1544
  2474  0013F2                     u890:
  2475  0013F2  0E00               	movlw	0
  2476  0013F4  6E07               	movwf	_isspace$977^0,c
  2477  0013F6                     l1544:
  2478  0013F6  C007  F001         	movff	_isspace$977,?_isspace
  2479  0013FA  6A02               	clrf	(?_isspace+1)^0,c
  2480  0013FC  0012               	return		;funcret
  2481  0013FE                     __end_of_isspace:
  2482                           	callstack 0
  2483                           
  2484 ;; *************** function _isdigit *****************
  2485 ;; Defined at:
  2486 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isdigit.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;  c               2    0[COMRAM] int 
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;		None
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  2    0[COMRAM] int 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2, status,0
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2500 ;;      Params:         2       0       0       0       0       0       0       0       0
  2501 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2502 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2503 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2504 ;;Total ram usage:        6 bytes
  2505 ;; Hardware stack levels used: 1
  2506 ;; This function calls:
  2507 ;;		Nothing
  2508 ;; This function is called by:
  2509 ;;		_atoi
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           	psect	text14
  2514  001442                     __ptext14:
  2515                           	callstack 0
  2516  001442                     _isdigit:
  2517                           	callstack 29
  2518  001442  0ED0               	movlw	208
  2519  001444  6E03               	movwf	??_isdigit^0,c
  2520  001446  0EFF               	movlw	255
  2521  001448  6E04               	movwf	(??_isdigit+1)^0,c
  2522  00144A  C001  F005         	movff	isdigit@c,??_isdigit+2
  2523  00144E  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2524  001452  5003               	movf	??_isdigit^0,w,c
  2525  001454  2605               	addwf	(??_isdigit+2)^0,f,c
  2526  001456  5004               	movf	(??_isdigit+1)^0,w,c
  2527  001458  2206               	addwfc	(??_isdigit+3)^0,f,c
  2528  00145A  5006               	movf	(??_isdigit+3)^0,w,c
  2529  00145C  E10A               	bnz	u900
  2530  00145E  0E0A               	movlw	10
  2531  001460  5C05               	subwf	(??_isdigit+2)^0,w,c
  2532  001462  A0D8               	btfss	status,0,c
  2533  001464  EF36  F00A         	goto	u901
  2534  001468  EF39  F00A         	goto	u900
  2535  00146C                     u901:
  2536  00146C  0E01               	movlw	1
  2537  00146E  EF3A  F00A         	goto	u910
  2538  001472                     u900:
  2539  001472  0E00               	movlw	0
  2540  001474                     u910:
  2541  001474  6E01               	movwf	?_isdigit^0,c
  2542  001476  6A02               	clrf	(?_isdigit+1)^0,c
  2543  001478  0012               	return		;funcret
  2544  00147A                     __end_of_isdigit:
  2545                           	callstack 0
  2546                           
  2547 ;; *************** function ___wmul *****************
  2548 ;; Defined at:
  2549 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;  multiplier      2    0[COMRAM] unsigned int 
  2552 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  product         2    4[COMRAM] unsigned int 
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  2    0[COMRAM] unsigned int 
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, status,0, prodl, prodh
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2564 ;;      Params:         4       0       0       0       0       0       0       0       0
  2565 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2567 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2568 ;;Total ram usage:        6 bytes
  2569 ;; Hardware stack levels used: 1
  2570 ;; This function calls:
  2571 ;;		Nothing
  2572 ;; This function is called by:
  2573 ;;		_atoi
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text15
  2578  00150E                     __ptext15:
  2579                           	callstack 0
  2580  00150E                     ___wmul:
  2581                           	callstack 29
  2582  00150E  5001               	movf	___wmul@multiplier^0,w,c
  2583  001510  0203               	mulwf	___wmul@multiplicand^0,c
  2584  001512  CFF3 F005          	movff	prodl,___wmul@product
  2585  001516  CFF4 F006          	movff	prodh,___wmul@product+1
  2586  00151A  5001               	movf	___wmul@multiplier^0,w,c
  2587  00151C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2588  00151E  50F3               	movf	243,w,c
  2589  001520  2606               	addwf	(___wmul@product+1)^0,f,c
  2590  001522  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2591  001524  0203               	mulwf	___wmul@multiplicand^0,c
  2592  001526  50F3               	movf	243,w,c
  2593  001528  2606               	addwf	(___wmul@product+1)^0,f,c
  2594  00152A  C005  F001         	movff	___wmul@product,?___wmul
  2595  00152E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2596  001532  0012               	return		;funcret
  2597  001534                     __end_of___wmul:
  2598                           	callstack 0
  2599                           
  2600 ;; *************** function _Uart_Send_String *****************
  2601 ;; Defined at:
  2602 ;;		line 35 in file "uart.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;  info            2    1[COMRAM] PTR unsigned char 
  2605 ;;		 -> buffer_tx(10), 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;		None
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  1    wreg      void 
  2610 ;; Registers used:
  2611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2617 ;;      Params:         2       0       0       0       0       0       0       0       0
  2618 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2620 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2621 ;;Total ram usage:        2 bytes
  2622 ;; Hardware stack levels used: 1
  2623 ;; Hardware stack levels required when called: 1
  2624 ;; This function calls:
  2625 ;;		_Uart_Send_Char
  2626 ;; This function is called by:
  2627 ;;		_main
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text16
  2632  0014B0                     __ptext16:
  2633                           	callstack 0
  2634  0014B0                     _Uart_Send_String:
  2635                           	callstack 29
  2636  0014B0                     
  2637                           ;uart.c: 35: void Uart_Send_String(char *info);uart.c: 36: {;uart.c: 37:     while(*info
      +                          )
  2638  0014B0  EF63  F00A         	goto	l1590
  2639  0014B4                     l1586:
  2640                           
  2641                           ;uart.c: 38:     {;uart.c: 39:         Uart_Send_Char(*info++);
  2642  0014B4  C002  FFD9         	movff	Uart_Send_String@info,fsr2l
  2643  0014B8  C003  FFDA         	movff	Uart_Send_String@info+1,fsr2h
  2644  0014BC  50DF               	movf	indf2,w,c
  2645  0014BE  ECAD  F00A         	call	_Uart_Send_Char
  2646  0014C2  4A02               	infsnz	Uart_Send_String@info^0,f,c
  2647  0014C4  2A03               	incf	(Uart_Send_String@info+1)^0,f,c
  2648  0014C6                     l1590:
  2649                           
  2650                           ;uart.c: 37:     while(*info)
  2651  0014C6  C002  FFD9         	movff	Uart_Send_String@info,fsr2l
  2652  0014CA  C003  FFDA         	movff	Uart_Send_String@info+1,fsr2h
  2653  0014CE  50DF               	movf	indf2,w,c
  2654  0014D0  A4D8               	btfss	status,2,c
  2655  0014D2  EF6D  F00A         	goto	u941
  2656  0014D6  EF6F  F00A         	goto	u940
  2657  0014DA                     u941:
  2658  0014DA  EF5A  F00A         	goto	l1586
  2659  0014DE                     u940:
  2660  0014DE  0012               	return		;funcret
  2661  0014E0                     __end_of_Uart_Send_String:
  2662                           	callstack 0
  2663                           
  2664 ;; *************** function _Uart_Send_Char *****************
  2665 ;; Defined at:
  2666 ;;		line 29 in file "uart.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  txData          1    wreg     unsigned char 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  txData          1    0[COMRAM] unsigned char 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      void 
  2673 ;; Registers used:
  2674 ;;		wreg
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2680 ;;      Params:         0       0       0       0       0       0       0       0       0
  2681 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2683 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2684 ;;Total ram usage:        1 bytes
  2685 ;; Hardware stack levels used: 1
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_Uart_Send_String
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text17
  2694  00155A                     __ptext17:
  2695                           	callstack 0
  2696  00155A                     _Uart_Send_Char:
  2697                           	callstack 29
  2698                           
  2699                           ;incstack = 0
  2700                           ;Uart_Send_Char@txData stored from wreg
  2701  00155A  6E01               	movwf	Uart_Send_Char@txData^0,c
  2702  00155C                     l79:
  2703  00155C  A2AC               	btfss	172,1,c	;volatile
  2704  00155E  EFB3  F00A         	goto	u821
  2705  001562  EFB5  F00A         	goto	u820
  2706  001566                     u821:
  2707  001566  EFAE  F00A         	goto	l79
  2708  00156A                     u820:
  2709  00156A                     
  2710                           ;uart.c: 32:     TXREG = txData;
  2711  00156A  C001  FFAD         	movff	Uart_Send_Char@txData,4013	;volatile
  2712  00156E  0012               	return		;funcret
  2713  001570                     __end_of_Uart_Send_Char:
  2714                           	callstack 0
  2715                           
  2716 ;; *************** function _Uart_Read_String *****************
  2717 ;; Defined at:
  2718 ;;		line 55 in file "uart.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  Buf             2    0[COMRAM] PTR unsigned char 
  2721 ;;		 -> buffer_rx(10), 
  2722 ;;  s_buf           2    2[COMRAM] unsigned int 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  cont_buf        2    7[COMRAM] unsigned int 
  2725 ;;  c               1    6[COMRAM] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2735 ;;      Params:         4       0       0       0       0       0       0       0       0
  2736 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2737 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2738 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2739 ;;Total ram usage:        9 bytes
  2740 ;; Hardware stack levels used: 1
  2741 ;; Hardware stack levels required when called: 1
  2742 ;; This function calls:
  2743 ;;		_Uart_Read
  2744 ;; This function is called by:
  2745 ;;		_main
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           	psect	text18
  2750  00128C                     __ptext18:
  2751                           	callstack 0
  2752  00128C                     _Uart_Read_String:
  2753                           	callstack 29
  2754  00128C                     
  2755                           ;uart.c: 55: void Uart_Read_String(char* Buf, unsigned int s_buf);uart.c: 56: {;uart.c: 
      +                          57:     unsigned int cont_buf = 0;
  2756  00128C  0E00               	movlw	0
  2757  00128E  6E09               	movwf	(Uart_Read_String@cont_buf+1)^0,c
  2758  001290  0E00               	movlw	0
  2759  001292  6E08               	movwf	Uart_Read_String@cont_buf^0,c
  2760  001294                     l1594:
  2761                           
  2762                           ;uart.c: 60:     {;uart.c: 61:         c = Uart_Read();
  2763  001294  EC9A  F00A         	call	_Uart_Read	;wreg free
  2764  001298  6E07               	movwf	Uart_Read_String@c^0,c
  2765  00129A                     
  2766                           ;uart.c: 62:         Buf[cont_buf++] = c;
  2767  00129A  5008               	movf	Uart_Read_String@cont_buf^0,w,c
  2768  00129C  2401               	addwf	Uart_Read_String@Buf^0,w,c
  2769  00129E  6ED9               	movwf	fsr2l,c
  2770  0012A0  5009               	movf	(Uart_Read_String@cont_buf+1)^0,w,c
  2771  0012A2  2002               	addwfc	(Uart_Read_String@Buf+1)^0,w,c
  2772  0012A4  6EDA               	movwf	fsr2h,c
  2773  0012A6  C007  FFDF         	movff	Uart_Read_String@c,indf2
  2774  0012AA  4A08               	infsnz	Uart_Read_String@cont_buf^0,f,c
  2775  0012AC  2A09               	incf	(Uart_Read_String@cont_buf+1)^0,f,c
  2776  0012AE                     
  2777                           ;uart.c: 63:         if(cont_buf >= s_buf) break;
  2778  0012AE  5003               	movf	Uart_Read_String@s_buf^0,w,c
  2779  0012B0  5C08               	subwf	Uart_Read_String@cont_buf^0,w,c
  2780  0012B2  5004               	movf	(Uart_Read_String@s_buf+1)^0,w,c
  2781  0012B4  5809               	subwfb	(Uart_Read_String@cont_buf+1)^0,w,c
  2782  0012B6  A0D8               	btfss	status,0,c
  2783  0012B8  EF60  F009         	goto	u951
  2784  0012BC  EF62  F009         	goto	u950
  2785  0012C0                     u951:
  2786  0012C0  EF64  F009         	goto	l1604
  2787  0012C4                     u950:
  2788  0012C4  EF6D  F009         	goto	l1606
  2789  0012C8                     l1604:
  2790                           
  2791                           ;uart.c: 64:     }while(c != '\n');
  2792  0012C8  0E0A               	movlw	10
  2793  0012CA  1807               	xorwf	Uart_Read_String@c^0,w,c
  2794  0012CC  A4D8               	btfss	status,2,c
  2795  0012CE  EF6B  F009         	goto	u961
  2796  0012D2  EF6D  F009         	goto	u960
  2797  0012D6                     u961:
  2798  0012D6  EF4A  F009         	goto	l1594
  2799  0012DA                     u960:
  2800  0012DA                     l1606:
  2801                           
  2802                           ;uart.c: 65:     Buf[cont_buf-2] = '\0';
  2803  0012DA  5008               	movf	Uart_Read_String@cont_buf^0,w,c
  2804  0012DC  2401               	addwf	Uart_Read_String@Buf^0,w,c
  2805  0012DE  6E05               	movwf	??_Uart_Read_String^0,c
  2806  0012E0  5009               	movf	(Uart_Read_String@cont_buf+1)^0,w,c
  2807  0012E2  2002               	addwfc	(Uart_Read_String@Buf+1)^0,w,c
  2808  0012E4  6E06               	movwf	(??_Uart_Read_String+1)^0,c
  2809  0012E6  0EFE               	movlw	254
  2810  0012E8  2405               	addwf	??_Uart_Read_String^0,w,c
  2811  0012EA  6ED9               	movwf	fsr2l,c
  2812  0012EC  0EFF               	movlw	255
  2813  0012EE  2006               	addwfc	(??_Uart_Read_String+1)^0,w,c
  2814  0012F0  6EDA               	movwf	fsr2h,c
  2815  0012F2  0E00               	movlw	0
  2816  0012F4  6EDF               	movwf	indf2,c
  2817  0012F6  0012               	return		;funcret
  2818  0012F8                     __end_of_Uart_Read_String:
  2819                           	callstack 0
  2820                           
  2821 ;; *************** function _Uart_Read *****************
  2822 ;; Defined at:
  2823 ;;		line 43 in file "uart.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;		None
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;		None
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  1    wreg      unsigned char 
  2830 ;; Registers used:
  2831 ;;		wreg, status,2
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2837 ;;      Params:         0       0       0       0       0       0       0       0       0
  2838 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2839 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2840 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2841 ;;Total ram usage:        0 bytes
  2842 ;; Hardware stack levels used: 1
  2843 ;; This function calls:
  2844 ;;		Nothing
  2845 ;; This function is called by:
  2846 ;;		_Uart_Read_String
  2847 ;;		_Uart_Read_StringUntil
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           	psect	text19
  2852  001534                     __ptext19:
  2853                           	callstack 0
  2854  001534                     _Uart_Read:
  2855                           	callstack 29
  2856  001534                     l91:
  2857  001534  AA9E               	btfss	158,5,c	;volatile
  2858  001536  EF9F  F00A         	goto	u831
  2859  00153A  EFA1  F00A         	goto	u830
  2860  00153E                     u831:
  2861  00153E  EF9A  F00A         	goto	l91
  2862  001542                     u830:
  2863  001542                     
  2864                           ;uart.c: 46:     if(RCSTAbits.OERR == 1)
  2865  001542  A2AB               	btfss	171,1,c	;volatile
  2866  001544  EFA6  F00A         	goto	u841
  2867  001548  EFA8  F00A         	goto	u840
  2868  00154C                     u841:
  2869  00154C  EFAA  F00A         	goto	l94
  2870  001550                     u840:
  2871  001550                     
  2872                           ;uart.c: 47:     {;uart.c: 48:         RCSTAbits.CREN = 0;
  2873  001550  98AB               	bcf	171,4,c	;volatile
  2874                           
  2875                           ;uart.c: 49:         RCSTAbits.CREN = 1;
  2876  001552  88AB               	bsf	171,4,c	;volatile
  2877  001554                     l94:
  2878                           
  2879                           ;uart.c: 51:     PIR1bits.RCIF = 0;
  2880  001554  9A9E               	bcf	158,5,c	;volatile
  2881  001556                     
  2882                           ;uart.c: 52:     return RCREG;
  2883  001556  50AE               	movf	174,w,c	;volatile
  2884  001558  0012               	return		;funcret
  2885  00155A                     __end_of_Uart_Read:
  2886                           	callstack 0
  2887                           
  2888 ;; *************** function _Uart_Init *****************
  2889 ;; Defined at:
  2890 ;;		line 11 in file "uart.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  baud            4   13[COMRAM] unsigned long 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  vx              2   21[COMRAM] unsigned int 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2, status,0, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2904 ;;      Params:         4       0       0       0       0       0       0       0       0
  2905 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2906 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2907 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2908 ;;Total ram usage:       10 bytes
  2909 ;; Hardware stack levels used: 1
  2910 ;; Hardware stack levels required when called: 1
  2911 ;; This function calls:
  2912 ;;		___lldiv
  2913 ;; This function is called by:
  2914 ;;		_main
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text20
  2919  00121E                     __ptext20:
  2920                           	callstack 0
  2921  00121E                     _Uart_Init:
  2922                           	callstack 29
  2923  00121E                     
  2924                           ;uart.c: 11: void Uart_Init(unsigned long baud);uart.c: 12: {;uart.c: 13:     TRISCbits.
      +                          RC6 = 0;
  2925  00121E  9C94               	bcf	148,6,c	;volatile
  2926                           
  2927                           ;uart.c: 14:     TRISCbits.RC7 = 1;
  2928  001220  8E94               	bsf	148,7,c	;volatile
  2929  001222                     
  2930                           ;uart.c: 15:     TXSTA = 0x24;
  2931  001222  0E24               	movlw	36
  2932  001224  6EAC               	movwf	172,c	;volatile
  2933                           
  2934                           ;uart.c: 16:     RCSTA = 0x90;
  2935  001226  0E90               	movlw	144
  2936  001228  6EAB               	movwf	171,c	;volatile
  2937                           
  2938                           ;uart.c: 17:     BAUDCON = 0x00;
  2939  00122A  0E00               	movlw	0
  2940  00122C  6EB8               	movwf	184,c	;volatile
  2941  00122E                     
  2942                           ;uart.c: 18:     BAUDCONbits.BRG16 = 1;
  2943  00122E  86B8               	bsf	184,3,c	;volatile
  2944  001230                     
  2945                           ;uart.c: 19:     unsigned int vx = (48000000/(baud*4))-1;
  2946  001230  0E00               	movlw	0
  2947  001232  6E01               	movwf	___lldiv@dividend^0,c
  2948  001234  0E6C               	movlw	108
  2949  001236  6E02               	movwf	(___lldiv@dividend+1)^0,c
  2950  001238  0EDC               	movlw	220
  2951  00123A  6E03               	movwf	(___lldiv@dividend+2)^0,c
  2952  00123C  0E02               	movlw	2
  2953  00123E  6E04               	movwf	(___lldiv@dividend+3)^0,c
  2954  001240  C00E  F012         	movff	Uart_Init@baud,??_Uart_Init
  2955  001244  C00F  F013         	movff	Uart_Init@baud+1,??_Uart_Init+1
  2956  001248  C010  F014         	movff	Uart_Init@baud+2,??_Uart_Init+2
  2957  00124C  C011  F015         	movff	Uart_Init@baud+3,??_Uart_Init+3
  2958  001250  0E02               	movlw	2
  2959  001252                     u935:
  2960  001252  90D8               	bcf	status,0,c
  2961  001254  3612               	rlcf	??_Uart_Init^0,f,c
  2962  001256  3613               	rlcf	(??_Uart_Init+1)^0,f,c
  2963  001258  3614               	rlcf	(??_Uart_Init+2)^0,f,c
  2964  00125A  3615               	rlcf	(??_Uart_Init+3)^0,f,c
  2965  00125C  2EE8               	decfsz	wreg,f,c
  2966  00125E  EF29  F009         	goto	u935
  2967  001262  C012  F005         	movff	??_Uart_Init,___lldiv@divisor
  2968  001266  C013  F006         	movff	??_Uart_Init+1,___lldiv@divisor+1
  2969  00126A  C014  F007         	movff	??_Uart_Init+2,___lldiv@divisor+2
  2970  00126E  C015  F008         	movff	??_Uart_Init+3,___lldiv@divisor+3
  2971  001272  ECBD  F008         	call	___lldiv	;wreg free
  2972  001276  0EFF               	movlw	255
  2973  001278  2401               	addwf	?___lldiv^0,w,c
  2974  00127A  6E16               	movwf	Uart_Init@vx^0,c
  2975  00127C  0EFF               	movlw	255
  2976  00127E  2002               	addwfc	(?___lldiv+1)^0,w,c
  2977  001280  6E17               	movwf	(Uart_Init@vx+1)^0,c
  2978  001282                     
  2979                           ;uart.c: 20:     SPBRG = vx & 0x00FF;
  2980  001282  C016  FFAF         	movff	Uart_Init@vx,4015	;volatile
  2981  001286                     
  2982                           ;uart.c: 21:     SPBRGH = vx >> 8;
  2983  001286  5017               	movf	(Uart_Init@vx+1)^0,w,c
  2984  001288  6EB0               	movwf	176,c	;volatile
  2985  00128A  0012               	return		;funcret
  2986  00128C                     __end_of_Uart_Init:
  2987                           	callstack 0
  2988                           
  2989 ;; *************** function ___lldiv *****************
  2990 ;; Defined at:
  2991 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__lldiv.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  dividend        4    0[COMRAM] unsigned long 
  2994 ;;  divisor         4    4[COMRAM] unsigned long 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  quotient        4    8[COMRAM] unsigned long 
  2997 ;;  counter         1   12[COMRAM] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  4    0[COMRAM] unsigned long 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3007 ;;      Params:         8       0       0       0       0       0       0       0       0
  3008 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3010 ;;      Totals:        13       0       0       0       0       0       0       0       0
  3011 ;;Total ram usage:       13 bytes
  3012 ;; Hardware stack levels used: 1
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_Uart_Init
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text21
  3021  00117A                     __ptext21:
  3022                           	callstack 0
  3023  00117A                     ___lldiv:
  3024                           	callstack 29
  3025  00117A  0E00               	movlw	0
  3026  00117C  6E09               	movwf	___lldiv@quotient^0,c
  3027  00117E  0E00               	movlw	0
  3028  001180  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  3029  001182  0E00               	movlw	0
  3030  001184  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  3031  001186  0E00               	movlw	0
  3032  001188  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  3033  00118A  5005               	movf	___lldiv@divisor^0,w,c
  3034  00118C  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  3035  00118E  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  3036  001190  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  3037  001192  B4D8               	btfsc	status,2,c
  3038  001194  EFCE  F008         	goto	u851
  3039  001198  EFD0  F008         	goto	u850
  3040  00119C                     u851:
  3041  00119C  EF06  F009         	goto	l144
  3042  0011A0                     u850:
  3043  0011A0  0E01               	movlw	1
  3044  0011A2  6E0D               	movwf	___lldiv@counter^0,c
  3045  0011A4  EFDA  F008         	goto	l1522
  3046  0011A8                     l1520:
  3047  0011A8  90D8               	bcf	status,0,c
  3048  0011AA  3605               	rlcf	___lldiv@divisor^0,f,c
  3049  0011AC  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  3050  0011AE  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  3051  0011B0  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  3052  0011B2  2A0D               	incf	___lldiv@counter^0,f,c
  3053  0011B4                     l1522:
  3054  0011B4  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  3055  0011B6  EFDF  F008         	goto	u861
  3056  0011BA  EFE1  F008         	goto	u860
  3057  0011BE                     u861:
  3058  0011BE  EFD4  F008         	goto	l1520
  3059  0011C2                     u860:
  3060  0011C2                     l1524:
  3061  0011C2  90D8               	bcf	status,0,c
  3062  0011C4  3609               	rlcf	___lldiv@quotient^0,f,c
  3063  0011C6  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  3064  0011C8  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  3065  0011CA  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  3066  0011CC  5005               	movf	___lldiv@divisor^0,w,c
  3067  0011CE  5C01               	subwf	___lldiv@dividend^0,w,c
  3068  0011D0  5006               	movf	(___lldiv@divisor+1)^0,w,c
  3069  0011D2  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  3070  0011D4  5007               	movf	(___lldiv@divisor+2)^0,w,c
  3071  0011D6  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  3072  0011D8  5008               	movf	(___lldiv@divisor+3)^0,w,c
  3073  0011DA  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  3074  0011DC  A0D8               	btfss	status,0,c
  3075  0011DE  EFF3  F008         	goto	u871
  3076  0011E2  EFF5  F008         	goto	u870
  3077  0011E6                     u871:
  3078  0011E6  EFFE  F008         	goto	l1532
  3079  0011EA                     u870:
  3080  0011EA  5005               	movf	___lldiv@divisor^0,w,c
  3081  0011EC  5E01               	subwf	___lldiv@dividend^0,f,c
  3082  0011EE  5006               	movf	(___lldiv@divisor+1)^0,w,c
  3083  0011F0  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  3084  0011F2  5007               	movf	(___lldiv@divisor+2)^0,w,c
  3085  0011F4  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  3086  0011F6  5008               	movf	(___lldiv@divisor+3)^0,w,c
  3087  0011F8  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  3088  0011FA  8009               	bsf	___lldiv@quotient^0,0,c
  3089  0011FC                     l1532:
  3090  0011FC  90D8               	bcf	status,0,c
  3091  0011FE  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  3092  001200  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  3093  001202  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  3094  001204  3205               	rrcf	___lldiv@divisor^0,f,c
  3095  001206  2E0D               	decfsz	___lldiv@counter^0,f,c
  3096  001208  EFE1  F008         	goto	l1524
  3097  00120C                     l144:
  3098  00120C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3099  001210  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3100  001214  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3101  001218  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3102  00121C  0012               	return		;funcret
  3103  00121E                     __end_of___lldiv:
  3104                           	callstack 0
  3105                           
  3106                           	psect	rparam
  3107  0000                     
  3108                           	psect	idloc
  3109                           
  3110                           ;Config register IDLOC0 @ 0x200000
  3111                           ;	unspecified, using default values
  3112  200000                     	org	2097152
  3113  200000  FF                 	db	255
  3114                           
  3115                           ;Config register IDLOC1 @ 0x200001
  3116                           ;	unspecified, using default values
  3117  200001                     	org	2097153
  3118  200001  FF                 	db	255
  3119                           
  3120                           ;Config register IDLOC2 @ 0x200002
  3121                           ;	unspecified, using default values
  3122  200002                     	org	2097154
  3123  200002  FF                 	db	255
  3124                           
  3125                           ;Config register IDLOC3 @ 0x200003
  3126                           ;	unspecified, using default values
  3127  200003                     	org	2097155
  3128  200003  FF                 	db	255
  3129                           
  3130                           ;Config register IDLOC4 @ 0x200004
  3131                           ;	unspecified, using default values
  3132  200004                     	org	2097156
  3133  200004  FF                 	db	255
  3134                           
  3135                           ;Config register IDLOC5 @ 0x200005
  3136                           ;	unspecified, using default values
  3137  200005                     	org	2097157
  3138  200005  FF                 	db	255
  3139                           
  3140                           ;Config register IDLOC6 @ 0x200006
  3141                           ;	unspecified, using default values
  3142  200006                     	org	2097158
  3143  200006  FF                 	db	255
  3144                           
  3145                           ;Config register IDLOC7 @ 0x200007
  3146                           ;	unspecified, using default values
  3147  200007                     	org	2097159
  3148  200007  FF                 	db	255
  3149                           
  3150                           	psect	config
  3151                           
  3152                           ;Config register CONFIG1L @ 0x300000
  3153                           ;	PLL Prescaler Selection bits
  3154                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  3155                           ;	System Clock Postscaler Selection bits
  3156                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3157                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3158                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  3159  300000                     	org	3145728
  3160  300000  21                 	db	33
  3161                           
  3162                           ;Config register CONFIG1H @ 0x300001
  3163                           ;	Oscillator Selection bits
  3164                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  3165                           ;	Fail-Safe Clock Monitor Enable bit
  3166                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3167                           ;	Internal/External Oscillator Switchover bit
  3168                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3169  300001                     	org	3145729
  3170  300001  0E                 	db	14
  3171                           
  3172                           ;Config register CONFIG2L @ 0x300002
  3173                           ;	Power-up Timer Enable bit
  3174                           ;	PWRT = OFF, PWRT disabled
  3175                           ;	Brown-out Reset Enable bits
  3176                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3177                           ;	Brown-out Reset Voltage bits
  3178                           ;	BORV = 3, Minimum setting 2.05V
  3179                           ;	USB Voltage Regulator Enable bit
  3180                           ;	VREGEN = OFF, USB voltage regulator disabled
  3181  300002                     	org	3145730
  3182  300002  19                 	db	25
  3183                           
  3184                           ;Config register CONFIG2H @ 0x300003
  3185                           ;	Watchdog Timer Enable bit
  3186                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3187                           ;	Watchdog Timer Postscale Select bits
  3188                           ;	WDTPS = 32768, 1:32768
  3189  300003                     	org	3145731
  3190  300003  1E                 	db	30
  3191                           
  3192                           ; Padding undefined space
  3193  300004                     	org	3145732
  3194  300004  FF                 	db	255
  3195                           
  3196                           ;Config register CONFIG3H @ 0x300005
  3197                           ;	CCP2 MUX bit
  3198                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3199                           ;	PORTB A/D Enable bit
  3200                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3201                           ;	Low-Power Timer 1 Oscillator Enable bit
  3202                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3203                           ;	MCLR Pin Enable bit
  3204                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3205  300005                     	org	3145733
  3206  300005  81                 	db	129
  3207                           
  3208                           ;Config register CONFIG4L @ 0x300006
  3209                           ;	Stack Full/Underflow Reset Enable bit
  3210                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3211                           ;	Single-Supply ICSP Enable bit
  3212                           ;	LVP = OFF, Single-Supply ICSP disabled
  3213                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3214                           ;	ICPRT = OFF, ICPORT disabled
  3215                           ;	Extended Instruction Set Enable bit
  3216                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3217                           ;	Background Debugger Enable bit
  3218                           ;	DEBUG = 0x1, unprogrammed default
  3219  300006                     	org	3145734
  3220  300006  81                 	db	129
  3221                           
  3222                           ; Padding undefined space
  3223  300007                     	org	3145735
  3224  300007  FF                 	db	255
  3225                           
  3226                           ;Config register CONFIG5L @ 0x300008
  3227                           ;	Code Protection bit
  3228                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3229                           ;	Code Protection bit
  3230                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3231                           ;	Code Protection bit
  3232                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3233                           ;	Code Protection bit
  3234                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3235  300008                     	org	3145736
  3236  300008  0F                 	db	15
  3237                           
  3238                           ;Config register CONFIG5H @ 0x300009
  3239                           ;	Boot Block Code Protection bit
  3240                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3241                           ;	Data EEPROM Code Protection bit
  3242                           ;	CPD = OFF, Data EEPROM is not code-protected
  3243  300009                     	org	3145737
  3244  300009  C0                 	db	192
  3245                           
  3246                           ;Config register CONFIG6L @ 0x30000A
  3247                           ;	Write Protection bit
  3248                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3249                           ;	Write Protection bit
  3250                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3251                           ;	Write Protection bit
  3252                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3253                           ;	Write Protection bit
  3254                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3255  30000A                     	org	3145738
  3256  30000A  0F                 	db	15
  3257                           
  3258                           ;Config register CONFIG6H @ 0x30000B
  3259                           ;	Configuration Register Write Protection bit
  3260                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3261                           ;	Boot Block Write Protection bit
  3262                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3263                           ;	Data EEPROM Write Protection bit
  3264                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3265  30000B                     	org	3145739
  3266  30000B  E0                 	db	224
  3267                           
  3268                           ;Config register CONFIG7L @ 0x30000C
  3269                           ;	Table Read Protection bit
  3270                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3271                           ;	Table Read Protection bit
  3272                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3273                           ;	Table Read Protection bit
  3274                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3275                           ;	Table Read Protection bit
  3276                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3277  30000C                     	org	3145740
  3278  30000C  0F                 	db	15
  3279                           
  3280                           ;Config register CONFIG7H @ 0x30000D
  3281                           ;	Boot Block Table Read Protection bit
  3282                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3283  30000D                     	org	3145741
  3284  30000D  40                 	db	64
  3285                           tosu	equ	0xFFF
  3286                           tosh	equ	0xFFE
  3287                           tosl	equ	0xFFD
  3288                           stkptr	equ	0xFFC
  3289                           pclatu	equ	0xFFB
  3290                           pclath	equ	0xFFA
  3291                           pcl	equ	0xFF9
  3292                           tblptru	equ	0xFF8
  3293                           tblptrh	equ	0xFF7
  3294                           tblptrl	equ	0xFF6
  3295                           tablat	equ	0xFF5
  3296                           prodh	equ	0xFF4
  3297                           prodl	equ	0xFF3
  3298                           indf0	equ	0xFEF
  3299                           postinc0	equ	0xFEE
  3300                           postdec0	equ	0xFED
  3301                           preinc0	equ	0xFEC
  3302                           plusw0	equ	0xFEB
  3303                           fsr0h	equ	0xFEA
  3304                           fsr0l	equ	0xFE9
  3305                           wreg	equ	0xFE8
  3306                           indf1	equ	0xFE7
  3307                           postinc1	equ	0xFE6
  3308                           postdec1	equ	0xFE5
  3309                           preinc1	equ	0xFE4
  3310                           plusw1	equ	0xFE3
  3311                           fsr1h	equ	0xFE2
  3312                           fsr1l	equ	0xFE1
  3313                           bsr	equ	0xFE0
  3314                           indf2	equ	0xFDF
  3315                           postinc2	equ	0xFDE
  3316                           postdec2	equ	0xFDD
  3317                           preinc2	equ	0xFDC
  3318                           plusw2	equ	0xFDB
  3319                           fsr2h	equ	0xFDA
  3320                           fsr2l	equ	0xFD9
  3321                           status	equ	0xFD8

Data Sizes:
    Strings     5
    Constant    0
    Data        2
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      94
    BANK0           160      8      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), buffer_rx(BANK0[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), buffer_rx(BANK0[10]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> buffer_tx(BANK0[10]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> buffer_tx(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S981_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> buffer_tx(BANK0[10]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> buffer_tx(BANK0[10]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> buffer_rx(BANK0[10]), 

    Uart_Read_String@Buf	PTR unsigned char  size(2) Largest target is 10
		 -> buffer_rx(BANK0[10]), 

    Uart_Send_String@info	PTR unsigned char  size(2) Largest target is 10
		 -> buffer_tx(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _atoi->_isspace
    _Uart_Send_String->_Uart_Send_Char
    _Uart_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    8252
                                             91 COMRAM     3     3      0
                          _Uart_Init
                   _Uart_Read_String
                   _Uart_Send_String
                               _atoi
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    5910
                                             85 COMRAM     6     0      6
                                              0 BANK0      8     8      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5559
                                             77 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    5206
                                             59 COMRAM    18    12      6
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    3835
                                             27 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2785
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               4     2      2     242
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _atoi                                                15    13      2    1122
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (2) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     357
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Uart_Send_String                                     2     0      2     143
                                              1 COMRAM     2     0      2
                     _Uart_Send_Char
 ---------------------------------------------------------------------------------
 (2) _Uart_Send_Char                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Uart_Read_String                                     9     5      4     332
                                              0 COMRAM     9     5      4
                          _Uart_Read
 ---------------------------------------------------------------------------------
 (2) _Uart_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Uart_Init                                           10     6      4     457
                                             13 COMRAM    10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Uart_Init
     ___lldiv
   _Uart_Read_String
     _Uart_Read
   _Uart_Send_String
     _Uart_Send_Char
   _atoi
     ___wmul
     _isdigit
     _isspace
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
             _fputs
               _fputc
             _strlen
   _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      8      46       5       43.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5E       1       98.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A4      20        0.0%
DATA                 0      0      A4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Sep 30 17:57:08 2021

                       l41 0D54                         l42 0DB0                         l73 128A  
                       l82 156E                         l91 1534                         l93 1542  
                       l94 1554                         l95 1558                         l79 155C  
                       l88 14DE        ___wmul@multiplicand 0003    __size_of_Uart_Send_Char 0016  
                      l101 12F6                        l117 1532                        l151 121C  
                      l144 120C                        l562 0F18                        l555 0EF8  
                      l572 0FE8                        l565 0FC8                        l822 1478  
                      l830 13FC                        l816 0D1C                        l920 1572  
                      l840 13AA                        l819 0D24                        l909 10B2  
                      l917 1440                        l926 14AE                        l870 1178  
                      l865 10FA                        l890 0B9A                        l875 0840  
                      l868 113C                        l885 0A08                        l877 0848  
                      l896 1350                        l897 1358                        u600 1440  
                      u601 143C                        u611 0E30                        u620 0E54  
                      u700 113C                        u621 0E50                        u701 1138  
                      u630 0E7E                        u550 0FFC                        u710 114C  
                      u631 0E7A                        u551 0FF8                        u711 1148  
                      u640 0EBE                        u560 100E                        u720 0818  
                      u800 0A76                        u641 0EBA                        u561 100A  
                      u721 0814                        u801 0A72                        u650 0F38  
                      u570 1036                        u730 0834                        u810 0B1C  
                      u651 0F34                        u571 1032                        u731 0830  
                      u811 0B18                        u820 156A                        u900 1472  
                      u660 0F62                        u580 106C                        u740 097E  
                      u821 1566                        u901 146C                        u661 0F5E  
                      u581 1068                        u741 097A                        u830 1542  
                      u910 1474                        u670 0F90                        u590 14A2  
                      u750 099C                        u831 153E                        u671 0F8C  
                      u591 149E                        u751 0998                        u840 1550  
                      u680 10C4                        u760 09B6                        u920 1350  
                      u841 154C                        u681 10C0                        u761 09B2  
                      u921 134C                        u850 11A0                        u690 10E6  
                      u770 09D0                        u851 119C                        u691 10E2  
                      u771 09CC                        u860 11C2                        u940 14DE  
                      u780 09E0                        u861 11BE                        u941 14DA  
                      u781 09DC                        u870 11EA                        u950 12C4  
                      u790 0A2E                        u871 11E6                        u935 1252  
                      u951 12C0                        u791 0A2A                        u960 12DA  
                      u880 13C4                        u961 12D6                        u881 13C0  
                      u890 13F2                        u970 0BD2                        u891 13EE  
                      u971 0BCE                        u980 0C06                        u981 0C02  
                      u990 0C22                        u991 0C1E                        _pad 10B4  
                      wreg 000FE8                main@dato_rx 005E                       l1400 10C4  
                     l1330 0FFC                       l1410 111A                       l1402 10D8  
                     l1500 1534                       l1332 100E                       l1412 111E  
                     l1404 10E6                       l1420 0808                       l1502 1550  
                     l1510 152A                       l1334 1018                       l1342 147A  
                     l1414 114C                       l1406 10F2                       l1430 0878  
                     l1422 0818                       l1520 11A8                       l1504 1556  
                     l1600 12AE                       l1360 0E2A                       l1336 1036  
                     l1328 0FEA                       l1352 13FE                       l1344 1486  
                     l1416 1160                       l1408 1106                       l1440 0908  
                     l1432 0880                       l1424 081A                       l1530 11FA  
                     l1522 11B4                       l1514 117A                       l1610 0B9C  
                     l1370 0E7E                       l1362 0E36                       l1338 106C  
                     l1354 140A                       l1346 148A                       l1450 09D0  
                     l1434 0886                       l1442 096C                       l1426 0834  
                     l1532 11FC                       l1524 11C2                       l1516 118A  
                     l1604 12C8                       l1508 150E                       l1540 13C4  
                     l1620 0C06                       l1612 0BB0                       l1380 0EF2  
                     l1372 0E90                       l1364 0E54                       l1356 141C  
                     l1348 14A2                       l1444 097E                       l1452 09E0  
                     l1436 08FC                       l1428 0870                       l1460 0A3C  
                     l1534 1206                       l1526 11CC                       l1518 11A0  
                     l1606 12DA                       l1542 13F2                       l1630 0C2E  
                     l1622 0C0A                       l1614 0BB4                       l1374 0EBE  
                     l1366 0E5C                       l1390 0F62                       l1382 0F1A  
                     l1358 1420                       l1446 099C                       l1438 0902  
                     l1462 0A4E                       l1528 11EA                       l1560 121E  
                     l1608 12F6                       l1544 13F6                       l1536 13AC  
                     l1632 0C36                       l1616 0BB8                       l1376 0EDE  
                     l1368 0E70                       l1392 0F90                       l1384 0F38  
                     l1448 09B6                       l1472 0AF8                       l1464 0A52  
                     l1456 0A0A                       l1552 12F8                       l1570 1286  
                     l1562 1222                       l1538 13B0                       l1642 0CDC  
                     l1634 0C68                       l1730 0C52                       l1626 0C10  
                     l1618 0BD2                       l1378 0EE0                       l1394 0FB0  
                     l1386 0F40                       l1490 0B88                       l1474 0B1C  
                     l1482 0B4A                       l1466 0A76                       l1458 0A2E  
                     l1554 1300                       l1564 122E                       l1548 1442  
                     l1644 0CEE                       l1628 0C26                       l1396 0FC2  
                     l1388 0F54                       l1484 0B58                       l1476 0B2A  
                     l1468 0AC0                       l1556 130E                       l1580 1398  
                     l1572 135A                       l1660 0D30                       l1652 0D26  
                     l1566 1230                       l1590 14C6                       l1646 0D00  
                     l1638 0CA0                       l1398 10B4                       l1478 0B3E  
                     l1558 1334                       l1574 136C                       l1670 0D56  
                     l1662 0D32                       l1654 0D2A                       l1568 1282  
                     l1592 128C                       l1496 155C                       l1584 14B0  
                     l1488 0B64                       l1576 1374                       l1672 0D5C  
                     l1680 0D9C                       l1664 0D38                       l1656 0D2C  
                     l1594 1294                       l1498 156A                       l1586 14B4  
                     l1578 137C                       l1690 0E08                       l1682 0DB2  
                     l1674 0D76                       l1666 0D3A                       l1658 0D2E  
                     l1596 129A                       l1588 14C2                       l1684 0DE4  
                     l1692 0E12                       l1676 0D82                       l1668 0D3C  
                     l1598 12AA                       l1686 0DF4                       l1678 0D92  
                     l1688 0DF8                       ?_pad 0011                       STR_1 0801  
                     u1000 0CD6                       u1001 0CD0                       u1010 0CD8  
                     u1020 0CEE                       u1021 0CEA                       u1030 0D00  
                     u1031 0CFC                       u1040 0DB0                       u1041 0DAC  
                     u1050 0DE4                       u1107 0E18                       u1051 0DE0  
                     u1087 0D88                       _LATD 000F8C                       u1097 0DFE  
 __end_of_Uart_Read_String 12F8                       _dbuf 0068                       _atoi 0B9C  
                     _main 0D26                       _prec 0064                       _nout 0060  
                     pad@i 0018                       pad@p 0015                       fsr1h 000FE2  
                     fsr2h 000FDA                       indf2 000FDF                       fsr1l 000FE1  
                     pad@w 001A                       fsr2l 000FD9                       _utoa 0808  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
             ___param_bank 000000                      ??_pad 0017                      ?_atoi 0008  
                    ?_main 0001            __end_of___lldiv 121E                      ?_utoa 001C  
          __end_of___lodiv 0F1A            __end_of___lomod 0FEA                      _RCREG 000FAE  
                    _RCSTA 000FAB      Uart_Read_String@s_buf 0003               vfpfcnvrt@fmt 003E  
             vfpfcnvrt@llu 0046                      _SPBRG 000FAF                      _PORTB 000F81  
                    _TRISB 000F93                      _TXREG 000FAD                      _TXSTA 000FAC  
                    _flags 0066                      _fputc 0FEA                      _fputs 13FE  
          __end_of_isdigit 147A                      atoi@n 0015                      pad@fp 0011  
                    atoi@s 0008                      _width 0062                      _putch 1572  
          __end_of_isspace 13FE                      tablat 000FF5   __end_of_Uart_Send_String 14E0  
                    utoa@d 001E                      utoa@i 003A                      utoa@n 0032  
                    utoa@p 002E                      utoa@w 0030                      status 000FD8  
          __end_of_sprintf 13AC           ___lodiv@dividend 0001            __initialization 14E0  
             __end_of_atoi 0D26               __end_of_main 0E2A               __end_of_utoa 0A0A  
                   ??_atoi 000A                     ??_main 005C                     ??_utoa 0026  
            __activetblptr 000002           ___lodiv@quotient 0011                     ?_fputc 0001  
                   ?_fputs 000A                     ?_putch 0001                     _SPBRGH 000FB0  
             vfprintf@cfmt 0054                     ___wmul 150E                  ??___lldiv 0009  
                ??___lodiv 0011                  ??___lomod 0011                     clear_0 14FE  
                   isa$std 000001             _Uart_Send_Char 155A                     pad@buf 0013  
       __size_of_Uart_Init 006E         __size_of_Uart_Read 0026                     _strlen 147A  
                   fputc@c 0001                     fputs@c 000E                     fputs@i 000F  
                   fputs@s 000A                  ??_isdigit 0003               __mediumconst 0000  
                ??_isspace 0003                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                     putch@c 0001           __end_of_vfprintf 135A  
                   utoa@fp 001C                  ??_sprintf 005C                 __accesstop 0060  
  __end_of__initialization 1504              ___rparam_used 000001             __pcstackCOMRAM 0001  
      Uart_Read_String@Buf 0001               __pidataBANK0 1570     __end_of_Uart_Send_Char 1570  
            __end_of_fputc 10B4              __end_of_fputs 1442              __end_of_putch 1574  
                  ??_fputc 0005                    ??_fputs 000E                    ??_putch 0001  
               __pbssBANK0 0060          ?_Uart_Read_String 0001          __end_of_Uart_Init 128C  
        __end_of_Uart_Read 155A         ??_Uart_Read_String 0005                    ?___wmul 0001  
          ?_Uart_Send_Char 0001                    _BAUDCON 000FB8                    ?_strlen 0001  
       __size_of_vfpfcnvrt 0192                Uart_Init@vx 0016           ___lomod@dividend 0001  
        ?_Uart_Send_String 0002       Uart_Send_Char@txData 0001         ??_Uart_Send_String 0004  
                  __Hparam 0000                    __Lparam 0000                    ___lldiv 117A  
          __size_of___wmul 0026                    ___lodiv 0E2A                    ___lomod 0F1A  
                ?_vfprintf 004E               __psmallconst 0800                    __pcinit 14E0  
                  __ramtop 0800                    __ptext0 0D26                    __ptext1 135A  
                  __ptext2 12F8                    __ptext3 0A0A                    __ptext4 0808  
                  __ptext5 10B4                    __ptext6 147A                    __ptext7 13FE  
                  __ptext8 0FEA                    __ptext9 1572            __size_of_strlen 0036  
             __size_of_pad 00C6                    _isdigit 1442                    _isspace 13AC  
                  atoi@neg 000E                    _sprintf 135A       end_of_initialization 1504  
                  fputc@fp 0003              __Lmediumconst 0000                    fputs@fp 000C  
          ___lldiv@divisor 0005              Uart_Init@baud 000E            ___lldiv@counter 000D  
        __end_of_vfpfcnvrt 0B9C                  _RCSTAbits 000FAB                    postdec2 000FDD  
                  postinc0 000FEE                    postinc1 000FE6                    postinc2 000FDE  
               ??_vfprintf 0054                    strlen@a 0003                    strlen@s 0001  
                _TRISCbits 000F94                  _TRISDbits 000F95                  _TXSTAbits 000FAC  
               main@v_dato 005D                vfpfcnvrt@ap 0040                vfpfcnvrt@fp 003C  
           __end_of___wmul 1534                _BAUDCONbits 000FB8             __end_of_strlen 14B0  
      start_initialization 14E0            ___lodiv@divisor 0009            ___lodiv@counter 0019  
        Uart_Read_String@c 0007                __end_of_pad 117A           ??_Uart_Send_Char 0001  
                _Uart_Init 121E                  _Uart_Read 1534                vfprintf@fmt 0050  
                 ??___wmul 0005                __pdataBANK0 00A4  __size_of_Uart_Read_String 006C  
                 ??_strlen 0003              __pcstackBANK0 009C                 ?_Uart_Init 000E  
               ?_Uart_Read 0001                   ?___lldiv 0001                   ?___lodiv 0001  
                 ?___lomod 0001                  _buffer_rx 0092                  _buffer_tx 0088  
__size_of_Uart_Send_String 0030          __size_of_vfprintf 0062            ___lomod@divisor 0009  
              __smallconst 0800            ___lomod@counter 0011                   ?_isdigit 0001  
                 ?_isspace 0001                   ?_sprintf 0056             __size_of_fputc 00CA  
           __size_of_fputs 0044             __size_of_putch 0002             ___wmul@product 0005  
                 _LATCbits 000F8B   Uart_Read_String@cont_buf 0008                   _PIR1bits 000F9E  
                _vfpfcnvrt 0A0A                 _ADCON1bits 000FC1          ___wmul@multiplier 0001  
                 __Hrparam 0000                ??_Uart_Init 0012                ??_Uart_Read 0001  
               vfprintf@ap 0052                   __Lrparam 0000                 vfprintf@fp 004E  
         _Uart_Read_String 128C           __size_of___lldiv 00A4           __size_of___lodiv 00F0  
         __size_of___lomod 00D0                 ?_vfpfcnvrt 003C                 sprintf@fmt 0058  
                 _atoi$960 0014                   _atoi$961 0012                   _atoi$959 0010  
         __size_of_isdigit 0038                   _bit_flag 00A4           __size_of_isspace 0052  
                 __ptext10 0F1A                   __ptext11 0E2A                   __ptext20 121E  
                 __ptext12 0B9C                   __ptext21 117A                   __ptext13 13AC  
                 __ptext14 1442                   __ptext15 150E                   __ptext16 14B0  
                 __ptext17 155A                   __ptext18 128C                   __ptext19 1534  
         __size_of_sprintf 0052       Uart_Send_String@info 0002              __size_of_atoi 018A  
            __size_of_main 0104              __size_of_utoa 0202                   isa$xinst 000000  
                 _vfprintf 12F8           _Uart_Send_String 14B0                _isspace$977 0007  
                 isdigit@c 0001                  sprintf@ap 009C                   isspace@c 0001  
         ___lldiv@dividend 0001                ??_vfpfcnvrt 0042                   sprintf@f 009E  
                 sprintf@s 0056           ___lldiv@quotient 0009  
