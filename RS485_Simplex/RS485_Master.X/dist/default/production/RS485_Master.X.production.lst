

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Sep 30 17:52:47 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35  0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4550 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     _ADRES	set	4035
    71  0000                     _RCREG	set	4014
    72  0000                     _RCSTAbits	set	4011
    73  0000                     _TXREG	set	4013
    74  0000                     _TXSTAbits	set	4012
    75  0000                     _PIR1bits	set	3998
    76  0000                     _SPBRGH	set	4016
    77  0000                     _SPBRG	set	4015
    78  0000                     _BAUDCONbits	set	4024
    79  0000                     _BAUDCON	set	4024
    80  0000                     _RCSTA	set	4011
    81  0000                     _TXSTA	set	4012
    82  0000                     _TRISCbits	set	3988
    83  0000                     _ADCON0bits	set	4034
    84  0000                     _ADCON2	set	4032
    85  0000                     _ADCON0	set	4034
    86  0000                     _ADCON1	set	4033
    87  0000                     _PORTBbits	set	3969
    88  0000                     _TRISBbits	set	3987
    89                           
    90                           	psect	smallconst
    91  000800                     __psmallconst:
    92                           	callstack 0
    93  000800  00                 	db	0
    94  000801                     STR_1:
    95  000801  49                 	db	73	;'I'
    96  000802  25                 	db	37
    97  000803  75                 	db	117	;'u'
    98  000804  25                 	db	37
    99  000805  75                 	db	117	;'u'
   100  000806  4E                 	db	78	;'N'
   101  000807  25                 	db	37
   102  000808  75                 	db	117	;'u'
   103  000809  46                 	db	70	;'F'
   104  00080A  0D                 	db	13
   105  00080B  0A                 	db	10
   106  00080C  00                 	db	0
   107  00080D  00                 	db	0	; dummy byte at the end
   108  0000                     
   109                           ; #config settings
   110                           
   111                           	psect	cinit
   112  00149A                     __pcinit:
   113                           	callstack 0
   114  00149A                     start_initialization:
   115                           	callstack 0
   116  00149A                     __initialization:
   117                           	callstack 0
   118                           
   119                           ; Clear objects allocated to BANK0 (54 bytes)
   120  00149A  EE00  F060         	lfsr	0,__pbssBANK0
   121  00149E  0E36               	movlw	54
   122  0014A0                     clear_0:
   123  0014A0  6AEE               	clrf	postinc0,c
   124  0014A2  06E8               	decf	wreg,f,c
   125  0014A4  E1FD               	bnz	clear_0
   126  0014A6                     end_of_initialization:
   127                           	callstack 0
   128  0014A6                     __end_of__initialization:
   129                           	callstack 0
   130  0014A6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   131  0014A8  6EF8               	movwf	tblptru,c
   132  0014AA  0E08               	movlw	high __Lsmallconst
   133  0014AC  6EF7               	movwf	tblptrh,c
   134  0014AE  0100               	movlb	0
   135  0014B0  EF57  F006         	goto	_main	;jump to C main() function
   136                           
   137                           	psect	bssBANK0
   138  000060                     __pbssBANK0:
   139                           	callstack 0
   140  000060                     _nout:
   141                           	callstack 0
   142  000060                     	ds	2
   143  000062                     _width:
   144                           	callstack 0
   145  000062                     	ds	2
   146  000064                     _prec:
   147                           	callstack 0
   148  000064                     	ds	2
   149  000066                     _flags:
   150                           	callstack 0
   151  000066                     	ds	2
   152  000068                     _dbuf:
   153                           	callstack 0
   154  000068                     	ds	32
   155  000088                     _buffer_tx:
   156                           	callstack 0
   157  000088                     	ds	14
   158                           
   159                           	psect	cstackBANK0
   160  000096                     __pcstackBANK0:
   161                           	callstack 0
   162  000096                     sprintf@ap:
   163                           	callstack 0
   164                           
   165                           ; 2 bytes @ 0x0
   166  000096                     	ds	2
   167  000098                     sprintf@f:
   168                           	callstack 0
   169                           
   170                           ; 6 bytes @ 0x2
   171  000098                     	ds	6
   172  00009E                     ??_main:
   173                           
   174                           ; 1 bytes @ 0x8
   175  00009E                     	ds	1
   176  00009F                     main@b1:
   177                           	callstack 0
   178                           
   179                           ; 2 bytes @ 0x9
   180  00009F                     	ds	2
   181  0000A1                     main@b2:
   182                           	callstack 0
   183                           
   184                           ; 2 bytes @ 0xB
   185  0000A1                     	ds	2
   186  0000A3                     main@pwm:
   187                           	callstack 0
   188                           
   189                           ; 1 bytes @ 0xD
   190  0000A3                     	ds	1
   191                           
   192                           	psect	cstackCOMRAM
   193  000001                     __pcstackCOMRAM:
   194                           	callstack 0
   195  000001                     ?_ADC_Read:
   196                           	callstack 0
   197  000001                     ?_strlen:
   198                           	callstack 0
   199  000001                     ?___lmul:
   200                           	callstack 0
   201  000001                     ?___lldiv:
   202                           	callstack 0
   203  000001                     ?___lodiv:
   204                           	callstack 0
   205  000001                     ?___lomod:
   206                           	callstack 0
   207  000001                     ADC_Init@p_ang:
   208                           	callstack 0
   209  000001                     Uart_Send_Char@txData:
   210                           	callstack 0
   211  000001                     fputc@c:
   212                           	callstack 0
   213  000001                     strlen@s:
   214                           	callstack 0
   215  000001                     ___lmul@multiplier:
   216                           	callstack 0
   217  000001                     ___lldiv@dividend:
   218                           	callstack 0
   219  000001                     ___lodiv@dividend:
   220                           	callstack 0
   221  000001                     ___lomod@dividend:
   222                           	callstack 0
   223                           
   224                           ; 8 bytes @ 0x0
   225  000001                     	ds	1
   226  000002                     Uart_Send_String@info:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0x1
   230  000002                     	ds	1
   231  000003                     ADC_Read@ch:
   232                           	callstack 0
   233  000003                     fputc@fp:
   234                           	callstack 0
   235  000003                     strlen@a:
   236                           	callstack 0
   237                           
   238                           ; 2 bytes @ 0x2
   239  000003                     	ds	1
   240  000004                     
   241                           ; 1 bytes @ 0x3
   242  000004                     	ds	1
   243  000005                     ??_fputc:
   244  000005                     ___lmul@multiplicand:
   245                           	callstack 0
   246  000005                     ___lldiv@divisor:
   247                           	callstack 0
   248                           
   249                           ; 4 bytes @ 0x4
   250  000005                     	ds	4
   251  000009                     ___lmul@product:
   252                           	callstack 0
   253  000009                     ___lldiv@quotient:
   254                           	callstack 0
   255  000009                     ___lodiv@divisor:
   256                           	callstack 0
   257  000009                     ___lomod@divisor:
   258                           	callstack 0
   259                           
   260                           ; 8 bytes @ 0x8
   261  000009                     	ds	1
   262  00000A                     fputs@s:
   263                           	callstack 0
   264                           
   265                           ; 2 bytes @ 0x9
   266  00000A                     	ds	2
   267  00000C                     fputs@fp:
   268                           	callstack 0
   269                           
   270                           ; 2 bytes @ 0xB
   271  00000C                     	ds	1
   272  00000D                     ?___aldiv:
   273                           	callstack 0
   274  00000D                     ___lldiv@counter:
   275                           	callstack 0
   276  00000D                     ___aldiv@dividend:
   277                           	callstack 0
   278                           
   279                           ; 4 bytes @ 0xC
   280  00000D                     	ds	1
   281  00000E                     fputs@c:
   282                           	callstack 0
   283  00000E                     Uart_Init@baud:
   284                           	callstack 0
   285                           
   286                           ; 4 bytes @ 0xD
   287  00000E                     	ds	1
   288  00000F                     fputs@i:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0xE
   292  00000F                     	ds	2
   293  000011                     ?_pad:
   294                           	callstack 0
   295  000011                     ___lomod@counter:
   296                           	callstack 0
   297  000011                     pad@fp:
   298                           	callstack 0
   299  000011                     ___aldiv@divisor:
   300                           	callstack 0
   301  000011                     ___lodiv@quotient:
   302                           	callstack 0
   303                           
   304                           ; 8 bytes @ 0x10
   305  000011                     	ds	1
   306  000012                     ??_Uart_Init:
   307                           
   308                           ; 1 bytes @ 0x11
   309  000012                     	ds	1
   310  000013                     pad@buf:
   311                           	callstack 0
   312                           
   313                           ; 2 bytes @ 0x12
   314  000013                     	ds	2
   315  000015                     ___aldiv@counter:
   316                           	callstack 0
   317  000015                     pad@p:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0x14
   321  000015                     	ds	1
   322  000016                     ___aldiv@sign:
   323                           	callstack 0
   324  000016                     Uart_Init@vx:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0x15
   328  000016                     	ds	1
   329  000017                     ??_pad:
   330  000017                     ___aldiv@quotient:
   331                           	callstack 0
   332                           
   333                           ; 4 bytes @ 0x16
   334  000017                     	ds	1
   335  000018                     pad@i:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x17
   339  000018                     	ds	1
   340  000019                     ___lodiv@counter:
   341                           	callstack 0
   342                           
   343                           ; 1 bytes @ 0x18
   344  000019                     	ds	1
   345  00001A                     pad@w:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0x19
   349  00001A                     	ds	1
   350  00001B                     ?_map:
   351                           	callstack 0
   352  00001B                     map@x:
   353                           	callstack 0
   354                           
   355                           ; 4 bytes @ 0x1A
   356  00001B                     	ds	1
   357  00001C                     ?_utoa:
   358                           	callstack 0
   359  00001C                     utoa@fp:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x1B
   363  00001C                     	ds	2
   364  00001E                     utoa@d:
   365                           	callstack 0
   366                           
   367                           ; 8 bytes @ 0x1D
   368  00001E                     	ds	1
   369  00001F                     map@eMin:
   370                           	callstack 0
   371                           
   372                           ; 4 bytes @ 0x1E
   373  00001F                     	ds	4
   374  000023                     map@eMax:
   375                           	callstack 0
   376                           
   377                           ; 4 bytes @ 0x22
   378  000023                     	ds	3
   379  000026                     ??_utoa:
   380                           
   381                           ; 1 bytes @ 0x25
   382  000026                     	ds	1
   383  000027                     map@sMin:
   384                           	callstack 0
   385                           
   386                           ; 4 bytes @ 0x26
   387  000027                     	ds	4
   388  00002B                     map@sMax:
   389                           	callstack 0
   390                           
   391                           ; 4 bytes @ 0x2A
   392  00002B                     	ds	3
   393  00002E                     utoa@p:
   394                           	callstack 0
   395                           
   396                           ; 2 bytes @ 0x2D
   397  00002E                     	ds	1
   398  00002F                     
   399                           ; 1 bytes @ 0x2E
   400  00002F                     	ds	1
   401  000030                     utoa@w:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x2F
   405  000030                     	ds	2
   406  000032                     utoa@n:
   407                           	callstack 0
   408                           
   409                           ; 8 bytes @ 0x31
   410  000032                     	ds	8
   411  00003A                     utoa@i:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x39
   415  00003A                     	ds	2
   416  00003C                     ?_vfpfcnvrt:
   417                           	callstack 0
   418  00003C                     vfpfcnvrt@fp:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x3B
   422  00003C                     	ds	2
   423  00003E                     vfpfcnvrt@fmt:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x3D
   427  00003E                     	ds	2
   428  000040                     vfpfcnvrt@ap:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x3F
   432  000040                     	ds	2
   433  000042                     ??_vfpfcnvrt:
   434                           
   435                           ; 1 bytes @ 0x41
   436  000042                     	ds	4
   437  000046                     vfpfcnvrt@llu:
   438                           	callstack 0
   439                           
   440                           ; 8 bytes @ 0x45
   441  000046                     	ds	8
   442  00004E                     ?_vfprintf:
   443                           	callstack 0
   444  00004E                     vfprintf@fp:
   445                           	callstack 0
   446                           
   447                           ; 2 bytes @ 0x4D
   448  00004E                     	ds	2
   449  000050                     vfprintf@fmt:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x4F
   453  000050                     	ds	2
   454  000052                     vfprintf@ap:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x51
   458  000052                     	ds	2
   459  000054                     vfprintf@cfmt:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0x53
   463  000054                     	ds	2
   464  000056                     ?_sprintf:
   465                           	callstack 0
   466  000056                     sprintf@s:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x55
   470  000056                     	ds	2
   471  000058                     sprintf@fmt:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0x57
   475  000058                     	ds	8
   476  000060                     
   477                           ; 1 bytes @ 0x5F
   478 ;;
   479 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   480 ;;
   481 ;; *************** function _main *****************
   482 ;; Defined at:
   483 ;;		line 25 in file "RS485_Master.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;  b2              2   11[BANK0 ] short 
   488 ;;  b1              2    9[BANK0 ] short 
   489 ;;  pwm             1   13[BANK0 ] unsigned char 
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   499 ;;      Params:         0       0       0       0       0       0       0       0       0
   500 ;;      Locals:         0       5       0       0       0       0       0       0       0
   501 ;;      Temps:          0       1       0       0       0       0       0       0       0
   502 ;;      Totals:         0       6       0       0       0       0       0       0       0
   503 ;;Total ram usage:        6 bytes
   504 ;; Hardware stack levels required when called: 8
   505 ;; This function calls:
   506 ;;		_ADC_Init
   507 ;;		_ADC_Read
   508 ;;		_Uart_Init
   509 ;;		_Uart_Send_String
   510 ;;		_map
   511 ;;		_sprintf
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text0
   518  000CAE                     __ptext0:
   519                           	callstack 0
   520  000CAE                     _main:
   521                           	callstack 23
   522  000CAE                     
   523                           ;RS485_Master.c: 27:     ADC_Init(0x0E);
   524  000CAE  0E0E               	movlw	14
   525  000CB0  EC65  F00A         	call	_ADC_Init
   526  000CB4                     
   527                           ;RS485_Master.c: 28:     TRISBbits.RB0 = 1;
   528  000CB4  8093               	bsf	147,0,c	;volatile
   529  000CB6                     
   530                           ;RS485_Master.c: 29:     TRISBbits.RB1 = 1;
   531  000CB6  8293               	bsf	147,1,c	;volatile
   532  000CB8                     
   533                           ;RS485_Master.c: 30:     Uart_Init(9600);
   534  000CB8  0E80               	movlw	128
   535  000CBA  6E0E               	movwf	Uart_Init@baud^0,c
   536  000CBC  0E25               	movlw	37
   537  000CBE  6E0F               	movwf	(Uart_Init@baud+1)^0,c
   538  000CC0  0E00               	movlw	0
   539  000CC2  6E10               	movwf	(Uart_Init@baud+2)^0,c
   540  000CC4  0E00               	movlw	0
   541  000CC6  6E11               	movwf	(Uart_Init@baud+3)^0,c
   542  000CC8  EC0F  F009         	call	_Uart_Init	;wreg free
   543  000CCC                     l1595:
   544                           
   545                           ;RS485_Master.c: 33:     {;RS485_Master.c: 34:         short b1 = PORTBbits.RB0;
   546  000CCC  B081               	btfsc	129,0,c	;volatile
   547  000CCE  EF6B  F006         	goto	u981
   548  000CD2  EF70  F006         	goto	u980
   549  000CD6                     u981:
   550  000CD6  0100               	movlb	0	; () banked
   551  000CD8  6B9E               	clrf	??_main& (0+255),b
   552  000CDA  2B9E               	incf	??_main& (0+255),f,b
   553  000CDC  EF72  F006         	goto	u988
   554  000CE0                     u980:
   555  000CE0  0100               	movlb	0	; () banked
   556  000CE2  6B9E               	clrf	??_main& (0+255),b
   557  000CE4                     u988:
   558  000CE4  519E               	movf	??_main& (0+255),w,b
   559  000CE6  6F9F               	movwf	main@b1& (0+255),b
   560  000CE8  6BA0               	clrf	(main@b1+1)& (0+255),b
   561  000CEA                     
   562                           ; BSR set to: 0
   563                           ;RS485_Master.c: 35:         short b2 = PORTBbits.RB1;
   564  000CEA  B281               	btfsc	129,1,c	;volatile
   565  000CEC  EF7A  F006         	goto	u991
   566  000CF0  EF7E  F006         	goto	u990
   567  000CF4                     u991:
   568  000CF4  6B9E               	clrf	??_main& (0+255),b
   569  000CF6  2B9E               	incf	??_main& (0+255),f,b
   570  000CF8  EF80  F006         	goto	u998
   571  000CFC                     u990:
   572  000CFC  0100               	movlb	0	; () banked
   573  000CFE  6B9E               	clrf	??_main& (0+255),b
   574  000D00                     u998:
   575  000D00  519E               	movf	??_main& (0+255),w,b
   576  000D02  6FA1               	movwf	main@b2& (0+255),b
   577  000D04  6BA2               	clrf	(main@b2+1)& (0+255),b
   578  000D06                     
   579                           ; BSR set to: 0
   580                           ;RS485_Master.c: 36:         unsigned char pwm = map(ADC_Read(0), 0, 1023, 0, 250);
   581  000D06  0E00               	movlw	0
   582  000D08  ECD5  F009         	call	_ADC_Read
   583  000D0C  C001  F01B         	movff	?_ADC_Read,map@x
   584  000D10  C002  F01C         	movff	?_ADC_Read+1,map@x+1
   585  000D14  6A1D               	clrf	(map@x+2)^0,c
   586  000D16  6A1E               	clrf	(map@x+3)^0,c
   587  000D18  0E00               	movlw	0
   588  000D1A  6E1F               	movwf	map@eMin^0,c
   589  000D1C  0E00               	movlw	0
   590  000D1E  6E20               	movwf	(map@eMin+1)^0,c
   591  000D20  0E00               	movlw	0
   592  000D22  6E21               	movwf	(map@eMin+2)^0,c
   593  000D24  0E00               	movlw	0
   594  000D26  6E22               	movwf	(map@eMin+3)^0,c
   595  000D28  0EFF               	movlw	255
   596  000D2A  6E23               	movwf	map@eMax^0,c
   597  000D2C  0E03               	movlw	3
   598  000D2E  6E24               	movwf	(map@eMax+1)^0,c
   599  000D30  0E00               	movlw	0
   600  000D32  6E25               	movwf	(map@eMax+2)^0,c
   601  000D34  0E00               	movlw	0
   602  000D36  6E26               	movwf	(map@eMax+3)^0,c
   603  000D38  0E00               	movlw	0
   604  000D3A  6E27               	movwf	map@sMin^0,c
   605  000D3C  0E00               	movlw	0
   606  000D3E  6E28               	movwf	(map@sMin+1)^0,c
   607  000D40  0E00               	movlw	0
   608  000D42  6E29               	movwf	(map@sMin+2)^0,c
   609  000D44  0E00               	movlw	0
   610  000D46  6E2A               	movwf	(map@sMin+3)^0,c
   611  000D48  0EFA               	movlw	250
   612  000D4A  6E2B               	movwf	map@sMax^0,c
   613  000D4C  0E00               	movlw	0
   614  000D4E  6E2C               	movwf	(map@sMax+1)^0,c
   615  000D50  0E00               	movlw	0
   616  000D52  6E2D               	movwf	(map@sMax+2)^0,c
   617  000D54  0E00               	movlw	0
   618  000D56  6E2E               	movwf	(map@sMax+3)^0,c
   619  000D58  ECD2  F008         	call	_map	;wreg free
   620  000D5C  501B               	movf	?_map^0,w,c
   621  000D5E  0100               	movlb	0	; () banked
   622  000D60  6FA3               	movwf	main@pwm& (0+255),b
   623  000D62                     
   624                           ; BSR set to: 0
   625                           ;RS485_Master.c: 37:         sprintf(buffer_tx, "I%u%uN%uF\r\n", b1, b2, pwm);
   626  000D62  0E88               	movlw	low _buffer_tx
   627  000D64  6E56               	movwf	sprintf@s^0,c
   628  000D66  0E00               	movlw	high _buffer_tx
   629  000D68  6E57               	movwf	(sprintf@s+1)^0,c
   630  000D6A  0E01               	movlw	low STR_1
   631  000D6C  6E58               	movwf	sprintf@fmt^0,c
   632  000D6E  0E08               	movlw	high STR_1
   633  000D70  6E59               	movwf	(sprintf@fmt+1)^0,c
   634  000D72  C09F  F05A         	movff	main@b1,?_sprintf+4
   635  000D76  C0A0  F05B         	movff	main@b1+1,?_sprintf+5
   636  000D7A  C0A1  F05C         	movff	main@b2,?_sprintf+6
   637  000D7E  C0A2  F05D         	movff	main@b2+1,?_sprintf+7
   638  000D82  C0A3  F05E         	movff	main@pwm,?_sprintf+8
   639  000D86  6A5F               	clrf	(?_sprintf+9)^0,c
   640  000D88  ECAC  F009         	call	_sprintf	;wreg free
   641  000D8C                     
   642                           ;RS485_Master.c: 38:         Uart_Send_String(buffer_tx);
   643  000D8C  0E88               	movlw	low _buffer_tx
   644  000D8E  6E02               	movwf	Uart_Send_String@info^0,c
   645  000D90  0E00               	movlw	high _buffer_tx
   646  000D92  6E03               	movwf	(Uart_Send_String@info+1)^0,c
   647  000D94  EC35  F00A         	call	_Uart_Send_String	;wreg free
   648  000D98                     
   649                           ;RS485_Master.c: 39:         _delay((unsigned long)((10)*(48000000/4000.0)));
   650  000D98  0E9C               	movlw	156
   651  000D9A  0100               	movlb	0	; () banked
   652  000D9C  6F9E               	movwf	??_main& (0+255),b
   653  000D9E  0ED7               	movlw	215
   654  000DA0                     u1007:
   655  000DA0  2EE8               	decfsz	wreg,f,c
   656  000DA2  D7FE               	bra	u1007
   657  000DA4  2F9E               	decfsz	??_main& (0+255),f,b
   658  000DA6  D7FC               	bra	u1007
   659  000DA8  EF66  F006         	goto	l1595
   660  000DAC  EF00  F000         	goto	start
   661  000DB0                     __end_of_main:
   662                           	callstack 0
   663                           
   664 ;; *************** function _sprintf *****************
   665 ;; Defined at:
   666 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;  s               2   85[COMRAM] PTR unsigned char 
   669 ;;		 -> buffer_tx(14), 
   670 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   671 ;;		 -> STR_1(12), 
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  f               6    2[BANK0 ] struct _IO_FILE
   674 ;;  ap              2    0[BANK0 ] PTR void [1]
   675 ;;		 -> ?_sprintf(2), 
   676 ;;  ret             2    0        int 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  2   85[COMRAM] int 
   679 ;; Registers used:
   680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   686 ;;      Params:        10       0       0       0       0       0       0       0       0
   687 ;;      Locals:         0       8       0       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0       0       0
   689 ;;      Totals:        10       8       0       0       0       0       0       0       0
   690 ;;Total ram usage:       18 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 7
   693 ;; This function calls:
   694 ;;		_vfprintf
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text1
   701  001358                     __ptext1:
   702                           	callstack 0
   703  001358                     _sprintf:
   704                           	callstack 23
   705  001358  0E5A               	movlw	low (?_sprintf+4)
   706  00135A  0100               	movlb	0	; () banked
   707  00135C  6F96               	movwf	sprintf@ap& (0+255),b
   708  00135E  0E00               	movlw	high (?_sprintf+4)
   709  001360  6F97               	movwf	(sprintf@ap+1)& (0+255),b
   710  001362  C056  F098         	movff	sprintf@s,sprintf@f
   711  001366  C057  F099         	movff	sprintf@s+1,sprintf@f+1
   712  00136A                     
   713                           ; BSR set to: 0
   714  00136A  0E00               	movlw	0
   715  00136C  6F9B               	movwf	(sprintf@f+3)& (0+255),b
   716  00136E  0E00               	movlw	0
   717  001370  6F9A               	movwf	(sprintf@f+2)& (0+255),b
   718  001372                     
   719                           ; BSR set to: 0
   720  001372  0E00               	movlw	0
   721  001374  6F9D               	movwf	(sprintf@f+5)& (0+255),b
   722  001376  0E00               	movlw	0
   723  001378  6F9C               	movwf	(sprintf@f+4)& (0+255),b
   724  00137A                     
   725                           ; BSR set to: 0
   726  00137A  0E98               	movlw	low sprintf@f
   727  00137C  6E4E               	movwf	vfprintf@fp^0,c
   728  00137E  0E00               	movlw	high sprintf@f
   729  001380  6E4F               	movwf	(vfprintf@fp+1)^0,c
   730  001382  C058  F050         	movff	sprintf@fmt,vfprintf@fmt
   731  001386  C059  F051         	movff	sprintf@fmt+1,vfprintf@fmt+1
   732  00138A  0E96               	movlw	low sprintf@ap
   733  00138C  6E52               	movwf	vfprintf@ap^0,c
   734  00138E  0E00               	movlw	high sprintf@ap
   735  001390  6E53               	movwf	(vfprintf@ap+1)^0,c
   736  001392  EC7B  F009         	call	_vfprintf	;wreg free
   737  001396  0100               	movlb	0	; () banked
   738  001398  519A               	movf	(sprintf@f+2)& (0+255),w,b
   739  00139A  2456               	addwf	sprintf@s^0,w,c
   740  00139C  6ED9               	movwf	fsr2l,c
   741  00139E  519B               	movf	(sprintf@f+3)& (0+255),w,b
   742  0013A0  2057               	addwfc	(sprintf@s+1)^0,w,c
   743  0013A2  6EDA               	movwf	fsr2h,c
   744  0013A4  0E00               	movlw	0
   745  0013A6  6EDF               	movwf	indf2,c
   746  0013A8                     
   747                           ; BSR set to: 0
   748  0013A8  0012               	return		;funcret
   749  0013AA                     __end_of_sprintf:
   750                           	callstack 0
   751                           
   752 ;; *************** function _vfprintf *****************
   753 ;; Defined at:
   754 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;  fp              2   77[COMRAM] PTR struct _IO_FILE
   757 ;;		 -> sprintf@f(6), 
   758 ;;  fmt             2   79[COMRAM] PTR const unsigned char 
   759 ;;		 -> STR_1(12), 
   760 ;;  ap              2   81[COMRAM] PTR PTR void 
   761 ;;		 -> sprintf@ap(2), 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
   764 ;;		 -> STR_1(12), 
   765 ;; Return value:  Size  Location     Type
   766 ;;                  2   77[COMRAM] int 
   767 ;; Registers used:
   768 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   774 ;;      Params:         6       0       0       0       0       0       0       0       0
   775 ;;      Locals:         2       0       0       0       0       0       0       0       0
   776 ;;      Temps:          0       0       0       0       0       0       0       0       0
   777 ;;      Totals:         8       0       0       0       0       0       0       0       0
   778 ;;Total ram usage:        8 bytes
   779 ;; Hardware stack levels used: 1
   780 ;; Hardware stack levels required when called: 6
   781 ;; This function calls:
   782 ;;		_vfpfcnvrt
   783 ;; This function is called by:
   784 ;;		_sprintf
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           	psect	text2
   789  0012F6                     __ptext2:
   790                           	callstack 0
   791  0012F6                     _vfprintf:
   792                           	callstack 23
   793  0012F6                     
   794                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   795  0012F6  C050  F054         	movff	vfprintf@fmt,vfprintf@cfmt
   796  0012FA  C051  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   797  0012FE                     
   798                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   799  0012FE  0E00               	movlw	0
   800  001300  0100               	movlb	0	; () banked
   801  001302  6F61               	movwf	(_nout+1)& (0+255),b
   802  001304  0E00               	movlw	0
   803  001306  6F60               	movwf	_nout& (0+255),b
   804                           
   805                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   806  001308  EF99  F009         	goto	l1527
   807  00130C                     l1525:
   808                           
   809                           ; BSR set to: 0
   810                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   811  00130C  C04E  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
   812  001310  C04F  F03D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   813  001314  0E54               	movlw	low vfprintf@cfmt
   814  001316  6E3E               	movwf	vfpfcnvrt@fmt^0,c
   815  001318  0E00               	movlw	high vfprintf@cfmt
   816  00131A  6E3F               	movwf	(vfpfcnvrt@fmt+1)^0,c
   817  00131C  C052  F040         	movff	vfprintf@ap,vfpfcnvrt@ap
   818  001320  C053  F041         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   819  001324  EC08  F005         	call	_vfpfcnvrt	;wreg free
   820  001328  503C               	movf	?_vfpfcnvrt^0,w,c
   821  00132A  0100               	movlb	0	; () banked
   822  00132C  2760               	addwf	_nout& (0+255),f,b
   823  00132E  503D               	movf	(?_vfpfcnvrt+1)^0,w,c
   824  001330  2361               	addwfc	(_nout+1)& (0+255),f,b
   825  001332                     l1527:
   826                           
   827                           ; BSR set to: 0
   828                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   829  001332  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
   830  001336  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   831  00133A                     	if	0	;tblptru may be non-zero
   832  00133A                     	endif
   833  00133A                     	if	0	;tblptru may be non-zero
   834  00133A                     	endif
   835  00133A  0008               	tblrd		*
   836  00133C  50F5               	movf	tablat,w,c
   837  00133E  0900               	iorlw	0
   838  001340  A4D8               	btfss	status,2,c
   839  001342  EFA5  F009         	goto	u931
   840  001346  EFA7  F009         	goto	u930
   841  00134A                     u931:
   842  00134A  EF86  F009         	goto	l1525
   843  00134E                     u930:
   844  00134E                     
   845                           ; BSR set to: 0
   846                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   847  00134E  C060  F04E         	movff	_nout,?_vfprintf
   848  001352  C061  F04F         	movff	_nout+1,?_vfprintf+1
   849  001356                     
   850                           ; BSR set to: 0
   851  001356  0012               	return		;funcret
   852  001358                     __end_of_vfprintf:
   853                           	callstack 0
   854                           
   855 ;; *************** function _vfpfcnvrt *****************
   856 ;; Defined at:
   857 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;  fp              2   59[COMRAM] PTR struct _IO_FILE
   860 ;;		 -> sprintf@f(6), 
   861 ;;  fmt             2   61[COMRAM] PTR PTR unsigned char 
   862 ;;		 -> vfprintf@cfmt(2), 
   863 ;;  ap              2   63[COMRAM] PTR PTR void 
   864 ;;		 -> sprintf@ap(2), 
   865 ;; Auto vars:     Size  Location     Type
   866 ;;  llu             8   69[COMRAM] unsigned long long 
   867 ;;  ll              8    0        long long 
   868 ;;  f               4    0        long long 
   869 ;;  vp              3    0        PTR void 
   870 ;;  ct              3    0        unsigned char [3]
   871 ;;  cp              3    0        PTR unsigned char 
   872 ;;  i               2    0        int 
   873 ;;  done            2    0        int 
   874 ;;  c               1    0        unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  2   59[COMRAM] int 
   877 ;; Registers used:
   878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   884 ;;      Params:         6       0       0       0       0       0       0       0       0
   885 ;;      Locals:         8       0       0       0       0       0       0       0       0
   886 ;;      Temps:          4       0       0       0       0       0       0       0       0
   887 ;;      Totals:        18       0       0       0       0       0       0       0       0
   888 ;;Total ram usage:       18 bytes
   889 ;; Hardware stack levels used: 1
   890 ;; Hardware stack levels required when called: 5
   891 ;; This function calls:
   892 ;;		_fputc
   893 ;;		_utoa
   894 ;; This function is called by:
   895 ;;		_vfprintf
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text3
   900  000A10                     __ptext3:
   901                           	callstack 0
   902  000A10                     _vfpfcnvrt:
   903                           	callstack 23
   904  000A10                     
   905                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   906  000A10  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   907  000A14  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   908  000A18  CFDE FFF6          	movff	postinc2,tblptrl
   909  000A1C  CFDD FFF7          	movff	postdec2,tblptrh
   910  000A20                     	if	0	;tblptru may be non-zero
   911  000A20                     	endif
   912  000A20                     	if	0	;tblptru may be non-zero
   913  000A20                     	endif
   914  000A20  0008               	tblrd		*
   915  000A22  50F5               	movf	tablat,w,c
   916  000A24  0A25               	xorlw	37
   917  000A26  A4D8               	btfss	status,2,c
   918  000A28  EF18  F005         	goto	u781
   919  000A2C  EF1A  F005         	goto	u780
   920  000A30                     u781:
   921  000A30  EFB5  F005         	goto	l1433
   922  000A34                     u780:
   923  000A34                     
   924                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   925  000A34  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   926  000A38  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   927  000A3C  2ADE               	incf	postinc2,f,c
   928  000A3E  0E00               	movlw	0
   929  000A40  22DD               	addwfc	postdec2,f,c
   930  000A42                     
   931                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   932  000A42  0E00               	movlw	0
   933  000A44  0100               	movlb	0	; () banked
   934  000A46  6F63               	movwf	(_width+1)& (0+255),b
   935  000A48  0E00               	movlw	0
   936  000A4A  6F62               	movwf	_width& (0+255),b
   937  000A4C  C062  F066         	movff	_width,_flags
   938  000A50  C063  F067         	movff	_width+1,_flags+1
   939  000A54                     
   940                           ; BSR set to: 0
   941                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   942  000A54  6964               	setf	_prec& (0+255),b
   943  000A56  6965               	setf	(_prec+1)& (0+255),b
   944  000A58                     
   945                           ; BSR set to: 0
   946                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1204:         if 
      +                          (*fmt[0] == 'u') {
   947  000A58  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   948  000A5C  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   949  000A60  CFDE FFF6          	movff	postinc2,tblptrl
   950  000A64  CFDD FFF7          	movff	postdec2,tblptrh
   951  000A68                     	if	0	;tblptru may be non-zero
   952  000A68                     	endif
   953  000A68                     	if	0	;tblptru may be non-zero
   954  000A68                     	endif
   955  000A68  0008               	tblrd		*
   956  000A6A  50F5               	movf	tablat,w,c
   957  000A6C  0A75               	xorlw	117
   958  000A6E  A4D8               	btfss	status,2,c
   959  000A70  EF3C  F005         	goto	u791
   960  000A74  EF3E  F005         	goto	u790
   961  000A78                     u791:
   962  000A78  EF7F  F005         	goto	l1417
   963  000A7C                     u790:
   964  000A7C                     
   965                           ; BSR set to: 0
   966                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1206:            
      +                           ++*fmt;
   967  000A7C  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   968  000A80  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   969  000A84  2ADE               	incf	postinc2,f,c
   970  000A86  0E00               	movlw	0
   971  000A88  22DD               	addwfc	postdec2,f,c
   972                           
   973                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1207:            
      +                           llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned in
      +                          t)0));
   974  000A8A  C040  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   975  000A8E  C041  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   976  000A92  CFDF F042          	movff	indf2,??_vfpfcnvrt
   977  000A96  0E02               	movlw	2
   978  000A98  26DE               	addwf	postinc2,f,c
   979  000A9A  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
   980  000A9E  0E00               	movlw	0
   981  000AA0  22DD               	addwfc	postdec2,f,c
   982  000AA2  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
   983  000AA6  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   984  000AAA  CFDE F044          	movff	postinc2,??_vfpfcnvrt+2
   985  000AAE  CFDD F045          	movff	postdec2,??_vfpfcnvrt+3
   986  000AB2  C044  F046         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
   987  000AB6  C045  F047         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
   988  000ABA  6A48               	clrf	(vfpfcnvrt@llu+2)^0,c
   989  000ABC  6A49               	clrf	(vfpfcnvrt@llu+3)^0,c
   990  000ABE  6A4A               	clrf	(vfpfcnvrt@llu+4)^0,c
   991  000AC0  6A4B               	clrf	(vfpfcnvrt@llu+5)^0,c
   992  000AC2  6A4C               	clrf	(vfpfcnvrt@llu+6)^0,c
   993  000AC4  6A4D               	clrf	(vfpfcnvrt@llu+7)^0,c
   994  000AC6                     
   995                           ; BSR set to: 0
   996                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1209:            
      +                           return utoa(fp, llu);
   997  000AC6  C03C  F01C         	movff	vfpfcnvrt@fp,utoa@fp
   998  000ACA  C03D  F01D         	movff	vfpfcnvrt@fp+1,utoa@fp+1
   999  000ACE  C046  F01E         	movff	vfpfcnvrt@llu,utoa@d
  1000  000AD2  C047  F01F         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1001  000AD6  C048  F020         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1002  000ADA  C049  F021         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1003  000ADE  C04A  F022         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1004  000AE2  C04B  F023         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1005  000AE6  C04C  F024         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1006  000AEA  C04D  F025         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1007  000AEE  EC07  F004         	call	_utoa	;wreg free
  1008  000AF2  C01C  F03C         	movff	?_utoa,?_vfpfcnvrt
  1009  000AF6  C01D  F03D         	movff	?_utoa+1,?_vfpfcnvrt+1
  1010  000AFA  EFD0  F005         	goto	l849
  1011  000AFE                     l1417:
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1015  000AFE  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1016  000B02  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1017  000B06  CFDE FFF6          	movff	postinc2,tblptrl
  1018  000B0A  CFDD FFF7          	movff	postdec2,tblptrh
  1019  000B0E                     	if	0	;tblptru may be non-zero
  1020  000B0E                     	endif
  1021  000B0E                     	if	0	;tblptru may be non-zero
  1022  000B0E                     	endif
  1023  000B0E  0008               	tblrd		*
  1024  000B10  50F5               	movf	tablat,w,c
  1025  000B12  0A25               	xorlw	37
  1026  000B14  A4D8               	btfss	status,2,c
  1027  000B16  EF8F  F005         	goto	u801
  1028  000B1A  EF91  F005         	goto	u800
  1029  000B1E                     u801:
  1030  000B1E  EFA8  F005         	goto	l1427
  1031  000B22                     u800:
  1032  000B22                     
  1033                           ; BSR set to: 0
  1034                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1035  000B22  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1036  000B26  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1037  000B2A  2ADE               	incf	postinc2,f,c
  1038  000B2C  0E00               	movlw	0
  1039  000B2E  22DD               	addwfc	postdec2,f,c
  1040  000B30                     
  1041                           ; BSR set to: 0
  1042                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1043  000B30  0E00               	movlw	0
  1044  000B32  6E02               	movwf	(fputc@c+1)^0,c
  1045  000B34  0E25               	movlw	37
  1046  000B36  6E01               	movwf	fputc@c^0,c
  1047  000B38  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1048  000B3C  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1049  000B40  ECB8  F007         	call	_fputc	;wreg free
  1050  000B44                     l1423:
  1051                           
  1052                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1053  000B44  0E00               	movlw	0
  1054  000B46  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1055  000B48  0E01               	movlw	1
  1056  000B4A  6E3C               	movwf	?_vfpfcnvrt^0,c
  1057  000B4C  EFD0  F005         	goto	l849
  1058  000B50                     l1427:
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1062  000B50  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1063  000B54  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1064  000B58  2ADE               	incf	postinc2,f,c
  1065  000B5A  0E00               	movlw	0
  1066  000B5C  22DD               	addwfc	postdec2,f,c
  1067  000B5E                     
  1068                           ; BSR set to: 0
  1069                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1070  000B5E  0E00               	movlw	0
  1071  000B60  6E3D               	movwf	(?_vfpfcnvrt+1)^0,c
  1072  000B62  0E00               	movlw	0
  1073  000B64  6E3C               	movwf	?_vfpfcnvrt^0,c
  1074  000B66  EFD0  F005         	goto	l849
  1075  000B6A                     l1433:
  1076                           
  1077                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1078  000B6A  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1079  000B6E  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1080  000B72  CFDE FFF6          	movff	postinc2,tblptrl
  1081  000B76  CFDD FFF7          	movff	postdec2,tblptrh
  1082  000B7A                     	if	0	;tblptru may be non-zero
  1083  000B7A                     	endif
  1084  000B7A                     	if	0	;tblptru may be non-zero
  1085  000B7A                     	endif
  1086  000B7A  0008               	tblrd		*
  1087  000B7C  50F5               	movf	tablat,w,c
  1088  000B7E  6E01               	movwf	fputc@c^0,c
  1089  000B80  6A02               	clrf	(fputc@c+1)^0,c
  1090  000B82  C03C  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1091  000B86  C03D  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1092  000B8A  ECB8  F007         	call	_fputc	;wreg free
  1093  000B8E                     
  1094                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1095  000B8E  C03E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1096  000B92  C03F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1097  000B96  2ADE               	incf	postinc2,f,c
  1098  000B98  0E00               	movlw	0
  1099  000B9A  22DD               	addwfc	postdec2,f,c
  1100  000B9C  EFA2  F005         	goto	l1423
  1101  000BA0                     l849:
  1102  000BA0  0012               	return		;funcret
  1103  000BA2                     __end_of_vfpfcnvrt:
  1104                           	callstack 0
  1105                           
  1106 ;; *************** function _utoa *****************
  1107 ;; Defined at:
  1108 ;;		line 615 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1111 ;;		 -> sprintf@f(6), 
  1112 ;;  d               8   29[COMRAM] unsigned long long 
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;  n               8   49[COMRAM] unsigned long long 
  1115 ;;  i               2   57[COMRAM] int 
  1116 ;;  w               2   47[COMRAM] int 
  1117 ;;  p               2   45[COMRAM] int 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  2   27[COMRAM] int 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1127 ;;      Params:        10       0       0       0       0       0       0       0       0
  1128 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1129 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1130 ;;      Totals:        32       0       0       0       0       0       0       0       0
  1131 ;;Total ram usage:       32 bytes
  1132 ;; Hardware stack levels used: 1
  1133 ;; Hardware stack levels required when called: 4
  1134 ;; This function calls:
  1135 ;;		___lodiv
  1136 ;;		___lomod
  1137 ;;		_pad
  1138 ;; This function is called by:
  1139 ;;		_vfpfcnvrt
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text4
  1144  00080E                     __ptext4:
  1145                           	callstack 0
  1146  00080E                     _utoa:
  1147                           	callstack 23
  1148  00080E                     
  1149                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 615: static int u
      +                          toa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99
      +                          \common\doprnt.c: 616: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\dop
      +                          rnt.c: 617:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common
      +                          \doprnt.c: 618:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sourc
      +                          es\c99\common\doprnt.c: 621:     if (!(prec < 0)) {
  1150  00080E  0100               	movlb	0	; () banked
  1151  000810  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1152  000812  EF0D  F004         	goto	u711
  1153  000816  EF0F  F004         	goto	u710
  1154  00081A                     u711:
  1155  00081A  EF10  F004         	goto	l1369
  1156  00081E                     u710:
  1157  00081E                     
  1158                           ; BSR set to: 0
  1159                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 622:         flag
      +                          s &= ~(1 << 1);
  1160  00081E  9366               	bcf	_flags& (0+255),1,b
  1161  000820                     l1369:
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 624:     p = (0 <
      +                           prec) ? prec : 1;
  1165  000820  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1166  000822  EF1D  F004         	goto	u720
  1167  000826  5165               	movf	(_prec+1)& (0+255),w,b
  1168  000828  E106               	bnz	u721
  1169  00082A  0564               	decf	_prec& (0+255),w,b
  1170  00082C  B0D8               	btfsc	status,0,c
  1171  00082E  EF1B  F004         	goto	u721
  1172  000832  EF1D  F004         	goto	u720
  1173  000836                     u721:
  1174  000836  EF23  F004         	goto	l834
  1175  00083A                     u720:
  1176  00083A                     
  1177                           ; BSR set to: 0
  1178  00083A  0E00               	movlw	0
  1179  00083C  6E2F               	movwf	(utoa@p+1)^0,c
  1180  00083E  0E01               	movlw	1
  1181  000840  6E2E               	movwf	utoa@p^0,c
  1182  000842  EF27  F004         	goto	l836
  1183  000846                     l834:
  1184                           
  1185                           ; BSR set to: 0
  1186  000846  C064  F02E         	movff	_prec,utoa@p
  1187  00084A  C065  F02F         	movff	_prec+1,utoa@p+1
  1188  00084E                     l836:
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 625:     w = widt
      +                          h;
  1192  00084E  C062  F030         	movff	_width,utoa@w
  1193  000852  C063  F031         	movff	_width+1,utoa@w+1
  1194                           
  1195                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 628:     n = d;
  1196  000856  C01E  F032         	movff	utoa@d,utoa@n
  1197  00085A  C01F  F033         	movff	utoa@d+1,utoa@n+1
  1198  00085E  C020  F034         	movff	utoa@d+2,utoa@n+2
  1199  000862  C021  F035         	movff	utoa@d+3,utoa@n+3
  1200  000866  C022  F036         	movff	utoa@d+4,utoa@n+4
  1201  00086A  C023  F037         	movff	utoa@d+5,utoa@n+5
  1202  00086E  C024  F038         	movff	utoa@d+6,utoa@n+6
  1203  000872  C025  F039         	movff	utoa@d+7,utoa@n+7
  1204  000876                     
  1205                           ; BSR set to: 0
  1206                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 629:     i = size
      +                          of(dbuf) - 1;
  1207  000876  0E00               	movlw	0
  1208  000878  6E3B               	movwf	(utoa@i+1)^0,c
  1209  00087A  0E1F               	movlw	31
  1210  00087C  6E3A               	movwf	utoa@i^0,c
  1211  00087E                     
  1212                           ; BSR set to: 0
  1213                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 630:     dbuf[i] 
      +                          = '\0';
  1214  00087E  0E00               	movlw	0
  1215  000880  6F87               	movwf	(_dbuf+31)& (0+255),b
  1216                           
  1217                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1218  000882  EFB9  F004         	goto	l1387
  1219  000886                     l1377:
  1220                           
  1221                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 632:         --i;
  1222  000886  063A               	decf	utoa@i^0,f,c
  1223  000888  A0D8               	btfss	status,0,c
  1224  00088A  063B               	decf	(utoa@i+1)^0,f,c
  1225  00088C                     
  1226                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 633:         dbuf
      +                          [i] = '0' + (n % 10);
  1227  00088C  0E68               	movlw	low _dbuf
  1228  00088E  243A               	addwf	utoa@i^0,w,c
  1229  000890  6ED9               	movwf	fsr2l,c
  1230  000892  0E00               	movlw	high _dbuf
  1231  000894  203B               	addwfc	(utoa@i+1)^0,w,c
  1232  000896  6EDA               	movwf	fsr2h,c
  1233  000898  C032  F001         	movff	utoa@n,___lomod@dividend
  1234  00089C  C033  F002         	movff	utoa@n+1,___lomod@dividend+1
  1235  0008A0  C034  F003         	movff	utoa@n+2,___lomod@dividend+2
  1236  0008A4  C035  F004         	movff	utoa@n+3,___lomod@dividend+3
  1237  0008A8  C036  F005         	movff	utoa@n+4,___lomod@dividend+4
  1238  0008AC  C037  F006         	movff	utoa@n+5,___lomod@dividend+5
  1239  0008B0  C038  F007         	movff	utoa@n+6,___lomod@dividend+6
  1240  0008B4  C039  F008         	movff	utoa@n+7,___lomod@dividend+7
  1241  0008B8  0E0A               	movlw	10
  1242  0008BA  6E09               	movwf	___lomod@divisor^0,c
  1243  0008BC  0E00               	movlw	0
  1244  0008BE  6E0A               	movwf	(___lomod@divisor+1)^0,c
  1245  0008C0  0E00               	movlw	0
  1246  0008C2  6E0B               	movwf	(___lomod@divisor+2)^0,c
  1247  0008C4  0E00               	movlw	0
  1248  0008C6  6E0C               	movwf	(___lomod@divisor+3)^0,c
  1249  0008C8  0E00               	movlw	0
  1250  0008CA  6E0D               	movwf	(___lomod@divisor+4)^0,c
  1251  0008CC  0E00               	movlw	0
  1252  0008CE  6E0E               	movwf	(___lomod@divisor+5)^0,c
  1253  0008D0  0E00               	movlw	0
  1254  0008D2  6E0F               	movwf	(___lomod@divisor+6)^0,c
  1255  0008D4  0E00               	movlw	0
  1256  0008D6  6E10               	movwf	(___lomod@divisor+7)^0,c
  1257  0008D8  EC50  F007         	call	___lomod	;wreg free
  1258  0008DC  C001  F026         	movff	?___lomod,??_utoa
  1259  0008E0  C002  F027         	movff	?___lomod+1,??_utoa+1
  1260  0008E4  C003  F028         	movff	?___lomod+2,??_utoa+2
  1261  0008E8  C004  F029         	movff	?___lomod+3,??_utoa+3
  1262  0008EC  C005  F02A         	movff	?___lomod+4,??_utoa+4
  1263  0008F0  C006  F02B         	movff	?___lomod+5,??_utoa+5
  1264  0008F4  C007  F02C         	movff	?___lomod+6,??_utoa+6
  1265  0008F8  C008  F02D         	movff	?___lomod+7,??_utoa+7
  1266  0008FC  5026               	movf	??_utoa^0,w,c
  1267  0008FE  0F30               	addlw	48
  1268  000900  6EDF               	movwf	indf2,c
  1269  000902                     
  1270                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 634:         --p;
  1271  000902  062E               	decf	utoa@p^0,f,c
  1272  000904  A0D8               	btfss	status,0,c
  1273  000906  062F               	decf	(utoa@p+1)^0,f,c
  1274  000908                     
  1275                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 635:         --w;
  1276  000908  0630               	decf	utoa@w^0,f,c
  1277  00090A  A0D8               	btfss	status,0,c
  1278  00090C  0631               	decf	(utoa@w+1)^0,f,c
  1279  00090E                     
  1280                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 636:         n = 
      +                          n / 10;
  1281  00090E  C032  F001         	movff	utoa@n,___lodiv@dividend
  1282  000912  C033  F002         	movff	utoa@n+1,___lodiv@dividend+1
  1283  000916  C034  F003         	movff	utoa@n+2,___lodiv@dividend+2
  1284  00091A  C035  F004         	movff	utoa@n+3,___lodiv@dividend+3
  1285  00091E  C036  F005         	movff	utoa@n+4,___lodiv@dividend+4
  1286  000922  C037  F006         	movff	utoa@n+5,___lodiv@dividend+5
  1287  000926  C038  F007         	movff	utoa@n+6,___lodiv@dividend+6
  1288  00092A  C039  F008         	movff	utoa@n+7,___lodiv@dividend+7
  1289  00092E  0E0A               	movlw	10
  1290  000930  6E09               	movwf	___lodiv@divisor^0,c
  1291  000932  0E00               	movlw	0
  1292  000934  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  1293  000936  0E00               	movlw	0
  1294  000938  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  1295  00093A  0E00               	movlw	0
  1296  00093C  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  1297  00093E  0E00               	movlw	0
  1298  000940  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  1299  000942  0E00               	movlw	0
  1300  000944  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  1301  000946  0E00               	movlw	0
  1302  000948  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  1303  00094A  0E00               	movlw	0
  1304  00094C  6E10               	movwf	(___lodiv@divisor+7)^0,c
  1305  00094E  ECD8  F006         	call	___lodiv	;wreg free
  1306  000952  C001  F032         	movff	?___lodiv,utoa@n
  1307  000956  C002  F033         	movff	?___lodiv+1,utoa@n+1
  1308  00095A  C003  F034         	movff	?___lodiv+2,utoa@n+2
  1309  00095E  C004  F035         	movff	?___lodiv+3,utoa@n+3
  1310  000962  C005  F036         	movff	?___lodiv+4,utoa@n+4
  1311  000966  C006  F037         	movff	?___lodiv+5,utoa@n+5
  1312  00096A  C007  F038         	movff	?___lodiv+6,utoa@n+6
  1313  00096E  C008  F039         	movff	?___lodiv+7,utoa@n+7
  1314  000972                     l1387:
  1315                           
  1316                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 631:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1317  000972  503A               	movf	utoa@i^0,w,c
  1318  000974  103B               	iorwf	(utoa@i+1)^0,w,c
  1319  000976  B4D8               	btfsc	status,2,c
  1320  000978  EFC0  F004         	goto	u731
  1321  00097C  EFC2  F004         	goto	u730
  1322  000980                     u731:
  1323  000980  EFF3  F004         	goto	l1397
  1324  000984                     u730:
  1325  000984  5032               	movf	utoa@n^0,w,c
  1326  000986  1033               	iorwf	(utoa@n+1)^0,w,c
  1327  000988  1034               	iorwf	(utoa@n+2)^0,w,c
  1328  00098A  1035               	iorwf	(utoa@n+3)^0,w,c
  1329  00098C  1036               	iorwf	(utoa@n+4)^0,w,c
  1330  00098E  1037               	iorwf	(utoa@n+5)^0,w,c
  1331  000990  1038               	iorwf	(utoa@n+6)^0,w,c
  1332  000992  1039               	iorwf	(utoa@n+7)^0,w,c
  1333  000994  A4D8               	btfss	status,2,c
  1334  000996  EFCF  F004         	goto	u741
  1335  00099A  EFD1  F004         	goto	u740
  1336  00099E                     u741:
  1337  00099E  EF43  F004         	goto	l1377
  1338  0009A2                     u740:
  1339  0009A2  BE2F               	btfsc	(utoa@p+1)^0,7,c
  1340  0009A4  EFDE  F004         	goto	u750
  1341  0009A8  502F               	movf	(utoa@p+1)^0,w,c
  1342  0009AA  E106               	bnz	u751
  1343  0009AC  042E               	decf	utoa@p^0,w,c
  1344  0009AE  B0D8               	btfsc	status,0,c
  1345  0009B0  EFDC  F004         	goto	u751
  1346  0009B4  EFDE  F004         	goto	u750
  1347  0009B8                     u751:
  1348  0009B8  EF43  F004         	goto	l1377
  1349  0009BC                     u750:
  1350  0009BC  BE31               	btfsc	(utoa@w+1)^0,7,c
  1351  0009BE  EFE9  F004         	goto	u761
  1352  0009C2  5031               	movf	(utoa@w+1)^0,w,c
  1353  0009C4  E108               	bnz	u760
  1354  0009C6  0430               	decf	utoa@w^0,w,c
  1355  0009C8  A0D8               	btfss	status,0,c
  1356  0009CA  EFE9  F004         	goto	u761
  1357  0009CE  EFEB  F004         	goto	u760
  1358  0009D2                     u761:
  1359  0009D2  EFF3  F004         	goto	l1397
  1360  0009D6                     u760:
  1361  0009D6  0100               	movlb	0	; () banked
  1362  0009D8  B366               	btfsc	_flags& (0+255),1,b
  1363  0009DA  EFF1  F004         	goto	u771
  1364  0009DE  EFF3  F004         	goto	u770
  1365  0009E2                     u771:
  1366  0009E2  EF43  F004         	goto	l1377
  1367  0009E6                     u770:
  1368  0009E6                     l1397:
  1369                           
  1370                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 640:     return p
      +                          ad(fp, &dbuf[i], w);
  1371  0009E6  C01C  F011         	movff	utoa@fp,pad@fp
  1372  0009EA  C01D  F012         	movff	utoa@fp+1,pad@fp+1
  1373  0009EE  0E68               	movlw	low _dbuf
  1374  0009F0  243A               	addwf	utoa@i^0,w,c
  1375  0009F2  6E13               	movwf	pad@buf^0,c
  1376  0009F4  0E00               	movlw	high _dbuf
  1377  0009F6  203B               	addwfc	(utoa@i+1)^0,w,c
  1378  0009F8  6E14               	movwf	(pad@buf+1)^0,c
  1379  0009FA  C030  F015         	movff	utoa@w,pad@p
  1380  0009FE  C031  F016         	movff	utoa@w+1,pad@p+1
  1381  000A02  EC1D  F008         	call	_pad	;wreg free
  1382  000A06  C011  F01C         	movff	?_pad,?_utoa
  1383  000A0A  C012  F01D         	movff	?_pad+1,?_utoa+1
  1384  000A0E  0012               	return		;funcret
  1385  000A10                     __end_of_utoa:
  1386                           	callstack 0
  1387                           
  1388 ;; *************** function _pad *****************
  1389 ;; Defined at:
  1390 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1393 ;;		 -> sprintf@f(6), 
  1394 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1395 ;;		 -> dbuf(32), 
  1396 ;;  p               2   20[COMRAM] int 
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;  w               2   25[COMRAM] int 
  1399 ;;  i               2   23[COMRAM] int 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  2   16[COMRAM] int 
  1402 ;; Registers used:
  1403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1409 ;;      Params:         6       0       0       0       0       0       0       0       0
  1410 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1411 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1412 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1413 ;;Total ram usage:       11 bytes
  1414 ;; Hardware stack levels used: 1
  1415 ;; Hardware stack levels required when called: 3
  1416 ;; This function calls:
  1417 ;;		_fputc
  1418 ;;		_fputs
  1419 ;;		_strlen
  1420 ;; This function is called by:
  1421 ;;		_utoa
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text5
  1426  00103A                     __ptext5:
  1427                           	callstack 0
  1428  00103A                     _pad:
  1429                           	callstack 23
  1430  00103A                     
  1431                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1432  00103A  0100               	movlb	0	; () banked
  1433  00103C  A166               	btfss	_flags& (0+255),0,b
  1434  00103E  EF23  F008         	goto	u671
  1435  001042  EF25  F008         	goto	u670
  1436  001046                     u671:
  1437  001046  EF2F  F008         	goto	l1347
  1438  00104A                     u670:
  1439  00104A                     
  1440                           ; BSR set to: 0
  1441                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1442  00104A  C013  F00A         	movff	pad@buf,fputs@s
  1443  00104E  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1444  001052  C011  F00C         	movff	pad@fp,fputs@fp
  1445  001056  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1446  00105A  ECF8  F009         	call	_fputs	;wreg free
  1447  00105E                     l1347:
  1448                           
  1449                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1450  00105E  BE16               	btfsc	(pad@p+1)^0,7,c
  1451  001060  EF34  F008         	goto	u681
  1452  001064  EF36  F008         	goto	u680
  1453  001068                     u681:
  1454  001068  EF3C  F008         	goto	l1351
  1455  00106C                     u680:
  1456  00106C  C015  F01A         	movff	pad@p,pad@w
  1457  001070  C016  F01B         	movff	pad@p+1,pad@w+1
  1458  001074  EF40  F008         	goto	l824
  1459  001078                     l1351:
  1460  001078  0E00               	movlw	0
  1461  00107A  6E1B               	movwf	(pad@w+1)^0,c
  1462  00107C  0E00               	movlw	0
  1463  00107E  6E1A               	movwf	pad@w^0,c
  1464  001080                     l824:
  1465                           
  1466                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1467  001080  0E00               	movlw	0
  1468  001082  6E19               	movwf	(pad@i+1)^0,c
  1469  001084  0E00               	movlw	0
  1470  001086  6E18               	movwf	pad@i^0,c
  1471                           
  1472                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1473  001088  EF52  F008         	goto	l1357
  1474  00108C                     l1353:
  1475                           
  1476                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1477  00108C  0E00               	movlw	0
  1478  00108E  6E02               	movwf	(fputc@c+1)^0,c
  1479  001090  0E20               	movlw	32
  1480  001092  6E01               	movwf	fputc@c^0,c
  1481  001094  C011  F003         	movff	pad@fp,fputc@fp
  1482  001098  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1483  00109C  ECB8  F007         	call	_fputc	;wreg free
  1484  0010A0                     
  1485                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1486  0010A0  4A18               	infsnz	pad@i^0,f,c
  1487  0010A2  2A19               	incf	(pad@i+1)^0,f,c
  1488  0010A4                     l1357:
  1489                           
  1490                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1491  0010A4  501A               	movf	pad@w^0,w,c
  1492  0010A6  5C18               	subwf	pad@i^0,w,c
  1493  0010A8  5019               	movf	(pad@i+1)^0,w,c
  1494  0010AA  0A80               	xorlw	128
  1495  0010AC  6E17               	movwf	??_pad^0,c
  1496  0010AE  501B               	movf	(pad@w+1)^0,w,c
  1497  0010B0  0A80               	xorlw	128
  1498  0010B2  5817               	subwfb	??_pad^0,w,c
  1499  0010B4  A0D8               	btfss	status,0,c
  1500  0010B6  EF5F  F008         	goto	u691
  1501  0010BA  EF61  F008         	goto	u690
  1502  0010BE                     u691:
  1503  0010BE  EF46  F008         	goto	l1353
  1504  0010C2                     u690:
  1505  0010C2                     
  1506                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1507  0010C2  0100               	movlb	0	; () banked
  1508  0010C4  B166               	btfsc	_flags& (0+255),0,b
  1509  0010C6  EF67  F008         	goto	u701
  1510  0010CA  EF69  F008         	goto	u700
  1511  0010CE                     u701:
  1512  0010CE  EF73  F008         	goto	l1361
  1513  0010D2                     u700:
  1514  0010D2                     
  1515                           ; BSR set to: 0
  1516                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1517  0010D2  C013  F00A         	movff	pad@buf,fputs@s
  1518  0010D6  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1519  0010DA  C011  F00C         	movff	pad@fp,fputs@fp
  1520  0010DE  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1521  0010E2  ECF8  F009         	call	_fputs	;wreg free
  1522  0010E6                     l1361:
  1523                           
  1524                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1525  0010E6  C013  F001         	movff	pad@buf,strlen@s
  1526  0010EA  C014  F002         	movff	pad@buf+1,strlen@s+1
  1527  0010EE  EC1A  F00A         	call	_strlen	;wreg free
  1528  0010F2  501A               	movf	pad@w^0,w,c
  1529  0010F4  2401               	addwf	?_strlen^0,w,c
  1530  0010F6  6E11               	movwf	?_pad^0,c
  1531  0010F8  501B               	movf	(pad@w+1)^0,w,c
  1532  0010FA  2002               	addwfc	(?_strlen+1)^0,w,c
  1533  0010FC  6E12               	movwf	(?_pad+1)^0,c
  1534  0010FE  0012               	return		;funcret
  1535  001100                     __end_of_pad:
  1536                           	callstack 0
  1537                           
  1538 ;; *************** function _strlen *****************
  1539 ;; Defined at:
  1540 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1543 ;;		 -> dbuf(32), 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1546 ;;		 -> dbuf(32), 
  1547 ;; Return value:  Size  Location     Type
  1548 ;;                  2    0[COMRAM] unsigned int 
  1549 ;; Registers used:
  1550 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1551 ;; Tracked objects:
  1552 ;;		On entry : 0/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1556 ;;      Params:         2       0       0       0       0       0       0       0       0
  1557 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1558 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1559 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1560 ;;Total ram usage:        4 bytes
  1561 ;; Hardware stack levels used: 1
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_pad
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text6
  1570  001434                     __ptext6:
  1571                           	callstack 0
  1572  001434                     _strlen:
  1573                           	callstack 25
  1574  001434  C001  F003         	movff	strlen@s,strlen@a
  1575  001438  C002  F004         	movff	strlen@s+1,strlen@a+1
  1576  00143C  EF22  F00A         	goto	l1299
  1577  001440                     l1297:
  1578  001440  4A01               	infsnz	strlen@s^0,f,c
  1579  001442  2A02               	incf	(strlen@s+1)^0,f,c
  1580  001444                     l1299:
  1581  001444  C001  FFD9         	movff	strlen@s,fsr2l
  1582  001448  C002  FFDA         	movff	strlen@s+1,fsr2h
  1583  00144C  50DF               	movf	indf2,w,c
  1584  00144E  A4D8               	btfss	status,2,c
  1585  001450  EF2C  F00A         	goto	u591
  1586  001454  EF2E  F00A         	goto	u590
  1587  001458                     u591:
  1588  001458  EF20  F00A         	goto	l1297
  1589  00145C                     u590:
  1590  00145C  5003               	movf	strlen@a^0,w,c
  1591  00145E  5C01               	subwf	strlen@s^0,w,c
  1592  001460  6E01               	movwf	?_strlen^0,c
  1593  001462  5004               	movf	(strlen@a+1)^0,w,c
  1594  001464  5802               	subwfb	(strlen@s+1)^0,w,c
  1595  001466  6E02               	movwf	(?_strlen+1)^0,c
  1596  001468  0012               	return		;funcret
  1597  00146A                     __end_of_strlen:
  1598                           	callstack 0
  1599                           
  1600 ;; *************** function _fputs *****************
  1601 ;; Defined at:
  1602 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1605 ;;		 -> dbuf(32), 
  1606 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1607 ;;		 -> sprintf@f(6), 
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  i               2   14[COMRAM] int 
  1610 ;;  c               1   13[COMRAM] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  2    9[COMRAM] int 
  1613 ;; Registers used:
  1614 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1620 ;;      Params:         4       0       0       0       0       0       0       0       0
  1621 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1623 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1624 ;;Total ram usage:        7 bytes
  1625 ;; Hardware stack levels used: 1
  1626 ;; Hardware stack levels required when called: 2
  1627 ;; This function calls:
  1628 ;;		_fputc
  1629 ;; This function is called by:
  1630 ;;		_pad
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text7
  1635  0013F0                     __ptext7:
  1636                           	callstack 0
  1637  0013F0                     _fputs:
  1638                           	callstack 23
  1639  0013F0  0E00               	movlw	0
  1640  0013F2  6E10               	movwf	(fputs@i+1)^0,c
  1641  0013F4  0E00               	movlw	0
  1642  0013F6  6E0F               	movwf	fputs@i^0,c
  1643  0013F8  EF09  F00A         	goto	l1293
  1644  0013FC                     l1289:
  1645  0013FC  C00E  F001         	movff	fputs@c,fputc@c
  1646  001400  6A02               	clrf	(fputc@c+1)^0,c
  1647  001402  C00C  F003         	movff	fputs@fp,fputc@fp
  1648  001406  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1649  00140A  ECB8  F007         	call	_fputc	;wreg free
  1650  00140E  4A0F               	infsnz	fputs@i^0,f,c
  1651  001410  2A10               	incf	(fputs@i+1)^0,f,c
  1652  001412                     l1293:
  1653  001412  500F               	movf	fputs@i^0,w,c
  1654  001414  240A               	addwf	fputs@s^0,w,c
  1655  001416  6ED9               	movwf	fsr2l,c
  1656  001418  5010               	movf	(fputs@i+1)^0,w,c
  1657  00141A  200B               	addwfc	(fputs@s+1)^0,w,c
  1658  00141C  6EDA               	movwf	fsr2h,c
  1659  00141E  50DF               	movf	indf2,w,c
  1660  001420  6E0E               	movwf	fputs@c^0,c
  1661  001422  500E               	movf	fputs@c^0,w,c
  1662  001424  A4D8               	btfss	status,2,c
  1663  001426  EF17  F00A         	goto	u581
  1664  00142A  EF19  F00A         	goto	u580
  1665  00142E                     u581:
  1666  00142E  EFFE  F009         	goto	l1289
  1667  001432                     u580:
  1668  001432  0012               	return		;funcret
  1669  001434                     __end_of_fputs:
  1670                           	callstack 0
  1671                           
  1672 ;; *************** function _fputc *****************
  1673 ;; Defined at:
  1674 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  c               2    0[COMRAM] int 
  1677 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1678 ;;		 -> sprintf@f(6), 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;		None
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  2    0[COMRAM] int 
  1683 ;; Registers used:
  1684 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1690 ;;      Params:         4       0       0       0       0       0       0       0       0
  1691 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1692 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1693 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1694 ;;Total ram usage:        9 bytes
  1695 ;; Hardware stack levels used: 1
  1696 ;; Hardware stack levels required when called: 1
  1697 ;; This function calls:
  1698 ;;		_putch
  1699 ;; This function is called by:
  1700 ;;		_pad
  1701 ;;		_vfpfcnvrt
  1702 ;;		_fputs
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text8
  1707  000F70                     __ptext8:
  1708                           	callstack 0
  1709  000F70                     _fputc:
  1710                           	callstack 23
  1711  000F70  5003               	movf	fputc@fp^0,w,c
  1712  000F72  1004               	iorwf	(fputc@fp+1)^0,w,c
  1713  000F74  B4D8               	btfsc	status,2,c
  1714  000F76  EFBF  F007         	goto	u541
  1715  000F7A  EFC1  F007         	goto	u540
  1716  000F7E                     u541:
  1717  000F7E  EFCA  F007         	goto	l1277
  1718  000F82                     u540:
  1719  000F82  5003               	movf	fputc@fp^0,w,c
  1720  000F84  1004               	iorwf	(fputc@fp+1)^0,w,c
  1721  000F86  A4D8               	btfss	status,2,c
  1722  000F88  EFC8  F007         	goto	u551
  1723  000F8C  EFCA  F007         	goto	u550
  1724  000F90                     u551:
  1725  000F90  EFCF  F007         	goto	l1279
  1726  000F94                     u550:
  1727  000F94                     l1277:
  1728  000F94  5001               	movf	fputc@c^0,w,c
  1729  000F96  EC6D  F00A         	call	_putch
  1730  000F9A  EF1C  F008         	goto	l868
  1731  000F9E                     l1279:
  1732  000F9E  EE20 F004          	lfsr	2,4
  1733  000FA2  5003               	movf	fputc@fp^0,w,c
  1734  000FA4  26D9               	addwf	fsr2l,f,c
  1735  000FA6  5004               	movf	(fputc@fp+1)^0,w,c
  1736  000FA8  22DA               	addwfc	fsr2h,f,c
  1737  000FAA  50DE               	movf	postinc2,w,c
  1738  000FAC  10DE               	iorwf	postinc2,w,c
  1739  000FAE  B4D8               	btfsc	status,2,c
  1740  000FB0  EFDC  F007         	goto	u561
  1741  000FB4  EFDE  F007         	goto	u560
  1742  000FB8                     u561:
  1743  000FB8  EFF9  F007         	goto	l1283
  1744  000FBC                     u560:
  1745  000FBC  EE20 F004          	lfsr	2,4
  1746  000FC0  5003               	movf	fputc@fp^0,w,c
  1747  000FC2  26D9               	addwf	fsr2l,f,c
  1748  000FC4  5004               	movf	(fputc@fp+1)^0,w,c
  1749  000FC6  22DA               	addwfc	fsr2h,f,c
  1750  000FC8  EE10 F002          	lfsr	1,2
  1751  000FCC  5003               	movf	fputc@fp^0,w,c
  1752  000FCE  26E1               	addwf	fsr1l,f,c
  1753  000FD0  5004               	movf	(fputc@fp+1)^0,w,c
  1754  000FD2  22E2               	addwfc	fsr1h,f,c
  1755  000FD4  50DE               	movf	postinc2,w,c
  1756  000FD6  5CE6               	subwf	postinc1,w,c
  1757  000FD8  50E6               	movf	postinc1,w,c
  1758  000FDA  0A80               	xorlw	128
  1759  000FDC  6E09               	movwf	(??_fputc+4)^0,c
  1760  000FDE  50DE               	movf	postinc2,w,c
  1761  000FE0  0A80               	xorlw	128
  1762  000FE2  5809               	subwfb	(??_fputc+4)^0,w,c
  1763  000FE4  B0D8               	btfsc	status,0,c
  1764  000FE6  EFF7  F007         	goto	u571
  1765  000FEA  EFF9  F007         	goto	u570
  1766  000FEE                     u571:
  1767  000FEE  EF1C  F008         	goto	l868
  1768  000FF2                     u570:
  1769  000FF2                     l1283:
  1770  000FF2  EE20 F002          	lfsr	2,2
  1771  000FF6  5003               	movf	fputc@fp^0,w,c
  1772  000FF8  26D9               	addwf	fsr2l,f,c
  1773  000FFA  5004               	movf	(fputc@fp+1)^0,w,c
  1774  000FFC  22DA               	addwfc	fsr2h,f,c
  1775  000FFE  CFDE F005          	movff	postinc2,??_fputc
  1776  001002  CFDD F006          	movff	postdec2,??_fputc+1
  1777  001006  C003  FFD9         	movff	fputc@fp,fsr2l
  1778  00100A  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1779  00100E  CFDE F007          	movff	postinc2,??_fputc+2
  1780  001012  CFDD F008          	movff	postdec2,??_fputc+3
  1781  001016  5005               	movf	??_fputc^0,w,c
  1782  001018  2407               	addwf	(??_fputc+2)^0,w,c
  1783  00101A  6ED9               	movwf	fsr2l,c
  1784  00101C  5006               	movf	(??_fputc+1)^0,w,c
  1785  00101E  2008               	addwfc	(??_fputc+3)^0,w,c
  1786  001020  6EDA               	movwf	fsr2h,c
  1787  001022  C001  FFDF         	movff	fputc@c,indf2
  1788  001026  EE20 F002          	lfsr	2,2
  1789  00102A  5003               	movf	fputc@fp^0,w,c
  1790  00102C  26D9               	addwf	fsr2l,f,c
  1791  00102E  5004               	movf	(fputc@fp+1)^0,w,c
  1792  001030  22DA               	addwfc	fsr2h,f,c
  1793  001032  2ADE               	incf	postinc2,f,c
  1794  001034  0E00               	movlw	0
  1795  001036  22DD               	addwfc	postdec2,f,c
  1796  001038                     l868:
  1797  001038  0012               	return		;funcret
  1798  00103A                     __end_of_fputc:
  1799                           	callstack 0
  1800                           
  1801 ;; *************** function _putch *****************
  1802 ;; Defined at:
  1803 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  c               1    wreg     unsigned char 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  c               1    0[COMRAM] unsigned char 
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1817 ;;      Params:         0       0       0       0       0       0       0       0       0
  1818 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1819 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1820 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1821 ;;Total ram usage:        0 bytes
  1822 ;; Hardware stack levels used: 1
  1823 ;; This function calls:
  1824 ;;		Nothing
  1825 ;; This function is called by:
  1826 ;;		_fputc
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text9
  1831  0014DA                     __ptext9:
  1832                           	callstack 0
  1833  0014DA                     _putch:
  1834                           	callstack 23
  1835  0014DA  0012               	return		;funcret
  1836  0014DC                     __end_of_putch:
  1837                           	callstack 0
  1838                           
  1839 ;; *************** function ___lomod *****************
  1840 ;; Defined at:
  1841 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lomod.c"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  dividend        8    0[COMRAM] unsigned long long 
  1844 ;;  divisor         8    8[COMRAM] unsigned long long 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;  counter         1   16[COMRAM] unsigned char 
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  8    0[COMRAM] unsigned long long 
  1849 ;; Registers used:
  1850 ;;		wreg, status,2, status,0
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1856 ;;      Params:        16       0       0       0       0       0       0       0       0
  1857 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1858 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1859 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1860 ;;Total ram usage:       17 bytes
  1861 ;; Hardware stack levels used: 1
  1862 ;; This function calls:
  1863 ;;		Nothing
  1864 ;; This function is called by:
  1865 ;;		_utoa
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text10
  1870  000EA0                     __ptext10:
  1871                           	callstack 0
  1872  000EA0                     ___lomod:
  1873                           	callstack 26
  1874  000EA0  5009               	movf	___lomod@divisor^0,w,c
  1875  000EA2  100A               	iorwf	(___lomod@divisor+1)^0,w,c
  1876  000EA4  100B               	iorwf	(___lomod@divisor+2)^0,w,c
  1877  000EA6  100C               	iorwf	(___lomod@divisor+3)^0,w,c
  1878  000EA8  100D               	iorwf	(___lomod@divisor+4)^0,w,c
  1879  000EAA  100E               	iorwf	(___lomod@divisor+5)^0,w,c
  1880  000EAC  100F               	iorwf	(___lomod@divisor+6)^0,w,c
  1881  000EAE  1010               	iorwf	(___lomod@divisor+7)^0,w,c
  1882  000EB0  B4D8               	btfsc	status,2,c
  1883  000EB2  EF5D  F007         	goto	u641
  1884  000EB6  EF5F  F007         	goto	u640
  1885  000EBA                     u641:
  1886  000EBA  EFA7  F007         	goto	l569
  1887  000EBE                     u640:
  1888  000EBE  0E01               	movlw	1
  1889  000EC0  6E11               	movwf	___lomod@counter^0,c
  1890  000EC2  EF6D  F007         	goto	l1333
  1891  000EC6                     l1331:
  1892  000EC6  90D8               	bcf	status,0,c
  1893  000EC8  3609               	rlcf	___lomod@divisor^0,f,c
  1894  000ECA  360A               	rlcf	(___lomod@divisor+1)^0,f,c
  1895  000ECC  360B               	rlcf	(___lomod@divisor+2)^0,f,c
  1896  000ECE  360C               	rlcf	(___lomod@divisor+3)^0,f,c
  1897  000ED0  360D               	rlcf	(___lomod@divisor+4)^0,f,c
  1898  000ED2  360E               	rlcf	(___lomod@divisor+5)^0,f,c
  1899  000ED4  360F               	rlcf	(___lomod@divisor+6)^0,f,c
  1900  000ED6  3610               	rlcf	(___lomod@divisor+7)^0,f,c
  1901  000ED8  2A11               	incf	___lomod@counter^0,f,c
  1902  000EDA                     l1333:
  1903  000EDA  AE10               	btfss	(___lomod@divisor+7)^0,7,c
  1904  000EDC  EF72  F007         	goto	u651
  1905  000EE0  EF74  F007         	goto	u650
  1906  000EE4                     u651:
  1907  000EE4  EF63  F007         	goto	l1331
  1908  000EE8                     u650:
  1909  000EE8                     l1335:
  1910  000EE8  5009               	movf	___lomod@divisor^0,w,c
  1911  000EEA  5C01               	subwf	___lomod@dividend^0,w,c
  1912  000EEC  500A               	movf	(___lomod@divisor+1)^0,w,c
  1913  000EEE  5802               	subwfb	(___lomod@dividend+1)^0,w,c
  1914  000EF0  500B               	movf	(___lomod@divisor+2)^0,w,c
  1915  000EF2  5803               	subwfb	(___lomod@dividend+2)^0,w,c
  1916  000EF4  500C               	movf	(___lomod@divisor+3)^0,w,c
  1917  000EF6  5804               	subwfb	(___lomod@dividend+3)^0,w,c
  1918  000EF8  500D               	movf	(___lomod@divisor+4)^0,w,c
  1919  000EFA  5805               	subwfb	(___lomod@dividend+4)^0,w,c
  1920  000EFC  500E               	movf	(___lomod@divisor+5)^0,w,c
  1921  000EFE  5806               	subwfb	(___lomod@dividend+5)^0,w,c
  1922  000F00  500F               	movf	(___lomod@divisor+6)^0,w,c
  1923  000F02  5807               	subwfb	(___lomod@dividend+6)^0,w,c
  1924  000F04  5010               	movf	(___lomod@divisor+7)^0,w,c
  1925  000F06  5808               	subwfb	(___lomod@dividend+7)^0,w,c
  1926  000F08  A0D8               	btfss	status,0,c
  1927  000F0A  EF89  F007         	goto	u661
  1928  000F0E  EF8B  F007         	goto	u660
  1929  000F12                     u661:
  1930  000F12  EF9B  F007         	goto	l1339
  1931  000F16                     u660:
  1932  000F16  5009               	movf	___lomod@divisor^0,w,c
  1933  000F18  5E01               	subwf	___lomod@dividend^0,f,c
  1934  000F1A  500A               	movf	(___lomod@divisor+1)^0,w,c
  1935  000F1C  5A02               	subwfb	(___lomod@dividend+1)^0,f,c
  1936  000F1E  500B               	movf	(___lomod@divisor+2)^0,w,c
  1937  000F20  5A03               	subwfb	(___lomod@dividend+2)^0,f,c
  1938  000F22  500C               	movf	(___lomod@divisor+3)^0,w,c
  1939  000F24  5A04               	subwfb	(___lomod@dividend+3)^0,f,c
  1940  000F26  500D               	movf	(___lomod@divisor+4)^0,w,c
  1941  000F28  5A05               	subwfb	(___lomod@dividend+4)^0,f,c
  1942  000F2A  500E               	movf	(___lomod@divisor+5)^0,w,c
  1943  000F2C  5A06               	subwfb	(___lomod@dividend+5)^0,f,c
  1944  000F2E  500F               	movf	(___lomod@divisor+6)^0,w,c
  1945  000F30  5A07               	subwfb	(___lomod@dividend+6)^0,f,c
  1946  000F32  5010               	movf	(___lomod@divisor+7)^0,w,c
  1947  000F34  5A08               	subwfb	(___lomod@dividend+7)^0,f,c
  1948  000F36                     l1339:
  1949  000F36  90D8               	bcf	status,0,c
  1950  000F38  3210               	rrcf	(___lomod@divisor+7)^0,f,c
  1951  000F3A  320F               	rrcf	(___lomod@divisor+6)^0,f,c
  1952  000F3C  320E               	rrcf	(___lomod@divisor+5)^0,f,c
  1953  000F3E  320D               	rrcf	(___lomod@divisor+4)^0,f,c
  1954  000F40  320C               	rrcf	(___lomod@divisor+3)^0,f,c
  1955  000F42  320B               	rrcf	(___lomod@divisor+2)^0,f,c
  1956  000F44  320A               	rrcf	(___lomod@divisor+1)^0,f,c
  1957  000F46  3209               	rrcf	___lomod@divisor^0,f,c
  1958  000F48  2E11               	decfsz	___lomod@counter^0,f,c
  1959  000F4A  EF74  F007         	goto	l1335
  1960  000F4E                     l569:
  1961  000F4E  C001  F001         	movff	___lomod@dividend,?___lomod
  1962  000F52  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  1963  000F56  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  1964  000F5A  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  1965  000F5E  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  1966  000F62  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  1967  000F66  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  1968  000F6A  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  1969  000F6E  0012               	return		;funcret
  1970  000F70                     __end_of___lomod:
  1971                           	callstack 0
  1972                           
  1973 ;; *************** function ___lodiv *****************
  1974 ;; Defined at:
  1975 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lodiv.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  dividend        8    0[COMRAM] unsigned long long 
  1978 ;;  divisor         8    8[COMRAM] unsigned long long 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  quotient        8   16[COMRAM] unsigned long long 
  1981 ;;  counter         1   24[COMRAM] unsigned char 
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  8    0[COMRAM] unsigned long long 
  1984 ;; Registers used:
  1985 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1991 ;;      Params:        16       0       0       0       0       0       0       0       0
  1992 ;;      Locals:         9       0       0       0       0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1994 ;;      Totals:        25       0       0       0       0       0       0       0       0
  1995 ;;Total ram usage:       25 bytes
  1996 ;; Hardware stack levels used: 1
  1997 ;; This function calls:
  1998 ;;		Nothing
  1999 ;; This function is called by:
  2000 ;;		_utoa
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text11
  2005  000DB0                     __ptext11:
  2006                           	callstack 0
  2007  000DB0                     ___lodiv:
  2008                           	callstack 26
  2009  000DB0  EE20  F011         	lfsr	2,___lodiv@quotient
  2010  000DB4  0E07               	movlw	7
  2011  000DB6                     u601:
  2012  000DB6  6ADE               	clrf	postinc2,c
  2013  000DB8  06E8               	decf	wreg,f,c
  2014  000DBA  E2FD               	bc	u601
  2015  000DBC  5009               	movf	___lodiv@divisor^0,w,c
  2016  000DBE  100A               	iorwf	(___lodiv@divisor+1)^0,w,c
  2017  000DC0  100B               	iorwf	(___lodiv@divisor+2)^0,w,c
  2018  000DC2  100C               	iorwf	(___lodiv@divisor+3)^0,w,c
  2019  000DC4  100D               	iorwf	(___lodiv@divisor+4)^0,w,c
  2020  000DC6  100E               	iorwf	(___lodiv@divisor+5)^0,w,c
  2021  000DC8  100F               	iorwf	(___lodiv@divisor+6)^0,w,c
  2022  000DCA  1010               	iorwf	(___lodiv@divisor+7)^0,w,c
  2023  000DCC  B4D8               	btfsc	status,2,c
  2024  000DCE  EFEB  F006         	goto	u611
  2025  000DD2  EFED  F006         	goto	u610
  2026  000DD6                     u611:
  2027  000DD6  EF3F  F007         	goto	l559
  2028  000DDA                     u610:
  2029  000DDA  0E01               	movlw	1
  2030  000DDC  6E19               	movwf	___lodiv@counter^0,c
  2031  000DDE  EFFB  F006         	goto	l1313
  2032  000DE2                     l1311:
  2033  000DE2  90D8               	bcf	status,0,c
  2034  000DE4  3609               	rlcf	___lodiv@divisor^0,f,c
  2035  000DE6  360A               	rlcf	(___lodiv@divisor+1)^0,f,c
  2036  000DE8  360B               	rlcf	(___lodiv@divisor+2)^0,f,c
  2037  000DEA  360C               	rlcf	(___lodiv@divisor+3)^0,f,c
  2038  000DEC  360D               	rlcf	(___lodiv@divisor+4)^0,f,c
  2039  000DEE  360E               	rlcf	(___lodiv@divisor+5)^0,f,c
  2040  000DF0  360F               	rlcf	(___lodiv@divisor+6)^0,f,c
  2041  000DF2  3610               	rlcf	(___lodiv@divisor+7)^0,f,c
  2042  000DF4  2A19               	incf	___lodiv@counter^0,f,c
  2043  000DF6                     l1313:
  2044  000DF6  AE10               	btfss	(___lodiv@divisor+7)^0,7,c
  2045  000DF8  EF00  F007         	goto	u621
  2046  000DFC  EF02  F007         	goto	u620
  2047  000E00                     u621:
  2048  000E00  EFF1  F006         	goto	l1311
  2049  000E04                     u620:
  2050  000E04                     l1315:
  2051  000E04  90D8               	bcf	status,0,c
  2052  000E06  3611               	rlcf	___lodiv@quotient^0,f,c
  2053  000E08  3612               	rlcf	(___lodiv@quotient+1)^0,f,c
  2054  000E0A  3613               	rlcf	(___lodiv@quotient+2)^0,f,c
  2055  000E0C  3614               	rlcf	(___lodiv@quotient+3)^0,f,c
  2056  000E0E  3615               	rlcf	(___lodiv@quotient+4)^0,f,c
  2057  000E10  3616               	rlcf	(___lodiv@quotient+5)^0,f,c
  2058  000E12  3617               	rlcf	(___lodiv@quotient+6)^0,f,c
  2059  000E14  3618               	rlcf	(___lodiv@quotient+7)^0,f,c
  2060  000E16  5009               	movf	___lodiv@divisor^0,w,c
  2061  000E18  5C01               	subwf	___lodiv@dividend^0,w,c
  2062  000E1A  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2063  000E1C  5802               	subwfb	(___lodiv@dividend+1)^0,w,c
  2064  000E1E  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2065  000E20  5803               	subwfb	(___lodiv@dividend+2)^0,w,c
  2066  000E22  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2067  000E24  5804               	subwfb	(___lodiv@dividend+3)^0,w,c
  2068  000E26  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2069  000E28  5805               	subwfb	(___lodiv@dividend+4)^0,w,c
  2070  000E2A  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2071  000E2C  5806               	subwfb	(___lodiv@dividend+5)^0,w,c
  2072  000E2E  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2073  000E30  5807               	subwfb	(___lodiv@dividend+6)^0,w,c
  2074  000E32  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2075  000E34  5808               	subwfb	(___lodiv@dividend+7)^0,w,c
  2076  000E36  A0D8               	btfss	status,0,c
  2077  000E38  EF20  F007         	goto	u631
  2078  000E3C  EF22  F007         	goto	u630
  2079  000E40                     u631:
  2080  000E40  EF33  F007         	goto	l1323
  2081  000E44                     u630:
  2082  000E44  5009               	movf	___lodiv@divisor^0,w,c
  2083  000E46  5E01               	subwf	___lodiv@dividend^0,f,c
  2084  000E48  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2085  000E4A  5A02               	subwfb	(___lodiv@dividend+1)^0,f,c
  2086  000E4C  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2087  000E4E  5A03               	subwfb	(___lodiv@dividend+2)^0,f,c
  2088  000E50  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2089  000E52  5A04               	subwfb	(___lodiv@dividend+3)^0,f,c
  2090  000E54  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2091  000E56  5A05               	subwfb	(___lodiv@dividend+4)^0,f,c
  2092  000E58  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2093  000E5A  5A06               	subwfb	(___lodiv@dividend+5)^0,f,c
  2094  000E5C  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2095  000E5E  5A07               	subwfb	(___lodiv@dividend+6)^0,f,c
  2096  000E60  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2097  000E62  5A08               	subwfb	(___lodiv@dividend+7)^0,f,c
  2098  000E64  8011               	bsf	___lodiv@quotient^0,0,c
  2099  000E66                     l1323:
  2100  000E66  90D8               	bcf	status,0,c
  2101  000E68  3210               	rrcf	(___lodiv@divisor+7)^0,f,c
  2102  000E6A  320F               	rrcf	(___lodiv@divisor+6)^0,f,c
  2103  000E6C  320E               	rrcf	(___lodiv@divisor+5)^0,f,c
  2104  000E6E  320D               	rrcf	(___lodiv@divisor+4)^0,f,c
  2105  000E70  320C               	rrcf	(___lodiv@divisor+3)^0,f,c
  2106  000E72  320B               	rrcf	(___lodiv@divisor+2)^0,f,c
  2107  000E74  320A               	rrcf	(___lodiv@divisor+1)^0,f,c
  2108  000E76  3209               	rrcf	___lodiv@divisor^0,f,c
  2109  000E78  2E19               	decfsz	___lodiv@counter^0,f,c
  2110  000E7A  EF02  F007         	goto	l1315
  2111  000E7E                     l559:
  2112  000E7E  C011  F001         	movff	___lodiv@quotient,?___lodiv
  2113  000E82  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  2114  000E86  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  2115  000E8A  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  2116  000E8E  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  2117  000E92  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  2118  000E96  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  2119  000E9A  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  2120  000E9E  0012               	return		;funcret
  2121  000EA0                     __end_of___lodiv:
  2122                           	callstack 0
  2123                           
  2124 ;; *************** function _map *****************
  2125 ;; Defined at:
  2126 ;;		line 3 in file "./map_function.h"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;  x               4   26[COMRAM] long 
  2129 ;;  eMin            4   30[COMRAM] long 
  2130 ;;  eMax            4   34[COMRAM] long 
  2131 ;;  sMin            4   38[COMRAM] long 
  2132 ;;  sMax            4   42[COMRAM] long 
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;		None
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  4   26[COMRAM] long 
  2137 ;; Registers used:
  2138 ;;		wreg, status,2, status,0, cstack
  2139 ;; Tracked objects:
  2140 ;;		On entry : 0/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2144 ;;      Params:        20       0       0       0       0       0       0       0       0
  2145 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2147 ;;      Totals:        20       0       0       0       0       0       0       0       0
  2148 ;;Total ram usage:       20 bytes
  2149 ;; Hardware stack levels used: 1
  2150 ;; Hardware stack levels required when called: 1
  2151 ;; This function calls:
  2152 ;;		___aldiv
  2153 ;;		___lmul
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text12
  2160  0011A4                     __ptext12:
  2161                           	callstack 0
  2162  0011A4                     _map:
  2163                           	callstack 29
  2164  0011A4                     
  2165                           ;./map_function.h: 3: long map(long x, long eMin, long eMax, long sMin, long sMax);./map
      +                          _function.h: 4: {;./map_function.h: 5:   return(x -eMin)*(sMax-sMin)/(eMax-eMin)+sMin;
  2166  0011A4  501F               	movf	map@eMin^0,w,c
  2167  0011A6  5C1B               	subwf	map@x^0,w,c
  2168  0011A8  6E01               	movwf	___lmul@multiplier^0,c
  2169  0011AA  5020               	movf	(map@eMin+1)^0,w,c
  2170  0011AC  581C               	subwfb	(map@x+1)^0,w,c
  2171  0011AE  6E02               	movwf	(___lmul@multiplier+1)^0,c
  2172  0011B0  5021               	movf	(map@eMin+2)^0,w,c
  2173  0011B2  581D               	subwfb	(map@x+2)^0,w,c
  2174  0011B4  6E03               	movwf	(___lmul@multiplier+2)^0,c
  2175  0011B6  5022               	movf	(map@eMin+3)^0,w,c
  2176  0011B8  581E               	subwfb	(map@x+3)^0,w,c
  2177  0011BA  6E04               	movwf	(___lmul@multiplier+3)^0,c
  2178  0011BC  5027               	movf	map@sMin^0,w,c
  2179  0011BE  5C2B               	subwf	map@sMax^0,w,c
  2180  0011C0  6E05               	movwf	___lmul@multiplicand^0,c
  2181  0011C2  5028               	movf	(map@sMin+1)^0,w,c
  2182  0011C4  582C               	subwfb	(map@sMax+1)^0,w,c
  2183  0011C6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2184  0011C8  5029               	movf	(map@sMin+2)^0,w,c
  2185  0011CA  582D               	subwfb	(map@sMax+2)^0,w,c
  2186  0011CC  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2187  0011CE  502A               	movf	(map@sMin+3)^0,w,c
  2188  0011D0  582E               	subwfb	(map@sMax+3)^0,w,c
  2189  0011D2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2190  0011D4  EC46  F009         	call	___lmul	;wreg free
  2191  0011D8  C001  F00D         	movff	?___lmul,___aldiv@dividend
  2192  0011DC  C002  F00E         	movff	?___lmul+1,___aldiv@dividend+1
  2193  0011E0  C003  F00F         	movff	?___lmul+2,___aldiv@dividend+2
  2194  0011E4  C004  F010         	movff	?___lmul+3,___aldiv@dividend+3
  2195  0011E8  501F               	movf	map@eMin^0,w,c
  2196  0011EA  5C23               	subwf	map@eMax^0,w,c
  2197  0011EC  6E11               	movwf	___aldiv@divisor^0,c
  2198  0011EE  5020               	movf	(map@eMin+1)^0,w,c
  2199  0011F0  5824               	subwfb	(map@eMax+1)^0,w,c
  2200  0011F2  6E12               	movwf	(___aldiv@divisor+1)^0,c
  2201  0011F4  5021               	movf	(map@eMin+2)^0,w,c
  2202  0011F6  5825               	subwfb	(map@eMax+2)^0,w,c
  2203  0011F8  6E13               	movwf	(___aldiv@divisor+2)^0,c
  2204  0011FA  5022               	movf	(map@eMin+3)^0,w,c
  2205  0011FC  5826               	subwfb	(map@eMax+3)^0,w,c
  2206  0011FE  6E14               	movwf	(___aldiv@divisor+3)^0,c
  2207  001200  ECD1  F005         	call	___aldiv	;wreg free
  2208  001204  5027               	movf	map@sMin^0,w,c
  2209  001206  240D               	addwf	?___aldiv^0,w,c
  2210  001208  6E1B               	movwf	?_map^0,c
  2211  00120A  5028               	movf	(map@sMin+1)^0,w,c
  2212  00120C  200E               	addwfc	(?___aldiv+1)^0,w,c
  2213  00120E  6E1C               	movwf	(?_map+1)^0,c
  2214  001210  5029               	movf	(map@sMin+2)^0,w,c
  2215  001212  200F               	addwfc	(?___aldiv+2)^0,w,c
  2216  001214  6E1D               	movwf	(?_map+2)^0,c
  2217  001216  502A               	movf	(map@sMin+3)^0,w,c
  2218  001218  2010               	addwfc	(?___aldiv+3)^0,w,c
  2219  00121A  6E1E               	movwf	(?_map+3)^0,c
  2220  00121C  0012               	return		;funcret
  2221  00121E                     __end_of_map:
  2222                           	callstack 0
  2223                           
  2224 ;; *************** function ___lmul *****************
  2225 ;; Defined at:
  2226 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul32.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;  multiplier      4    0[COMRAM] unsigned long 
  2229 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  product         4    8[COMRAM] unsigned long 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  4    0[COMRAM] unsigned long 
  2234 ;; Registers used:
  2235 ;;		wreg, status,2, status,0
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2241 ;;      Params:         8       0       0       0       0       0       0       0       0
  2242 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2244 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2245 ;;Total ram usage:       12 bytes
  2246 ;; Hardware stack levels used: 1
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_map
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text13
  2255  00128C                     __ptext13:
  2256                           	callstack 0
  2257  00128C                     ___lmul:
  2258                           	callstack 29
  2259  00128C  0E00               	movlw	0
  2260  00128E  6E09               	movwf	___lmul@product^0,c
  2261  001290  0E00               	movlw	0
  2262  001292  6E0A               	movwf	(___lmul@product+1)^0,c
  2263  001294  0E00               	movlw	0
  2264  001296  6E0B               	movwf	(___lmul@product+2)^0,c
  2265  001298  0E00               	movlw	0
  2266  00129A  6E0C               	movwf	(___lmul@product+3)^0,c
  2267  00129C                     l1447:
  2268  00129C  A001               	btfss	___lmul@multiplier^0,0,c
  2269  00129E  EF53  F009         	goto	u821
  2270  0012A2  EF55  F009         	goto	u820
  2271  0012A6                     u821:
  2272  0012A6  EF5D  F009         	goto	l1451
  2273  0012AA                     u820:
  2274  0012AA  5005               	movf	___lmul@multiplicand^0,w,c
  2275  0012AC  2609               	addwf	___lmul@product^0,f,c
  2276  0012AE  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2277  0012B0  220A               	addwfc	(___lmul@product+1)^0,f,c
  2278  0012B2  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2279  0012B4  220B               	addwfc	(___lmul@product+2)^0,f,c
  2280  0012B6  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2281  0012B8  220C               	addwfc	(___lmul@product+3)^0,f,c
  2282  0012BA                     l1451:
  2283  0012BA  90D8               	bcf	status,0,c
  2284  0012BC  3605               	rlcf	___lmul@multiplicand^0,f,c
  2285  0012BE  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2286  0012C0  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2287  0012C2  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2288  0012C4  90D8               	bcf	status,0,c
  2289  0012C6  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2290  0012C8  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2291  0012CA  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2292  0012CC  3201               	rrcf	___lmul@multiplier^0,f,c
  2293  0012CE  5001               	movf	___lmul@multiplier^0,w,c
  2294  0012D0  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2295  0012D2  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2296  0012D4  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2297  0012D6  A4D8               	btfss	status,2,c
  2298  0012D8  EF70  F009         	goto	u831
  2299  0012DC  EF72  F009         	goto	u830
  2300  0012E0                     u831:
  2301  0012E0  EF4E  F009         	goto	l1447
  2302  0012E4                     u830:
  2303  0012E4  C009  F001         	movff	___lmul@product,?___lmul
  2304  0012E8  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2305  0012EC  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2306  0012F0  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2307  0012F4  0012               	return		;funcret
  2308  0012F6                     __end_of___lmul:
  2309                           	callstack 0
  2310                           
  2311 ;; *************** function ___aldiv *****************
  2312 ;; Defined at:
  2313 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aldiv.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  dividend        4   12[COMRAM] long 
  2316 ;;  divisor         4   16[COMRAM] long 
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  quotient        4   22[COMRAM] long 
  2319 ;;  sign            1   21[COMRAM] unsigned char 
  2320 ;;  counter         1   20[COMRAM] unsigned char 
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  4   12[COMRAM] long 
  2323 ;; Registers used:
  2324 ;;		wreg, status,2, status,0
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2330 ;;      Params:         8       0       0       0       0       0       0       0       0
  2331 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2333 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2334 ;;Total ram usage:       14 bytes
  2335 ;; Hardware stack levels used: 1
  2336 ;; This function calls:
  2337 ;;		Nothing
  2338 ;; This function is called by:
  2339 ;;		_map
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text14
  2344  000BA2                     __ptext14:
  2345                           	callstack 0
  2346  000BA2                     ___aldiv:
  2347                           	callstack 29
  2348  000BA2  0E00               	movlw	0
  2349  000BA4  6E16               	movwf	___aldiv@sign^0,c
  2350  000BA6  BE14               	btfsc	(___aldiv@divisor+3)^0,7,c
  2351  000BA8  EFDA  F005         	goto	u870
  2352  000BAC  EFD8  F005         	goto	u871
  2353  000BB0                     u871:
  2354  000BB0  EFE4  F005         	goto	l1485
  2355  000BB4                     u870:
  2356  000BB4  1E14               	comf	(___aldiv@divisor+3)^0,f,c
  2357  000BB6  1E13               	comf	(___aldiv@divisor+2)^0,f,c
  2358  000BB8  1E12               	comf	(___aldiv@divisor+1)^0,f,c
  2359  000BBA  6C11               	negf	___aldiv@divisor^0,c
  2360  000BBC  0E00               	movlw	0
  2361  000BBE  2212               	addwfc	(___aldiv@divisor+1)^0,f,c
  2362  000BC0  2213               	addwfc	(___aldiv@divisor+2)^0,f,c
  2363  000BC2  2214               	addwfc	(___aldiv@divisor+3)^0,f,c
  2364  000BC4  0E01               	movlw	1
  2365  000BC6  6E16               	movwf	___aldiv@sign^0,c
  2366  000BC8                     l1485:
  2367  000BC8  BE10               	btfsc	(___aldiv@dividend+3)^0,7,c
  2368  000BCA  EFEB  F005         	goto	u880
  2369  000BCE  EFE9  F005         	goto	u881
  2370  000BD2                     u881:
  2371  000BD2  EFF5  F005         	goto	l1491
  2372  000BD6                     u880:
  2373  000BD6  1E10               	comf	(___aldiv@dividend+3)^0,f,c
  2374  000BD8  1E0F               	comf	(___aldiv@dividend+2)^0,f,c
  2375  000BDA  1E0E               	comf	(___aldiv@dividend+1)^0,f,c
  2376  000BDC  6C0D               	negf	___aldiv@dividend^0,c
  2377  000BDE  0E00               	movlw	0
  2378  000BE0  220E               	addwfc	(___aldiv@dividend+1)^0,f,c
  2379  000BE2  220F               	addwfc	(___aldiv@dividend+2)^0,f,c
  2380  000BE4  2210               	addwfc	(___aldiv@dividend+3)^0,f,c
  2381  000BE6  0E01               	movlw	1
  2382  000BE8  1A16               	xorwf	___aldiv@sign^0,f,c
  2383  000BEA                     l1491:
  2384  000BEA  0E00               	movlw	0
  2385  000BEC  6E17               	movwf	___aldiv@quotient^0,c
  2386  000BEE  0E00               	movlw	0
  2387  000BF0  6E18               	movwf	(___aldiv@quotient+1)^0,c
  2388  000BF2  0E00               	movlw	0
  2389  000BF4  6E19               	movwf	(___aldiv@quotient+2)^0,c
  2390  000BF6  0E00               	movlw	0
  2391  000BF8  6E1A               	movwf	(___aldiv@quotient+3)^0,c
  2392  000BFA  5011               	movf	___aldiv@divisor^0,w,c
  2393  000BFC  1012               	iorwf	(___aldiv@divisor+1)^0,w,c
  2394  000BFE  1013               	iorwf	(___aldiv@divisor+2)^0,w,c
  2395  000C00  1014               	iorwf	(___aldiv@divisor+3)^0,w,c
  2396  000C02  B4D8               	btfsc	status,2,c
  2397  000C04  EF06  F006         	goto	u891
  2398  000C08  EF08  F006         	goto	u890
  2399  000C0C                     u891:
  2400  000C0C  EF3E  F006         	goto	l1513
  2401  000C10                     u890:
  2402  000C10  0E01               	movlw	1
  2403  000C12  6E15               	movwf	___aldiv@counter^0,c
  2404  000C14  EF12  F006         	goto	l1499
  2405  000C18                     l1497:
  2406  000C18  90D8               	bcf	status,0,c
  2407  000C1A  3611               	rlcf	___aldiv@divisor^0,f,c
  2408  000C1C  3612               	rlcf	(___aldiv@divisor+1)^0,f,c
  2409  000C1E  3613               	rlcf	(___aldiv@divisor+2)^0,f,c
  2410  000C20  3614               	rlcf	(___aldiv@divisor+3)^0,f,c
  2411  000C22  2A15               	incf	___aldiv@counter^0,f,c
  2412  000C24                     l1499:
  2413  000C24  AE14               	btfss	(___aldiv@divisor+3)^0,7,c
  2414  000C26  EF17  F006         	goto	u901
  2415  000C2A  EF19  F006         	goto	u900
  2416  000C2E                     u901:
  2417  000C2E  EF0C  F006         	goto	l1497
  2418  000C32                     u900:
  2419  000C32                     l1501:
  2420  000C32  90D8               	bcf	status,0,c
  2421  000C34  3617               	rlcf	___aldiv@quotient^0,f,c
  2422  000C36  3618               	rlcf	(___aldiv@quotient+1)^0,f,c
  2423  000C38  3619               	rlcf	(___aldiv@quotient+2)^0,f,c
  2424  000C3A  361A               	rlcf	(___aldiv@quotient+3)^0,f,c
  2425  000C3C  5011               	movf	___aldiv@divisor^0,w,c
  2426  000C3E  5C0D               	subwf	___aldiv@dividend^0,w,c
  2427  000C40  5012               	movf	(___aldiv@divisor+1)^0,w,c
  2428  000C42  580E               	subwfb	(___aldiv@dividend+1)^0,w,c
  2429  000C44  5013               	movf	(___aldiv@divisor+2)^0,w,c
  2430  000C46  580F               	subwfb	(___aldiv@dividend+2)^0,w,c
  2431  000C48  5014               	movf	(___aldiv@divisor+3)^0,w,c
  2432  000C4A  5810               	subwfb	(___aldiv@dividend+3)^0,w,c
  2433  000C4C  A0D8               	btfss	status,0,c
  2434  000C4E  EF2B  F006         	goto	u911
  2435  000C52  EF2D  F006         	goto	u910
  2436  000C56                     u911:
  2437  000C56  EF36  F006         	goto	l1509
  2438  000C5A                     u910:
  2439  000C5A  5011               	movf	___aldiv@divisor^0,w,c
  2440  000C5C  5E0D               	subwf	___aldiv@dividend^0,f,c
  2441  000C5E  5012               	movf	(___aldiv@divisor+1)^0,w,c
  2442  000C60  5A0E               	subwfb	(___aldiv@dividend+1)^0,f,c
  2443  000C62  5013               	movf	(___aldiv@divisor+2)^0,w,c
  2444  000C64  5A0F               	subwfb	(___aldiv@dividend+2)^0,f,c
  2445  000C66  5014               	movf	(___aldiv@divisor+3)^0,w,c
  2446  000C68  5A10               	subwfb	(___aldiv@dividend+3)^0,f,c
  2447  000C6A  8017               	bsf	___aldiv@quotient^0,0,c
  2448  000C6C                     l1509:
  2449  000C6C  90D8               	bcf	status,0,c
  2450  000C6E  3214               	rrcf	(___aldiv@divisor+3)^0,f,c
  2451  000C70  3213               	rrcf	(___aldiv@divisor+2)^0,f,c
  2452  000C72  3212               	rrcf	(___aldiv@divisor+1)^0,f,c
  2453  000C74  3211               	rrcf	___aldiv@divisor^0,f,c
  2454  000C76  2E15               	decfsz	___aldiv@counter^0,f,c
  2455  000C78  EF19  F006         	goto	l1501
  2456  000C7C                     l1513:
  2457  000C7C  5016               	movf	___aldiv@sign^0,w,c
  2458  000C7E  B4D8               	btfsc	status,2,c
  2459  000C80  EF44  F006         	goto	u921
  2460  000C84  EF46  F006         	goto	u920
  2461  000C88                     u921:
  2462  000C88  EF4E  F006         	goto	l1517
  2463  000C8C                     u920:
  2464  000C8C  1E1A               	comf	(___aldiv@quotient+3)^0,f,c
  2465  000C8E  1E19               	comf	(___aldiv@quotient+2)^0,f,c
  2466  000C90  1E18               	comf	(___aldiv@quotient+1)^0,f,c
  2467  000C92  6C17               	negf	___aldiv@quotient^0,c
  2468  000C94  0E00               	movlw	0
  2469  000C96  2218               	addwfc	(___aldiv@quotient+1)^0,f,c
  2470  000C98  2219               	addwfc	(___aldiv@quotient+2)^0,f,c
  2471  000C9A  221A               	addwfc	(___aldiv@quotient+3)^0,f,c
  2472  000C9C                     l1517:
  2473  000C9C  C017  F00D         	movff	___aldiv@quotient,?___aldiv
  2474  000CA0  C018  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
  2475  000CA4  C019  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
  2476  000CA8  C01A  F010         	movff	___aldiv@quotient+3,?___aldiv+3
  2477  000CAC  0012               	return		;funcret
  2478  000CAE                     __end_of___aldiv:
  2479                           	callstack 0
  2480                           
  2481 ;; *************** function _Uart_Send_String *****************
  2482 ;; Defined at:
  2483 ;;		line 35 in file "uart.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;  info            2    1[COMRAM] PTR unsigned char 
  2486 ;;		 -> buffer_tx(14), 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2498 ;;      Params:         2       0       0       0       0       0       0       0       0
  2499 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2501 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2502 ;;Total ram usage:        2 bytes
  2503 ;; Hardware stack levels used: 1
  2504 ;; Hardware stack levels required when called: 1
  2505 ;; This function calls:
  2506 ;;		_Uart_Send_Char
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text15
  2513  00146A                     __ptext15:
  2514                           	callstack 0
  2515  00146A                     _Uart_Send_String:
  2516                           	callstack 29
  2517  00146A                     
  2518                           ;uart.c: 35: void Uart_Send_String(char *info);uart.c: 36: {;uart.c: 37:     while(*info
      +                          )
  2519  00146A  EF40  F00A         	goto	l1585
  2520  00146E                     l1581:
  2521                           
  2522                           ;uart.c: 38:     {;uart.c: 39:         Uart_Send_Char(*info++);
  2523  00146E  C002  FFD9         	movff	Uart_Send_String@info,fsr2l
  2524  001472  C003  FFDA         	movff	Uart_Send_String@info+1,fsr2h
  2525  001476  50DF               	movf	indf2,w,c
  2526  001478  EC5A  F00A         	call	_Uart_Send_Char
  2527  00147C  4A02               	infsnz	Uart_Send_String@info^0,f,c
  2528  00147E  2A03               	incf	(Uart_Send_String@info+1)^0,f,c
  2529  001480                     l1585:
  2530                           
  2531                           ;uart.c: 37:     while(*info)
  2532  001480  C002  FFD9         	movff	Uart_Send_String@info,fsr2l
  2533  001484  C003  FFDA         	movff	Uart_Send_String@info+1,fsr2h
  2534  001488  50DF               	movf	indf2,w,c
  2535  00148A  A4D8               	btfss	status,2,c
  2536  00148C  EF4A  F00A         	goto	u971
  2537  001490  EF4C  F00A         	goto	u970
  2538  001494                     u971:
  2539  001494  EF37  F00A         	goto	l1581
  2540  001498                     u970:
  2541  001498  0012               	return		;funcret
  2542  00149A                     __end_of_Uart_Send_String:
  2543                           	callstack 0
  2544                           
  2545 ;; *************** function _Uart_Send_Char *****************
  2546 ;; Defined at:
  2547 ;;		line 29 in file "uart.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  txData          1    wreg     unsigned char 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  txData          1    0[COMRAM] unsigned char 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      void 
  2554 ;; Registers used:
  2555 ;;		wreg
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2561 ;;      Params:         0       0       0       0       0       0       0       0       0
  2562 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2564 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2565 ;;Total ram usage:        1 bytes
  2566 ;; Hardware stack levels used: 1
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_Uart_Send_String
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text16
  2575  0014B4                     __ptext16:
  2576                           	callstack 0
  2577  0014B4                     _Uart_Send_Char:
  2578                           	callstack 29
  2579                           
  2580                           ;incstack = 0
  2581                           ;Uart_Send_Char@txData stored from wreg
  2582  0014B4  6E01               	movwf	Uart_Send_Char@txData^0,c
  2583  0014B6                     l83:
  2584  0014B6  A2AC               	btfss	172,1,c	;volatile
  2585  0014B8  EF60  F00A         	goto	u811
  2586  0014BC  EF62  F00A         	goto	u810
  2587  0014C0                     u811:
  2588  0014C0  EF5B  F00A         	goto	l83
  2589  0014C4                     u810:
  2590  0014C4                     
  2591                           ;uart.c: 32:     TXREG = txData;
  2592  0014C4  C001  FFAD         	movff	Uart_Send_Char@txData,4013	;volatile
  2593  0014C8  0012               	return		;funcret
  2594  0014CA                     __end_of_Uart_Send_Char:
  2595                           	callstack 0
  2596                           
  2597 ;; *************** function _Uart_Init *****************
  2598 ;; Defined at:
  2599 ;;		line 11 in file "uart.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  baud            4   13[COMRAM] unsigned long 
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  vx              2   21[COMRAM] unsigned int 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, status,2, status,0, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2613 ;;      Params:         4       0       0       0       0       0       0       0       0
  2614 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2615 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2616 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2617 ;;Total ram usage:       10 bytes
  2618 ;; Hardware stack levels used: 1
  2619 ;; Hardware stack levels required when called: 1
  2620 ;; This function calls:
  2621 ;;		___lldiv
  2622 ;; This function is called by:
  2623 ;;		_main
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text17
  2628  00121E                     __ptext17:
  2629                           	callstack 0
  2630  00121E                     _Uart_Init:
  2631                           	callstack 29
  2632  00121E                     
  2633                           ;uart.c: 11: void Uart_Init(unsigned long baud);uart.c: 12: {;uart.c: 13:     TRISCbits.
      +                          RC6 = 0;
  2634  00121E  9C94               	bcf	148,6,c	;volatile
  2635                           
  2636                           ;uart.c: 14:     TRISCbits.RC7 = 1;
  2637  001220  8E94               	bsf	148,7,c	;volatile
  2638  001222                     
  2639                           ;uart.c: 15:     TXSTA = 0x24;
  2640  001222  0E24               	movlw	36
  2641  001224  6EAC               	movwf	172,c	;volatile
  2642                           
  2643                           ;uart.c: 16:     RCSTA = 0x90;
  2644  001226  0E90               	movlw	144
  2645  001228  6EAB               	movwf	171,c	;volatile
  2646                           
  2647                           ;uart.c: 17:     BAUDCON = 0x00;
  2648  00122A  0E00               	movlw	0
  2649  00122C  6EB8               	movwf	184,c	;volatile
  2650  00122E                     
  2651                           ;uart.c: 18:     BAUDCONbits.BRG16 = 1;
  2652  00122E  86B8               	bsf	184,3,c	;volatile
  2653  001230                     
  2654                           ;uart.c: 19:     unsigned int vx = (48000000/(baud*4))-1;
  2655  001230  0E00               	movlw	0
  2656  001232  6E01               	movwf	___lldiv@dividend^0,c
  2657  001234  0E6C               	movlw	108
  2658  001236  6E02               	movwf	(___lldiv@dividend+1)^0,c
  2659  001238  0EDC               	movlw	220
  2660  00123A  6E03               	movwf	(___lldiv@dividend+2)^0,c
  2661  00123C  0E02               	movlw	2
  2662  00123E  6E04               	movwf	(___lldiv@dividend+3)^0,c
  2663  001240  C00E  F012         	movff	Uart_Init@baud,??_Uart_Init
  2664  001244  C00F  F013         	movff	Uart_Init@baud+1,??_Uart_Init+1
  2665  001248  C010  F014         	movff	Uart_Init@baud+2,??_Uart_Init+2
  2666  00124C  C011  F015         	movff	Uart_Init@baud+3,??_Uart_Init+3
  2667  001250  0E02               	movlw	2
  2668  001252                     u945:
  2669  001252  90D8               	bcf	status,0,c
  2670  001254  3612               	rlcf	??_Uart_Init^0,f,c
  2671  001256  3613               	rlcf	(??_Uart_Init+1)^0,f,c
  2672  001258  3614               	rlcf	(??_Uart_Init+2)^0,f,c
  2673  00125A  3615               	rlcf	(??_Uart_Init+3)^0,f,c
  2674  00125C  2EE8               	decfsz	wreg,f,c
  2675  00125E  EF29  F009         	goto	u945
  2676  001262  C012  F005         	movff	??_Uart_Init,___lldiv@divisor
  2677  001266  C013  F006         	movff	??_Uart_Init+1,___lldiv@divisor+1
  2678  00126A  C014  F007         	movff	??_Uart_Init+2,___lldiv@divisor+2
  2679  00126E  C015  F008         	movff	??_Uart_Init+3,___lldiv@divisor+3
  2680  001272  EC80  F008         	call	___lldiv	;wreg free
  2681  001276  0EFF               	movlw	255
  2682  001278  2401               	addwf	?___lldiv^0,w,c
  2683  00127A  6E16               	movwf	Uart_Init@vx^0,c
  2684  00127C  0EFF               	movlw	255
  2685  00127E  2002               	addwfc	(?___lldiv+1)^0,w,c
  2686  001280  6E17               	movwf	(Uart_Init@vx+1)^0,c
  2687  001282                     
  2688                           ;uart.c: 20:     SPBRG = vx & 0x00FF;
  2689  001282  C016  FFAF         	movff	Uart_Init@vx,4015	;volatile
  2690  001286                     
  2691                           ;uart.c: 21:     SPBRGH = vx >> 8;
  2692  001286  5017               	movf	(Uart_Init@vx+1)^0,w,c
  2693  001288  6EB0               	movwf	176,c	;volatile
  2694  00128A  0012               	return		;funcret
  2695  00128C                     __end_of_Uart_Init:
  2696                           	callstack 0
  2697                           
  2698 ;; *************** function ___lldiv *****************
  2699 ;; Defined at:
  2700 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__lldiv.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;  dividend        4    0[COMRAM] unsigned long 
  2703 ;;  divisor         4    4[COMRAM] unsigned long 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  quotient        4    8[COMRAM] unsigned long 
  2706 ;;  counter         1   12[COMRAM] unsigned char 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  4    0[COMRAM] unsigned long 
  2709 ;; Registers used:
  2710 ;;		wreg, status,2, status,0
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2716 ;;      Params:         8       0       0       0       0       0       0       0       0
  2717 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2718 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2719 ;;      Totals:        13       0       0       0       0       0       0       0       0
  2720 ;;Total ram usage:       13 bytes
  2721 ;; Hardware stack levels used: 1
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_Uart_Init
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text18
  2730  001100                     __ptext18:
  2731                           	callstack 0
  2732  001100                     ___lldiv:
  2733                           	callstack 29
  2734  001100  0E00               	movlw	0
  2735  001102  6E09               	movwf	___lldiv@quotient^0,c
  2736  001104  0E00               	movlw	0
  2737  001106  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  2738  001108  0E00               	movlw	0
  2739  00110A  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  2740  00110C  0E00               	movlw	0
  2741  00110E  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  2742  001110  5005               	movf	___lldiv@divisor^0,w,c
  2743  001112  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  2744  001114  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  2745  001116  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  2746  001118  B4D8               	btfsc	status,2,c
  2747  00111A  EF91  F008         	goto	u841
  2748  00111E  EF93  F008         	goto	u840
  2749  001122                     u841:
  2750  001122  EFC9  F008         	goto	l148
  2751  001126                     u840:
  2752  001126  0E01               	movlw	1
  2753  001128  6E0D               	movwf	___lldiv@counter^0,c
  2754  00112A  EF9D  F008         	goto	l1463
  2755  00112E                     l1461:
  2756  00112E  90D8               	bcf	status,0,c
  2757  001130  3605               	rlcf	___lldiv@divisor^0,f,c
  2758  001132  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  2759  001134  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  2760  001136  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  2761  001138  2A0D               	incf	___lldiv@counter^0,f,c
  2762  00113A                     l1463:
  2763  00113A  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  2764  00113C  EFA2  F008         	goto	u851
  2765  001140  EFA4  F008         	goto	u850
  2766  001144                     u851:
  2767  001144  EF97  F008         	goto	l1461
  2768  001148                     u850:
  2769  001148                     l1465:
  2770  001148  90D8               	bcf	status,0,c
  2771  00114A  3609               	rlcf	___lldiv@quotient^0,f,c
  2772  00114C  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  2773  00114E  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  2774  001150  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  2775  001152  5005               	movf	___lldiv@divisor^0,w,c
  2776  001154  5C01               	subwf	___lldiv@dividend^0,w,c
  2777  001156  5006               	movf	(___lldiv@divisor+1)^0,w,c
  2778  001158  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  2779  00115A  5007               	movf	(___lldiv@divisor+2)^0,w,c
  2780  00115C  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  2781  00115E  5008               	movf	(___lldiv@divisor+3)^0,w,c
  2782  001160  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  2783  001162  A0D8               	btfss	status,0,c
  2784  001164  EFB6  F008         	goto	u861
  2785  001168  EFB8  F008         	goto	u860
  2786  00116C                     u861:
  2787  00116C  EFC1  F008         	goto	l1473
  2788  001170                     u860:
  2789  001170  5005               	movf	___lldiv@divisor^0,w,c
  2790  001172  5E01               	subwf	___lldiv@dividend^0,f,c
  2791  001174  5006               	movf	(___lldiv@divisor+1)^0,w,c
  2792  001176  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  2793  001178  5007               	movf	(___lldiv@divisor+2)^0,w,c
  2794  00117A  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  2795  00117C  5008               	movf	(___lldiv@divisor+3)^0,w,c
  2796  00117E  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  2797  001180  8009               	bsf	___lldiv@quotient^0,0,c
  2798  001182                     l1473:
  2799  001182  90D8               	bcf	status,0,c
  2800  001184  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  2801  001186  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  2802  001188  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  2803  00118A  3205               	rrcf	___lldiv@divisor^0,f,c
  2804  00118C  2E0D               	decfsz	___lldiv@counter^0,f,c
  2805  00118E  EFA4  F008         	goto	l1465
  2806  001192                     l148:
  2807  001192  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2808  001196  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2809  00119A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2810  00119E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2811  0011A2  0012               	return		;funcret
  2812  0011A4                     __end_of___lldiv:
  2813                           	callstack 0
  2814                           
  2815 ;; *************** function _ADC_Read *****************
  2816 ;; Defined at:
  2817 ;;		line 18 in file "adc.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  ch              1    wreg     unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  ch              1    2[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  2    0[COMRAM] unsigned int 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2831 ;;      Params:         2       0       0       0       0       0       0       0       0
  2832 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2834 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2835 ;;Total ram usage:        3 bytes
  2836 ;; Hardware stack levels used: 1
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text19
  2845  0013AA                     __ptext19:
  2846                           	callstack 0
  2847  0013AA                     _ADC_Read:
  2848                           	callstack 30
  2849                           
  2850                           ;incstack = 0
  2851                           ;ADC_Read@ch stored from wreg
  2852  0013AA  6E03               	movwf	ADC_Read@ch^0,c
  2853  0013AC                     
  2854                           ;adc.c: 18: unsigned int ADC_Read(unsigned char ch);adc.c: 19: {;adc.c: 20:     if(ch > 
      +                          13){
  2855  0013AC  0E0D               	movlw	13
  2856  0013AE  6403               	cpfsgt	ADC_Read@ch^0,c
  2857  0013B0  EFDC  F009         	goto	u951
  2858  0013B4  EFDE  F009         	goto	u950
  2859  0013B8                     u951:
  2860  0013B8  EFE4  F009         	goto	l1559
  2861  0013BC                     u950:
  2862  0013BC                     
  2863                           ;adc.c: 21:         return 0;
  2864  0013BC  0E00               	movlw	0
  2865  0013BE  6E02               	movwf	(?_ADC_Read+1)^0,c
  2866  0013C0  0E00               	movlw	0
  2867  0013C2  6E01               	movwf	?_ADC_Read^0,c
  2868  0013C4  EFF7  F009         	goto	l46
  2869  0013C8                     l1559:
  2870                           
  2871                           ;adc.c: 23:         ADCON0 = 0x00;
  2872  0013C8  0E00               	movlw	0
  2873  0013CA  6EC2               	movwf	194,c	;volatile
  2874  0013CC                     
  2875                           ;adc.c: 24:         ADCON0 = (ch << 2);
  2876  0013CC  4403               	rlncf	ADC_Read@ch^0,w,c
  2877  0013CE  46E8               	rlncf	wreg,f,c
  2878  0013D0  0BFC               	andlw	252
  2879  0013D2  6EC2               	movwf	194,c	;volatile
  2880  0013D4                     
  2881                           ;adc.c: 25:         ADCON0bits.ADON = 1;
  2882  0013D4  80C2               	bsf	194,0,c	;volatile
  2883  0013D6                     
  2884                           ;adc.c: 26:         ADCON0bits.GO_DONE = 1;
  2885  0013D6  82C2               	bsf	194,1,c	;volatile
  2886  0013D8                     l48:
  2887  0013D8  B2C2               	btfsc	194,1,c	;volatile
  2888  0013DA  EFF1  F009         	goto	u961
  2889  0013DE  EFF3  F009         	goto	u960
  2890  0013E2                     u961:
  2891  0013E2  EFEC  F009         	goto	l48
  2892  0013E6                     u960:
  2893  0013E6                     
  2894                           ;adc.c: 28:         return ADRES;
  2895  0013E6  CFC3 F001          	movff	4035,?_ADC_Read	;volatile
  2896  0013EA  CFC4 F002          	movff	4036,?_ADC_Read+1	;volatile
  2897  0013EE                     l46:
  2898  0013EE  0012               	return		;funcret
  2899  0013F0                     __end_of_ADC_Read:
  2900                           	callstack 0
  2901                           
  2902 ;; *************** function _ADC_Init *****************
  2903 ;; Defined at:
  2904 ;;		line 11 in file "adc.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;  p_ang           1    wreg     unsigned char 
  2907 ;; Auto vars:     Size  Location     Type
  2908 ;;  p_ang           1    0[COMRAM] unsigned char 
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      void 
  2911 ;; Registers used:
  2912 ;;		wreg, status,2
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2918 ;;      Params:         0       0       0       0       0       0       0       0       0
  2919 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2920 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2921 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2922 ;;Total ram usage:        1 bytes
  2923 ;; Hardware stack levels used: 1
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		_main
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text20
  2932  0014CA                     __ptext20:
  2933                           	callstack 0
  2934  0014CA                     _ADC_Init:
  2935                           	callstack 30
  2936                           
  2937                           ;incstack = 0
  2938                           ;ADC_Init@p_ang stored from wreg
  2939  0014CA  6E01               	movwf	ADC_Init@p_ang^0,c
  2940  0014CC                     
  2941                           ;adc.c: 11: void ADC_Init(unsigned char p_ang);adc.c: 12: {;adc.c: 13:     ADCON1 = p_an
      +                          g;
  2942  0014CC  C001  FFC1         	movff	ADC_Init@p_ang,4033	;volatile
  2943  0014D0                     
  2944                           ;adc.c: 14:     ADCON0 = 0x00;
  2945  0014D0  0E00               	movlw	0
  2946  0014D2  6EC2               	movwf	194,c	;volatile
  2947  0014D4                     
  2948                           ;adc.c: 15:     ADCON2 = 0x8F;
  2949  0014D4  0E8F               	movlw	143
  2950  0014D6  6EC0               	movwf	192,c	;volatile
  2951  0014D8  0012               	return		;funcret
  2952  0014DA                     __end_of_ADC_Init:
  2953                           	callstack 0
  2954                           
  2955                           	psect	rparam
  2956  0000                     
  2957                           	psect	idloc
  2958                           
  2959                           ;Config register IDLOC0 @ 0x200000
  2960                           ;	unspecified, using default values
  2961  200000                     	org	2097152
  2962  200000  FF                 	db	255
  2963                           
  2964                           ;Config register IDLOC1 @ 0x200001
  2965                           ;	unspecified, using default values
  2966  200001                     	org	2097153
  2967  200001  FF                 	db	255
  2968                           
  2969                           ;Config register IDLOC2 @ 0x200002
  2970                           ;	unspecified, using default values
  2971  200002                     	org	2097154
  2972  200002  FF                 	db	255
  2973                           
  2974                           ;Config register IDLOC3 @ 0x200003
  2975                           ;	unspecified, using default values
  2976  200003                     	org	2097155
  2977  200003  FF                 	db	255
  2978                           
  2979                           ;Config register IDLOC4 @ 0x200004
  2980                           ;	unspecified, using default values
  2981  200004                     	org	2097156
  2982  200004  FF                 	db	255
  2983                           
  2984                           ;Config register IDLOC5 @ 0x200005
  2985                           ;	unspecified, using default values
  2986  200005                     	org	2097157
  2987  200005  FF                 	db	255
  2988                           
  2989                           ;Config register IDLOC6 @ 0x200006
  2990                           ;	unspecified, using default values
  2991  200006                     	org	2097158
  2992  200006  FF                 	db	255
  2993                           
  2994                           ;Config register IDLOC7 @ 0x200007
  2995                           ;	unspecified, using default values
  2996  200007                     	org	2097159
  2997  200007  FF                 	db	255
  2998                           
  2999                           	psect	config
  3000                           
  3001                           ;Config register CONFIG1L @ 0x300000
  3002                           ;	PLL Prescaler Selection bits
  3003                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  3004                           ;	System Clock Postscaler Selection bits
  3005                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3006                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3007                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  3008  300000                     	org	3145728
  3009  300000  21                 	db	33
  3010                           
  3011                           ;Config register CONFIG1H @ 0x300001
  3012                           ;	Oscillator Selection bits
  3013                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  3014                           ;	Fail-Safe Clock Monitor Enable bit
  3015                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3016                           ;	Internal/External Oscillator Switchover bit
  3017                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3018  300001                     	org	3145729
  3019  300001  0E                 	db	14
  3020                           
  3021                           ;Config register CONFIG2L @ 0x300002
  3022                           ;	Power-up Timer Enable bit
  3023                           ;	PWRT = OFF, PWRT disabled
  3024                           ;	Brown-out Reset Enable bits
  3025                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3026                           ;	Brown-out Reset Voltage bits
  3027                           ;	BORV = 3, Minimum setting 2.05V
  3028                           ;	USB Voltage Regulator Enable bit
  3029                           ;	VREGEN = OFF, USB voltage regulator disabled
  3030  300002                     	org	3145730
  3031  300002  19                 	db	25
  3032                           
  3033                           ;Config register CONFIG2H @ 0x300003
  3034                           ;	Watchdog Timer Enable bit
  3035                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3036                           ;	Watchdog Timer Postscale Select bits
  3037                           ;	WDTPS = 32768, 1:32768
  3038  300003                     	org	3145731
  3039  300003  1E                 	db	30
  3040                           
  3041                           ; Padding undefined space
  3042  300004                     	org	3145732
  3043  300004  FF                 	db	255
  3044                           
  3045                           ;Config register CONFIG3H @ 0x300005
  3046                           ;	CCP2 MUX bit
  3047                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  3048                           ;	PORTB A/D Enable bit
  3049                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3050                           ;	Low-Power Timer 1 Oscillator Enable bit
  3051                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3052                           ;	MCLR Pin Enable bit
  3053                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3054  300005                     	org	3145733
  3055  300005  81                 	db	129
  3056                           
  3057                           ;Config register CONFIG4L @ 0x300006
  3058                           ;	Stack Full/Underflow Reset Enable bit
  3059                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3060                           ;	Single-Supply ICSP Enable bit
  3061                           ;	LVP = OFF, Single-Supply ICSP disabled
  3062                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3063                           ;	ICPRT = OFF, ICPORT disabled
  3064                           ;	Extended Instruction Set Enable bit
  3065                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3066                           ;	Background Debugger Enable bit
  3067                           ;	DEBUG = 0x1, unprogrammed default
  3068  300006                     	org	3145734
  3069  300006  81                 	db	129
  3070                           
  3071                           ; Padding undefined space
  3072  300007                     	org	3145735
  3073  300007  FF                 	db	255
  3074                           
  3075                           ;Config register CONFIG5L @ 0x300008
  3076                           ;	Code Protection bit
  3077                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3078                           ;	Code Protection bit
  3079                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3080                           ;	Code Protection bit
  3081                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3082                           ;	Code Protection bit
  3083                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3084  300008                     	org	3145736
  3085  300008  0F                 	db	15
  3086                           
  3087                           ;Config register CONFIG5H @ 0x300009
  3088                           ;	Boot Block Code Protection bit
  3089                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3090                           ;	Data EEPROM Code Protection bit
  3091                           ;	CPD = OFF, Data EEPROM is not code-protected
  3092  300009                     	org	3145737
  3093  300009  C0                 	db	192
  3094                           
  3095                           ;Config register CONFIG6L @ 0x30000A
  3096                           ;	Write Protection bit
  3097                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3098                           ;	Write Protection bit
  3099                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3100                           ;	Write Protection bit
  3101                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3102                           ;	Write Protection bit
  3103                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3104  30000A                     	org	3145738
  3105  30000A  0F                 	db	15
  3106                           
  3107                           ;Config register CONFIG6H @ 0x30000B
  3108                           ;	Configuration Register Write Protection bit
  3109                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3110                           ;	Boot Block Write Protection bit
  3111                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3112                           ;	Data EEPROM Write Protection bit
  3113                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3114  30000B                     	org	3145739
  3115  30000B  E0                 	db	224
  3116                           
  3117                           ;Config register CONFIG7L @ 0x30000C
  3118                           ;	Table Read Protection bit
  3119                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3120                           ;	Table Read Protection bit
  3121                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3122                           ;	Table Read Protection bit
  3123                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3124                           ;	Table Read Protection bit
  3125                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3126  30000C                     	org	3145740
  3127  30000C  0F                 	db	15
  3128                           
  3129                           ;Config register CONFIG7H @ 0x30000D
  3130                           ;	Boot Block Table Read Protection bit
  3131                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3132  30000D                     	org	3145741
  3133  30000D  40                 	db	64
  3134                           tosu	equ	0xFFF
  3135                           tosh	equ	0xFFE
  3136                           tosl	equ	0xFFD
  3137                           stkptr	equ	0xFFC
  3138                           pclatu	equ	0xFFB
  3139                           pclath	equ	0xFFA
  3140                           pcl	equ	0xFF9
  3141                           tblptru	equ	0xFF8
  3142                           tblptrh	equ	0xFF7
  3143                           tblptrl	equ	0xFF6
  3144                           tablat	equ	0xFF5
  3145                           prodh	equ	0xFF4
  3146                           prodl	equ	0xFF3
  3147                           indf0	equ	0xFEF
  3148                           postinc0	equ	0xFEE
  3149                           postdec0	equ	0xFED
  3150                           preinc0	equ	0xFEC
  3151                           plusw0	equ	0xFEB
  3152                           fsr0h	equ	0xFEA
  3153                           fsr0l	equ	0xFE9
  3154                           wreg	equ	0xFE8
  3155                           indf1	equ	0xFE7
  3156                           postinc1	equ	0xFE6
  3157                           postdec1	equ	0xFE5
  3158                           preinc1	equ	0xFE4
  3159                           plusw1	equ	0xFE3
  3160                           fsr1h	equ	0xFE2
  3161                           fsr1l	equ	0xFE1
  3162                           bsr	equ	0xFE0
  3163                           indf2	equ	0xFDF
  3164                           postinc2	equ	0xFDE
  3165                           postdec2	equ	0xFDD
  3166                           preinc2	equ	0xFDC
  3167                           plusw2	equ	0xFDB
  3168                           fsr2h	equ	0xFDA
  3169                           fsr2l	equ	0xFD9
  3170                           status	equ	0xFD8

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     14      68
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 14
		 -> buffer_tx(BANK0[14]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 14
		 -> buffer_tx(BANK0[14]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S987_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 14
		 -> buffer_tx(BANK0[14]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 14
		 -> buffer_tx(BANK0[14]), 

    Uart_Send_String@info	PTR unsigned char  size(2) Largest target is 14
		 -> buffer_tx(BANK0[14]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _map->___aldiv
    ___aldiv->___lmul
    _Uart_Send_String->_Uart_Send_Char
    _Uart_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    7925
                                              8 BANK0      6     6      0
                           _ADC_Init
                           _ADC_Read
                          _Uart_Init
                   _Uart_Send_String
                                _map
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             20    10     10    5834
                                             85 COMRAM    10     0     10
                                              0 BANK0      8     8      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5483
                                             77 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    5130
                                             59 COMRAM    18    12      6
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    3759
                                             27 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _map                                                 20     0     20    1356
                                             26 COMRAM    20     0     20
                           _ADC_Read (ARG)
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Uart_Send_String                                     2     0      2     143
                                              1 COMRAM     2     0      2
                     _Uart_Send_Char
 ---------------------------------------------------------------------------------
 (2) _Uart_Send_Char                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Uart_Init                                           10     6      4     457
                                             13 COMRAM    10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             3     1      2      44
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Uart_Init
     ___lldiv
   _Uart_Send_String
     _Uart_Send_Char
   _map
     _ADC_Read (ARG)
     ___aldiv (ARG)
       ___lmul (ARG)
     ___lmul (ARG)
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
             _fputs
               _fputc
             _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      E      44       5       42.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A3      20        0.0%
DATA                 0      0      A3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Sep 30 17:52:47 2021

                       l42 14D8                         l50 13E6                         l19 121C  
                       l46 13EE                         l48 13D8                         l83 14B6  
                       l92 1498                         l77 128A                         l86 14C8  
  __size_of_Uart_Send_Char 0016                        l200 0CAC                        l132 12E4  
                      l133 12F4                        l155 11A2                        l148 1192  
                      l566 0E9E                        l559 0E7E                        l576 0F6E  
                      l824 1080                        l569 0F4E                        l834 0846  
                      l827 10C2                        l844 0A0E                        l836 084E  
                      l829 10FE                        l855 134E                        l856 1356  
                      l849 0BA0                        l868 1038                        l876 1432  
                      l885 1468                        l879 14DA                        l799 13A8  
                      u601 0DB6                        u610 0DDA                        u611 0DD6  
                      u620 0E04                        u540 0F82                        u700 10D2  
                      u621 0E00                        u541 0F7E                        u701 10CE  
                      u630 0E44                        u550 0F94                        u710 081E  
                      u631 0E40                        u551 0F90                        u711 081A  
                      u640 0EBE                        u560 0FBC                        u720 083A  
                      u800 0B22                        u641 0EBA                        u561 0FB8  
                      u721 0836                        u801 0B1E                        u810 14C4  
                      u650 0EE8                        u570 0FF2                        u730 0984  
                      u811 14C0                        u651 0EE4                        u571 0FEE  
                      u731 0980                        u900 0C32                        u820 12AA  
                      u660 0F16                        u580 1432                        u740 09A2  
                      u901 0C2E                        u821 12A6                        u661 0F12  
                      u581 142E                        u741 099E                        u910 0C5A  
                      u830 12E4                        u590 145C                        u670 104A  
                      u750 09BC                        u911 0C56                        u831 12E0  
                      u591 1458                        u671 1046                        u751 09B8  
                      u840 1126                        u920 0C8C                        u680 106C  
                      u760 09D6                        u841 1122                        u921 0C88  
                      u681 1068                        u761 09D2                        u850 1148  
                      u690 10C2                        u770 09E6                        u930 134E  
                      u851 1144                        u691 10BE                        u771 09E2  
                      u931 134A                        u860 1170                        u780 0A34  
                      u861 116C                        u781 0A30                        u950 13BC  
                      u870 0BB4                        u790 0A7C                        u951 13B8  
                      u871 0BB0                        u791 0A78                        u960 13E6  
                      u880 0BD6                        u961 13E2                        u945 1252  
                      u881 0BD2                        u970 1498                        u890 0C10  
                      u971 1494                        u891 0C0C                        u980 0CE0  
                      u981 0CD6                        u990 0CFC                        u991 0CF4  
                      u988 0CE4                        u998 0D00                        _pad 103A  
                      _map 11A4                        wreg 000FE8                       l1301 145C  
                     l1311 0DE2                       l1321 0E64                       l1313 0DF6  
                     l1305 0DB0                       l1401 0A10                       l1323 0E66  
                     l1315 0E04                       l1307 0DBC                       l1331 0EC6  
                     l1411 0A7C                       l1403 0A34                       l1501 0C32  
                     l1325 0E78                       l1317 0E16                       l1309 0DDA  
                     l1341 0F48                       l1333 0EDA                       l1421 0B30  
                     l1413 0AC6                       l1405 0A42                       l1511 0C76  
                     l1503 0C3C                       l1319 0E44                       l1335 0EE8  
                     l1327 0EA0                       l1351 1078                       l1343 103A  
                     l1423 0B44                       l1407 0A54                       l1441 14B6  
                     l1505 0C5A                       l1513 0C7C                       l1337 0F16  
                     l1329 0EBE                       l1281 0FBC                       l1273 0F70  
                     l1361 10E6                       l1353 108C                       l1345 104A  
                     l1417 0AFE                       l1409 0A58                       l1433 0B6A  
                     l1521 12F6                       l1601 0D62                       l1443 14C4  
                     l1515 0C8C                       l1507 0C6A                       l1451 12BA  
                     l1339 0F36                       l1283 0FF2                       l1275 0F82  
                     l1291 140E                       l1355 10A0                       l1347 105E  
                     l1371 083A                       l1435 0B8E                       l1419 0B22  
                     l1427 0B50                       l1523 12FE                       l1603 0D8C  
                     l1533 14CC                       l1461 112E                       l1541 1222  
                     l1517 0C9C                       l1509 0C6C                       l1453 12C4  
                     l1445 128C                       l1277 0F94                       l1293 1412  
                     l1357 10A4                       l1349 106C                       l1381 0902  
                     l1373 0876                       l1365 080E                       l1429 0B5E  
                     l1525 130C                       l1605 0D98                       l1535 14D0  
                     l1551 13AC                       l1471 1180                       l1463 113A  
                     l1455 1100                       l1543 122E                       l1447 129C  
                     l1279 0F9E                       l1287 13F0                       l1295 1434  
                     l1359 10D2                       l1391 09A2                       l1383 0908  
                     l1375 087E                       l1367 081E                       l1527 1332  
                     l1537 14D4                       l1561 13CC                       l1553 13BC  
                     l1473 1182                       l1465 1148                       l1457 1110  
                     l1545 1230                       l1481 0BB4                       l1449 12AA  
                     l1529 11A4                       l1289 13FC                       l1297 1440  
                     l1393 09BC                       l1385 090E                       l1377 0886  
                     l1369 0820                       l1563 13D4                       l1475 118C  
                     l1467 1152                       l1459 1126                       l1547 1282  
                     l1539 121E                       l1491 0BEA                       l1483 0BC4  
                     l1299 1444                       l1395 09D6                       l1379 088C  
                     l1387 0972                       l1571 1372                       l1565 13D6  
                     l1469 1170                       l1549 1286                       l1581 146E  
                     l1493 0BFA                       l1485 0BC8                       l1477 0BA2  
                     l1389 0984                       l1397 09E6                       l1573 137A  
                     l1559 13C8                       l1583 147C                       l1495 0C10  
                     l1487 0BD6                       l1479 0BA6                       l1575 1396  
                     l1567 1358                       l1591 0CB6                       l1585 1480  
                     l1497 0C18                       l1489 0BE6                       l1569 136A  
                     l1593 0CB8                       l1579 146A                       l1499 0C24  
                     l1595 0CCC                       l1587 0CAE                       l1597 0CEA  
                     l1589 0CB4                       l1599 0D06                       ?_map 001B  
                     ?_pad 0011                       STR_1 0801                       u1007 0DA0  
                     _dbuf 0068                       _main 0CAE                       _prec 0064  
                     _nout 0060                       pad@i 0018                       pad@p 0015  
                     fsr1h 000FE2                       fsr2h 000FDA                       indf2 000FDF  
                     fsr1l 000FE1                       pad@w 001A                       map@x 001B  
                     fsr2l 000FD9                       _utoa 080E           __end_of_ADC_Init 14DA  
         __end_of_ADC_Read 13F0                       start 0000               ___param_bank 000000  
                    ??_map 002F                      ??_pad 0017            __end_of___aldiv 0CAE  
                    ?_main 0001                      _ADRES 000FC3            __end_of___lldiv 11A4  
                    ?_utoa 001C            __end_of___lodiv 0EA0            __end_of___lomod 0F70  
                    _RCREG 000FAE                      _RCSTA 000FAB               vfpfcnvrt@fmt 003E  
             vfpfcnvrt@llu 0046                      _SPBRG 000FAF                      _TXREG 000FAD  
                    _TXSTA 000FAC        ___lmul@multiplicand 0005                      _flags 0066  
                    _fputc 0F70                      _fputs 13F0                      pad@fp 0011  
                    _width 0062                      _putch 14DA                      tablat 000FF5  
 __end_of_Uart_Send_String 149A                      utoa@d 001E                      utoa@i 003A  
                    utoa@n 0032                      utoa@p 002E                      utoa@w 0030  
                    status 000FD8            __end_of_sprintf 13AA           ___lodiv@dividend 0001  
          __initialization 149A               __end_of_main 0DB0               __end_of_utoa 0A10  
                   ??_main 009E                     ??_utoa 0026              __activetblptr 000001  
         ___lodiv@quotient 0011                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _ADCON2 000FC0                     ?_fputc 0001                     ?_fputs 000A  
                   ?_putch 0001                     _SPBRGH 000FB0               vfprintf@cfmt 0054  
                   ___lmul 128C                  ??___aldiv 0015                  ??___lldiv 0009  
                ??___lodiv 0011                  ??___lomod 0011                     clear_0 14A0  
                   isa$std 000001             _Uart_Send_Char 14B4                     pad@buf 0013  
                   main@b1 009F                     main@b2 00A1         __size_of_Uart_Init 006E  
                   _strlen 1434                     fputc@c 0001                     fputs@c 000E  
                   fputs@i 000F                     fputs@s 000A                  ?_ADC_Init 0001  
                ?_ADC_Read 0001               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                     putch@c 0001  
         __end_of_vfprintf 1358                     utoa@fp 001C                  ??_sprintf 0060  
               __accesstop 0060    __end_of__initialization 14A6              ___rparam_used 000001  
           __pcstackCOMRAM 0001     __end_of_Uart_Send_Char 14CA              __end_of_fputc 103A  
            __end_of_fputs 1434              __end_of_putch 14DC                 ??_ADC_Init 0001  
               ??_ADC_Read 0003                    ??_fputc 0005                    ??_fputs 000E  
                  ??_putch 0001                 __pbssBANK0 0060          __end_of_Uart_Init 128C  
                  ?___lmul 0001            ?_Uart_Send_Char 0001                    _BAUDCON 000FB8  
           ___lmul@product 0009                 ADC_Read@ch 0003                    ?_strlen 0001  
       __size_of_vfpfcnvrt 0192                Uart_Init@vx 0016           ___lomod@dividend 0001  
        ?_Uart_Send_String 0002       Uart_Send_Char@txData 0001         ??_Uart_Send_String 0004  
                  __Hparam 0000                    __Lparam 0000                    ___aldiv 0BA2  
          __size_of___lmul 006A                    ___lldiv 1100                    ___lodiv 0DB0  
                  ___lomod 0EA0                  ?_vfprintf 004E               __psmallconst 0800  
                  __pcinit 149A                    __ramtop 0800                    __ptext0 0CAE  
                  __ptext1 1358                    __ptext2 12F6                    __ptext3 0A10  
                  __ptext4 080E                    __ptext5 103A                    __ptext6 1434  
                  __ptext7 13F0                    __ptext8 0F70                    __ptext9 14DA  
          __size_of_strlen 0036               __size_of_map 007A               __size_of_pad 00C6  
         ___aldiv@dividend 000D                    map@eMax 0023                    map@eMin 001F  
                  map@sMax 002B                    map@sMin 0027                    _sprintf 1358  
                  main@pwm 00A3       end_of_initialization 14A6                    fputc@fp 0003  
                  fputs@fp 000C            ___lldiv@divisor 0005              Uart_Init@baud 000E  
          ___lldiv@counter 000D          __end_of_vfpfcnvrt 0BA2                  _RCSTAbits 000FAB  
         ___aldiv@quotient 0017                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                 ??_vfprintf 0054  
                  strlen@a 0003                    strlen@s 0001                  _PORTBbits 000F81  
                _TRISBbits 000F93                  _TRISCbits 000F94          __size_of_ADC_Init 0010  
        __size_of_ADC_Read 0046                  _TXSTAbits 000FAC             __end_of___lmul 12F6  
              vfpfcnvrt@ap 0040                vfpfcnvrt@fp 003C                _BAUDCONbits 000FB8  
           __end_of_strlen 146A        start_initialization 149A            ___lodiv@divisor 0009  
          ___lodiv@counter 0019                __end_of_map 121E                __end_of_pad 1100  
         ??_Uart_Send_Char 0001                  _Uart_Init 121E                vfprintf@fmt 0050  
                 ??___lmul 0009                   ??_strlen 0003              __pcstackBANK0 0096  
               ?_Uart_Init 000E                   ?___aldiv 000D                   ?___lldiv 0001  
                 ?___lodiv 0001                   ?___lomod 0001                  _buffer_tx 0088  
__size_of_Uart_Send_String 0030          __size_of_vfprintf 0062            ___lomod@divisor 0009  
              __smallconst 0800            ___lomod@counter 0011                   _ADC_Init 14CA  
                 _ADC_Read 13AA                   ?_sprintf 0056             __size_of_fputc 00CA  
           __size_of_fputs 0044             __size_of_putch 0002            ___aldiv@divisor 0011  
          ___aldiv@counter 0015                   _PIR1bits 000F9E                  _vfpfcnvrt 0A10  
               _ADCON0bits 000FC2          ___lmul@multiplier 0001                   __Hrparam 0000  
              ??_Uart_Init 0012                 vfprintf@ap 0052                   __Lrparam 0000  
               vfprintf@fp 004E              ADC_Init@p_ang 0001               __Lsmallconst 0800  
         __size_of___aldiv 010C           __size_of___lldiv 00A4           __size_of___lodiv 00F0  
         __size_of___lomod 00D0                 ?_vfpfcnvrt 003C                 sprintf@fmt 0058  
                 __ptext10 0EA0                   __ptext11 0DB0                   __ptext20 14CA  
                 __ptext12 11A4                   __ptext13 128C                   __ptext14 0BA2  
                 __ptext15 146A                   __ptext16 14B4                   __ptext17 121E  
                 __ptext18 1100                   __ptext19 13AA           __size_of_sprintf 0052  
     Uart_Send_String@info 0002              __size_of_main 0102              __size_of_utoa 0202  
                 isa$xinst 000000                   _vfprintf 12F6           _Uart_Send_String 146A  
                sprintf@ap 0096           ___lldiv@dividend 0001                ??_vfpfcnvrt 0042  
                 sprintf@f 0098                   sprintf@s 0056           ___lldiv@quotient 0009  
             ___aldiv@sign 0016  
