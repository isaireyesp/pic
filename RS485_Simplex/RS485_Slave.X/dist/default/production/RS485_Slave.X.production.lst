

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Sep 30 17:54:36 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27  0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     _LATDbits	set	3980
    63  0000                     _TRISDbits	set	3989
    64  0000                     _ADCON1bits	set	4033
    65  0000                     _RCREG	set	4014
    66  0000                     _RCSTAbits	set	4011
    67  0000                     _TXREG	set	4013
    68  0000                     _TXSTAbits	set	4012
    69  0000                     _PIR1bits	set	3998
    70  0000                     _SPBRGH	set	4016
    71  0000                     _SPBRG	set	4015
    72  0000                     _BAUDCONbits	set	4024
    73  0000                     _BAUDCON	set	4024
    74  0000                     _RCSTA	set	4011
    75  0000                     _TXSTA	set	4012
    76  0000                     _T2CONbits	set	4042
    77  0000                     _TMR2	set	4044
    78  0000                     _CCP2CON	set	4026
    79  0000                     _CCP1CON	set	4029
    80  0000                     _T2CON	set	4042
    81  0000                     _CCPR2L	set	4027
    82  0000                     _TRISCbits	set	3988
    83  0000                     _CCPR1L	set	4030
    84  0000                     _PR2	set	4043
    85                           
    86                           ; #config settings
    87                           
    88                           	psect	cinit
    89  007942                     __pcinit:
    90                           	callstack 0
    91  007942                     start_initialization:
    92                           	callstack 0
    93  007942                     __initialization:
    94                           	callstack 0
    95                           
    96                           ; Clear objects allocated to COMRAM (22 bytes)
    97  007942  EE00  F024         	lfsr	0,__pbssCOMRAM
    98  007946  0E16               	movlw	22
    99  007948                     clear_0:
   100  007948  6AEE               	clrf	postinc0,c
   101  00794A  06E8               	decf	wreg,f,c
   102  00794C  E1FD               	bnz	clear_0
   103  00794E                     end_of_initialization:
   104                           	callstack 0
   105  00794E                     __end_of__initialization:
   106                           	callstack 0
   107  00794E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   108  007950  6EF8               	movwf	tblptru,c
   109  007952  0100               	movlb	0
   110  007954  EFBD  F03E         	goto	_main	;jump to C main() function
   111                           
   112                           	psect	bssCOMRAM
   113  000024                     __pbssCOMRAM:
   114                           	callstack 0
   115  000024                     _cad_p:
   116                           	callstack 0
   117  000024                     	ds	14
   118  000032                     _buffer:
   119                           	callstack 0
   120  000032                     	ds	8
   121                           
   122                           	psect	cstackCOMRAM
   123  000001                     __pcstackCOMRAM:
   124                           	callstack 0
   125  000001                     ?_strlen:
   126                           	callstack 0
   127  000001                     ?_isspace:
   128                           	callstack 0
   129  000001                     ?_isdigit:
   130                           	callstack 0
   131  000001                     ?_Uart_Available:
   132                           	callstack 0
   133  000001                     ?___wmul:
   134                           	callstack 0
   135  000001                     ?___lldiv:
   136                           	callstack 0
   137  000001                     PWM_1_Set_Duty@value:
   138                           	callstack 0
   139  000001                     Uart_Read_String@Buf:
   140                           	callstack 0
   141  000001                     Uart_Read_Substring@cp:
   142                           	callstack 0
   143  000001                     ___wmul@multiplier:
   144                           	callstack 0
   145  000001                     isdigit@c:
   146                           	callstack 0
   147  000001                     isspace@c:
   148                           	callstack 0
   149  000001                     strlen@s:
   150                           	callstack 0
   151  000001                     ___lldiv@dividend:
   152                           	callstack 0
   153                           
   154                           ; 4 bytes @ 0x0
   155  000001                     	ds	2
   156  000003                     ??_isspace:
   157  000003                     ??_isdigit:
   158  000003                     ??_Uart_Available:
   159  000003                     Uart_Read_String@s_buf:
   160                           	callstack 0
   161  000003                     Uart_Read_Substring@vc:
   162                           	callstack 0
   163  000003                     ___wmul@multiplicand:
   164                           	callstack 0
   165  000003                     strlen@a:
   166                           	callstack 0
   167                           
   168                           ; 2 bytes @ 0x2
   169  000003                     	ds	2
   170  000005                     ??_Uart_Read_String:
   171  000005                     Uart_Read_Substring@inc:
   172                           	callstack 0
   173  000005                     ___wmul@product:
   174                           	callstack 0
   175  000005                     ___lldiv@divisor:
   176                           	callstack 0
   177                           
   178                           ; 4 bytes @ 0x4
   179  000005                     	ds	2
   180  000007                     Uart_Read_String@c:
   181                           	callstack 0
   182  000007                     _isspace$1042:
   183                           	callstack 0
   184  000007                     Uart_Read_Substring@fn:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0x6
   188  000007                     	ds	1
   189  000008                     ?_atoi:
   190                           	callstack 0
   191  000008                     Uart_Read_String@cont_buf:
   192                           	callstack 0
   193  000008                     atoi@s:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x7
   197  000008                     	ds	1
   198  000009                     ??_Uart_Read_Substring:
   199  000009                     ___lldiv@quotient:
   200                           	callstack 0
   201                           
   202                           ; 4 bytes @ 0x8
   203  000009                     	ds	1
   204  00000A                     ??_atoi:
   205  00000A                     Uart_Read_Substring@lt:
   206                           	callstack 0
   207                           
   208                           ; 2 bytes @ 0x9
   209  00000A                     	ds	2
   210  00000C                     Uart_Read_Substring@pt:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0xB
   214  00000C                     	ds	1
   215  00000D                     ___lldiv@counter:
   216                           	callstack 0
   217                           
   218                           ; 1 bytes @ 0xC
   219  00000D                     	ds	1
   220  00000E                     Uart_Read_Plot@b_fin:
   221                           	callstack 0
   222  00000E                     atoi@neg:
   223                           	callstack 0
   224  00000E                     Uart_Init@baud:
   225                           	callstack 0
   226                           
   227                           ; 4 bytes @ 0xD
   228  00000E                     	ds	1
   229  00000F                     Uart_Read_Plot@tr_or:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0xE
   233  00000F                     	ds	1
   234  000010                     _atoi$1024:
   235                           	callstack 0
   236                           
   237                           ; 2 bytes @ 0xF
   238  000010                     	ds	1
   239  000011                     Uart_Read_Plot@n_str:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x10
   243  000011                     	ds	1
   244  000012                     ??_Uart_Init:
   245  000012                     _atoi$1026:
   246                           	callstack 0
   247                           
   248                           ; 2 bytes @ 0x11
   249  000012                     	ds	1
   250  000013                     Uart_Read_Plot@s_buf:
   251                           	callstack 0
   252                           
   253                           ; 2 bytes @ 0x12
   254  000013                     	ds	1
   255  000014                     _atoi$1025:
   256                           	callstack 0
   257                           
   258                           ; 1 bytes @ 0x13
   259  000014                     	ds	1
   260  000015                     ??_Uart_Read_Plot:
   261  000015                     atoi@n:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x14
   265  000015                     	ds	1
   266  000016                     Uart_Read_Plot@b_ini:
   267                           	callstack 0
   268  000016                     Uart_Init@vx:
   269                           	callstack 0
   270                           
   271                           ; 2 bytes @ 0x15
   272  000016                     	ds	1
   273  000017                     Uart_Read_Plot@conta_ini:
   274                           	callstack 0
   275                           
   276                           ; 2 bytes @ 0x16
   277  000017                     	ds	2
   278  000019                     Uart_Read_Plot@conta_fin:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0x18
   282  000019                     	ds	2
   283  00001B                     Uart_Read_Plot@i:
   284                           	callstack 0
   285                           
   286                           ; 2 bytes @ 0x1A
   287  00001B                     	ds	2
   288  00001D                     Uart_Read_Plot@j:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x1C
   292  00001D                     	ds	2
   293  00001F                     main@estado_led1:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0x1E
   297  00001F                     	ds	2
   298  000021                     main@estado_led2:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x20
   302  000021                     	ds	2
   303  000023                     main@valor_pwm:
   304                           	callstack 0
   305                           
   306                           ; 1 bytes @ 0x22
   307  000023                     	ds	1
   308                           
   309 ;;
   310 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   311 ;;
   312 ;; *************** function _main *****************
   313 ;; Defined at:
   314 ;;		line 28 in file "RS485_Slave.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;  estado_led2     2   32[COMRAM] short 
   319 ;;  estado_led1     2   30[COMRAM] short 
   320 ;;  valor_pwm       1   34[COMRAM] unsigned char 
   321 ;; Return value:  Size  Location     Type
   322 ;;                  1    wreg      void 
   323 ;; Registers used:
   324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   325 ;; Tracked objects:
   326 ;;		On entry : 0/0
   327 ;;		On exit  : 0/0
   328 ;;		Unchanged: 0/0
   329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   330 ;;      Params:         0       0       0       0       0       0       0       0       0
   331 ;;      Locals:         5       0       0       0       0       0       0       0       0
   332 ;;      Temps:          0       0       0       0       0       0       0       0       0
   333 ;;      Totals:         5       0       0       0       0       0       0       0       0
   334 ;;Total ram usage:        5 bytes
   335 ;; Hardware stack levels required when called: 2
   336 ;; This function calls:
   337 ;;		_PWM_1_Set_Duty
   338 ;;		_PWM_Init
   339 ;;		_Uart_Available
   340 ;;		_Uart_Init
   341 ;;		_Uart_Read_Plot
   342 ;;		_Uart_Read_String
   343 ;;		_atoi
   344 ;;		_strlen
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           	psect	text0
   351  007D7A                     __ptext0:
   352                           	callstack 0
   353  007D7A                     _main:
   354                           	callstack 29
   355  007D7A                     
   356                           ;RS485_Slave.c: 30:     ADCON1bits.PCFG = 0x0F;
   357  007D7A  0E0F               	movlw	15
   358  007D7C  12C1               	iorwf	193,f,c	;volatile
   359  007D7E                     
   360                           ;RS485_Slave.c: 31:     TRISDbits.RD0 = 0;
   361  007D7E  9095               	bcf	149,0,c	;volatile
   362  007D80                     
   363                           ;RS485_Slave.c: 32:     TRISDbits.RD1 = 0;
   364  007D80  9295               	bcf	149,1,c	;volatile
   365  007D82                     
   366                           ;RS485_Slave.c: 33:     LATDbits.LD0 = 0;
   367  007D82  908C               	bcf	140,0,c	;volatile
   368  007D84                     
   369                           ;RS485_Slave.c: 34:     LATDbits.LD1 = 0;
   370  007D84  928C               	bcf	140,1,c	;volatile
   371  007D86                     
   372                           ;RS485_Slave.c: 35:     PWM_Init();
   373  007D86  ECBA  F03C         	call	_PWM_Init	;wreg free
   374  007D8A                     
   375                           ;RS485_Slave.c: 36:     Uart_Init(9600);
   376  007D8A  0E80               	movlw	128
   377  007D8C  6E0E               	movwf	Uart_Init@baud^0,c
   378  007D8E  0E25               	movlw	37
   379  007D90  6E0F               	movwf	(Uart_Init@baud+1)^0,c
   380  007D92  0E00               	movlw	0
   381  007D94  6E10               	movwf	(Uart_Init@baud+2)^0,c
   382  007D96  0E00               	movlw	0
   383  007D98  6E11               	movwf	(Uart_Init@baud+3)^0,c
   384  007D9A  ECBC  F03D         	call	_Uart_Init	;wreg free
   385  007D9E                     l1306:
   386                           
   387                           ;RS485_Slave.c: 39:     {;RS485_Slave.c: 40:         if(Uart_Available() > 0)
   388  007D9E  ECAC  F03C         	call	_Uart_Available	;wreg free
   389  007DA2  BE02               	btfsc	(?_Uart_Available+1)^0,7,c
   390  007DA4  EFDC  F03E         	goto	u581
   391  007DA8  5002               	movf	(?_Uart_Available+1)^0,w,c
   392  007DAA  E108               	bnz	u580
   393  007DAC  0401               	decf	?_Uart_Available^0,w,c
   394  007DAE  A0D8               	btfss	status,0,c
   395  007DB0  EFDC  F03E         	goto	u581
   396  007DB4  EFDE  F03E         	goto	u580
   397  007DB8                     u581:
   398  007DB8  EFCF  F03E         	goto	l1306
   399  007DBC                     u580:
   400  007DBC                     
   401                           ;RS485_Slave.c: 41:         {;RS485_Slave.c: 42:             Uart_Read_String(cad_p, 14)
      +                          ;
   402  007DBC  0E24               	movlw	low _cad_p
   403  007DBE  6E01               	movwf	Uart_Read_String@Buf^0,c
   404  007DC0  0E00               	movlw	high _cad_p
   405  007DC2  6E02               	movwf	(Uart_Read_String@Buf+1)^0,c
   406  007DC4  0E00               	movlw	0
   407  007DC6  6E04               	movwf	(Uart_Read_String@s_buf+1)^0,c
   408  007DC8  0E0E               	movlw	14
   409  007DCA  6E03               	movwf	Uart_Read_String@s_buf^0,c
   410  007DCC  EC86  F03D         	call	_Uart_Read_String	;wreg free
   411  007DD0                     
   412                           ;RS485_Slave.c: 43:             Uart_Read_Plot('I', 'N', cad_p, buffer[0], strlen(cad_p)
      +                          );
   413  007DD0  0E4E               	movlw	78
   414  007DD2  6E0E               	movwf	Uart_Read_Plot@b_fin^0,c
   415  007DD4  0E24               	movlw	low _cad_p
   416  007DD6  6E0F               	movwf	Uart_Read_Plot@tr_or^0,c
   417  007DD8  0E00               	movlw	high _cad_p
   418  007DDA  6E10               	movwf	(Uart_Read_Plot@tr_or+1)^0,c
   419  007DDC  0E32               	movlw	low _buffer
   420  007DDE  6E11               	movwf	Uart_Read_Plot@n_str^0,c
   421  007DE0  0E00               	movlw	high _buffer
   422  007DE2  6E12               	movwf	(Uart_Read_Plot@n_str+1)^0,c
   423  007DE4  0E24               	movlw	low _cad_p
   424  007DE6  6E01               	movwf	strlen@s^0,c
   425  007DE8  0E00               	movlw	high _cad_p
   426  007DEA  6E02               	movwf	(strlen@s+1)^0,c
   427  007DEC  ECF2  F03C         	call	_strlen	;wreg free
   428  007DF0  C001  F013         	movff	?_strlen,Uart_Read_Plot@s_buf
   429  007DF4  C002  F014         	movff	?_strlen+1,Uart_Read_Plot@s_buf+1
   430  007DF8  0E49               	movlw	73
   431  007DFA  EC45  F03E         	call	_Uart_Read_Plot
   432  007DFE                     
   433                           ;RS485_Slave.c: 44:             Uart_Read_Plot('N', 'F', cad_p, buffer[1], strlen(cad_p)
      +                          );
   434  007DFE  0E46               	movlw	70
   435  007E00  6E0E               	movwf	Uart_Read_Plot@b_fin^0,c
   436  007E02  0E24               	movlw	low _cad_p
   437  007E04  6E0F               	movwf	Uart_Read_Plot@tr_or^0,c
   438  007E06  0E00               	movlw	high _cad_p
   439  007E08  6E10               	movwf	(Uart_Read_Plot@tr_or+1)^0,c
   440  007E0A  0E36               	movlw	low (_buffer+4)
   441  007E0C  6E11               	movwf	Uart_Read_Plot@n_str^0,c
   442  007E0E  0E00               	movlw	high (_buffer+4)
   443  007E10  6E12               	movwf	(Uart_Read_Plot@n_str+1)^0,c
   444  007E12  0E24               	movlw	low _cad_p
   445  007E14  6E01               	movwf	strlen@s^0,c
   446  007E16  0E00               	movlw	high _cad_p
   447  007E18  6E02               	movwf	(strlen@s+1)^0,c
   448  007E1A  ECF2  F03C         	call	_strlen	;wreg free
   449  007E1E  C001  F013         	movff	?_strlen,Uart_Read_Plot@s_buf
   450  007E22  C002  F014         	movff	?_strlen+1,Uart_Read_Plot@s_buf+1
   451  007E26  0E4E               	movlw	78
   452  007E28  EC45  F03E         	call	_Uart_Read_Plot
   453  007E2C                     
   454                           ;RS485_Slave.c: 46:             short estado_led1 = (buffer[0][0] - '0');
   455  007E2C  0ED0               	movlw	208
   456  007E2E  2432               	addwf	_buffer^0,w,c
   457  007E30  6E1F               	movwf	main@estado_led1^0,c
   458  007E32  6A20               	clrf	(main@estado_led1+1)^0,c
   459  007E34  0EFF               	movlw	255
   460  007E36  2220               	addwfc	(main@estado_led1+1)^0,f,c
   461  007E38                     
   462                           ;RS485_Slave.c: 47:             short estado_led2 = (buffer[0][1] - '0');
   463  007E38  0ED0               	movlw	208
   464  007E3A  2433               	addwf	(_buffer+1)^0,w,c
   465  007E3C  6E21               	movwf	main@estado_led2^0,c
   466  007E3E  6A22               	clrf	(main@estado_led2+1)^0,c
   467  007E40  0EFF               	movlw	255
   468  007E42  2222               	addwfc	(main@estado_led2+1)^0,f,c
   469  007E44                     
   470                           ;RS485_Slave.c: 48:             unsigned char valor_pwm = atoi(buffer[1]);
   471  007E44  0E36               	movlw	low (_buffer+4)
   472  007E46  6E08               	movwf	atoi@s^0,c
   473  007E48  0E00               	movlw	high (_buffer+4)
   474  007E4A  6E09               	movwf	(atoi@s+1)^0,c
   475  007E4C  EC3B  F03F         	call	_atoi	;wreg free
   476  007E50  5008               	movf	?_atoi^0,w,c
   477  007E52  6E23               	movwf	main@valor_pwm^0,c
   478  007E54                     
   479                           ;RS485_Slave.c: 50:             LATDbits.LD0 = estado_led1;
   480  007E54  B01F               	btfsc	main@estado_led1^0,0,c
   481  007E56  D002               	bra	u595
   482  007E58  908C               	bcf	140,0,c	;volatile
   483  007E5A  D001               	bra	u596
   484  007E5C                     u595:
   485  007E5C  808C               	bsf	140,0,c	;volatile
   486  007E5E                     u596:
   487  007E5E                     
   488                           ;RS485_Slave.c: 51:             LATDbits.LD1 = estado_led2;
   489  007E5E  B021               	btfsc	main@estado_led2^0,0,c
   490  007E60  D002               	bra	u605
   491  007E62  928C               	bcf	140,1,c	;volatile
   492  007E64  D001               	bra	u606
   493  007E66                     u605:
   494  007E66  828C               	bsf	140,1,c	;volatile
   495  007E68                     u606:
   496  007E68                     
   497                           ;RS485_Slave.c: 52:             PWM_1_Set_Duty(valor_pwm);
   498  007E68  5023               	movf	main@valor_pwm^0,w,c
   499  007E6A  EC9B  F03C         	call	_PWM_1_Set_Duty
   500  007E6E  EFCF  F03E         	goto	l1306
   501  007E72  EF00  F000         	goto	start
   502  007E76                     __end_of_main:
   503                           	callstack 0
   504                           
   505 ;; *************** function _strlen *****************
   506 ;; Defined at:
   507 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
   508 ;; Parameters:    Size  Location     Type
   509 ;;  s               2    0[COMRAM] PTR const unsigned char 
   510 ;;		 -> cad_p(14), 
   511 ;; Auto vars:     Size  Location     Type
   512 ;;  a               2    2[COMRAM] PTR const unsigned char 
   513 ;;		 -> cad_p(14), 
   514 ;; Return value:  Size  Location     Type
   515 ;;                  2    0[COMRAM] unsigned int 
   516 ;; Registers used:
   517 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   518 ;; Tracked objects:
   519 ;;		On entry : 0/0
   520 ;;		On exit  : 0/0
   521 ;;		Unchanged: 0/0
   522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   523 ;;      Params:         2       0       0       0       0       0       0       0       0
   524 ;;      Locals:         2       0       0       0       0       0       0       0       0
   525 ;;      Temps:          0       0       0       0       0       0       0       0       0
   526 ;;      Totals:         4       0       0       0       0       0       0       0       0
   527 ;;Total ram usage:        4 bytes
   528 ;; Hardware stack levels used: 1
   529 ;; This function calls:
   530 ;;		Nothing
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text1
   537  0079E4                     __ptext1:
   538                           	callstack 0
   539  0079E4                     _strlen:
   540                           	callstack 30
   541  0079E4  C001  F003         	movff	strlen@s,strlen@a
   542  0079E8  C002  F004         	movff	strlen@s+1,strlen@a+1
   543  0079EC  EFFA  F03C         	goto	l1244
   544  0079F0                     l1242:
   545  0079F0  4A01               	infsnz	strlen@s^0,f,c
   546  0079F2  2A02               	incf	(strlen@s+1)^0,f,c
   547  0079F4                     l1244:
   548  0079F4  C001  FFD9         	movff	strlen@s,fsr2l
   549  0079F8  C002  FFDA         	movff	strlen@s+1,fsr2h
   550  0079FC  50DF               	movf	indf2,w,c
   551  0079FE  A4D8               	btfss	status,2,c
   552  007A00  EF04  F03D         	goto	u501
   553  007A04  EF06  F03D         	goto	u500
   554  007A08                     u501:
   555  007A08  EFF8  F03C         	goto	l1242
   556  007A0C                     u500:
   557  007A0C  5003               	movf	strlen@a^0,w,c
   558  007A0E  5C01               	subwf	strlen@s^0,w,c
   559  007A10  6E01               	movwf	?_strlen^0,c
   560  007A12  5004               	movf	(strlen@a+1)^0,w,c
   561  007A14  5802               	subwfb	(strlen@s+1)^0,w,c
   562  007A16  6E02               	movwf	(?_strlen+1)^0,c
   563  007A18  0012               	return		;funcret
   564  007A1A                     __end_of_strlen:
   565                           	callstack 0
   566                           
   567 ;; *************** function _atoi *****************
   568 ;; Defined at:
   569 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\atoi.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;  s               2    7[COMRAM] PTR const unsigned char 
   572 ;;		 -> buffer(8), 
   573 ;; Auto vars:     Size  Location     Type
   574 ;;  n               2   20[COMRAM] int 
   575 ;;  neg             2   13[COMRAM] int 
   576 ;; Return value:  Size  Location     Type
   577 ;;                  2    7[COMRAM] int 
   578 ;; Registers used:
   579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   585 ;;      Params:         2       0       0       0       0       0       0       0       0
   586 ;;      Locals:         9       0       0       0       0       0       0       0       0
   587 ;;      Temps:          4       0       0       0       0       0       0       0       0
   588 ;;      Totals:        15       0       0       0       0       0       0       0       0
   589 ;;Total ram usage:       15 bytes
   590 ;; Hardware stack levels used: 1
   591 ;; Hardware stack levels required when called: 1
   592 ;; This function calls:
   593 ;;		___wmul
   594 ;;		_isdigit
   595 ;;		_isspace
   596 ;; This function is called by:
   597 ;;		_main
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           	psect	text2
   602  007E76                     __ptext2:
   603                           	callstack 0
   604  007E76                     _atoi:
   605                           	callstack 29
   606  007E76  0E00               	movlw	0
   607  007E78  6E16               	movwf	(atoi@n+1)^0,c
   608  007E7A  0E00               	movlw	0
   609  007E7C  6E15               	movwf	atoi@n^0,c
   610  007E7E  0E00               	movlw	0
   611  007E80  6E0F               	movwf	(atoi@neg+1)^0,c
   612  007E82  0E00               	movlw	0
   613  007E84  6E0E               	movwf	atoi@neg^0,c
   614  007E86  EF47  F03F         	goto	l1254
   615  007E8A                     l1252:
   616  007E8A  4A08               	infsnz	atoi@s^0,f,c
   617  007E8C  2A09               	incf	(atoi@s+1)^0,f,c
   618  007E8E                     l1254:
   619  007E8E  0E01               	movlw	1
   620  007E90  6E14               	movwf	_atoi$1025^0,c
   621  007E92  C008  FFD9         	movff	atoi@s,fsr2l
   622  007E96  C009  FFDA         	movff	atoi@s+1,fsr2h
   623  007E9A  0E20               	movlw	32
   624  007E9C  18DE               	xorwf	postinc2,w,c
   625  007E9E  B4D8               	btfsc	status,2,c
   626  007EA0  EF54  F03F         	goto	u511
   627  007EA4  EF56  F03F         	goto	u510
   628  007EA8                     u511:
   629  007EA8  EF72  F03F         	goto	l1262
   630  007EAC                     u510:
   631  007EAC  0EF7               	movlw	247
   632  007EAE  6E0A               	movwf	??_atoi^0,c
   633  007EB0  0EFF               	movlw	255
   634  007EB2  6E0B               	movwf	(??_atoi+1)^0,c
   635  007EB4  C008  FFD9         	movff	atoi@s,fsr2l
   636  007EB8  C009  FFDA         	movff	atoi@s+1,fsr2h
   637  007EBC  50DF               	movf	indf2,w,c
   638  007EBE  6E0C               	movwf	(??_atoi+2)^0,c
   639  007EC0  6A0D               	clrf	(??_atoi+3)^0,c
   640  007EC2  500A               	movf	??_atoi^0,w,c
   641  007EC4  260C               	addwf	(??_atoi+2)^0,f,c
   642  007EC6  500B               	movf	(??_atoi+1)^0,w,c
   643  007EC8  220D               	addwfc	(??_atoi+3)^0,f,c
   644  007ECA  500D               	movf	(??_atoi+3)^0,w,c
   645  007ECC  E109               	bnz	u520
   646  007ECE  0E05               	movlw	5
   647  007ED0  5C0C               	subwf	(??_atoi+2)^0,w,c
   648  007ED2  A0D8               	btfss	status,0,c
   649  007ED4  EF6E  F03F         	goto	u521
   650  007ED8  EF70  F03F         	goto	u520
   651  007EDC                     u521:
   652  007EDC  EF72  F03F         	goto	l1262
   653  007EE0                     u520:
   654  007EE0  0E00               	movlw	0
   655  007EE2  6E14               	movwf	_atoi$1025^0,c
   656  007EE4                     l1262:
   657  007EE4  C014  F010         	movff	_atoi$1025,_atoi$1024
   658  007EE8  6A11               	clrf	(_atoi$1024+1)^0,c
   659  007EEA  5010               	movf	_atoi$1024^0,w,c
   660  007EEC  1011               	iorwf	(_atoi$1024+1)^0,w,c
   661  007EEE  A4D8               	btfss	status,2,c
   662  007EF0  EF7C  F03F         	goto	u531
   663  007EF4  EF7E  F03F         	goto	u530
   664  007EF8                     u531:
   665  007EF8  EF45  F03F         	goto	l1252
   666  007EFC                     u530:
   667  007EFC  EF88  F03F         	goto	l1272
   668  007F00                     l1268:
   669  007F00  0E00               	movlw	0
   670  007F02  6E0F               	movwf	(atoi@neg+1)^0,c
   671  007F04  0E01               	movlw	1
   672  007F06  6E0E               	movwf	atoi@neg^0,c
   673  007F08                     l1270:
   674  007F08  4A08               	infsnz	atoi@s^0,f,c
   675  007F0A  2A09               	incf	(atoi@s+1)^0,f,c
   676  007F0C  EFBD  F03F         	goto	l1278
   677  007F10                     l1272:
   678  007F10  C008  FFD9         	movff	atoi@s,fsr2l
   679  007F14  C009  FFDA         	movff	atoi@s+1,fsr2h
   680  007F18  50DF               	movf	indf2,w,c
   681  007F1A  6E0A               	movwf	??_atoi^0,c
   682  007F1C  6A0B               	clrf	(??_atoi+1)^0,c
   683                           
   684                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   685                           ; Switch size 1, requested type "simple"
   686                           ; Number of cases is 1, Range of values is 0 to 0
   687                           ; switch strategies available:
   688                           ; Name         Instructions Cycles
   689                           ; simple_byte            4     3 (average)
   690                           ;	Chosen strategy is simple_byte
   691  007F1E  500B               	movf	(??_atoi+1)^0,w,c
   692  007F20  0A00               	xorlw	0	; case 0
   693  007F22  B4D8               	btfsc	status,2,c
   694  007F24  EF96  F03F         	goto	l1330
   695  007F28  EFBD  F03F         	goto	l1278
   696  007F2C                     l1330:
   697                           
   698                           ; Switch size 1, requested type "simple"
   699                           ; Number of cases is 2, Range of values is 43 to 45
   700                           ; switch strategies available:
   701                           ; Name         Instructions Cycles
   702                           ; simple_byte            7     4 (average)
   703                           ;	Chosen strategy is simple_byte
   704  007F2C  500A               	movf	??_atoi^0,w,c
   705  007F2E  0A2B               	xorlw	43	; case 43
   706  007F30  B4D8               	btfsc	status,2,c
   707  007F32  EF84  F03F         	goto	l1270
   708  007F36  0A06               	xorlw	6	; case 45
   709  007F38  B4D8               	btfsc	status,2,c
   710  007F3A  EF80  F03F         	goto	l1268
   711  007F3E  EFBD  F03F         	goto	l1278
   712  007F42                     l1274:
   713  007F42  C015  F001         	movff	atoi@n,___wmul@multiplier
   714  007F46  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
   715  007F4A  0E00               	movlw	0
   716  007F4C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   717  007F4E  0E0A               	movlw	10
   718  007F50  6E03               	movwf	___wmul@multiplicand^0,c
   719  007F52  ECDF  F03C         	call	___wmul	;wreg free
   720  007F56  C008  FFD9         	movff	atoi@s,fsr2l
   721  007F5A  C009  FFDA         	movff	atoi@s+1,fsr2h
   722  007F5E  50DF               	movf	indf2,w,c
   723  007F60  6E0A               	movwf	??_atoi^0,c
   724  007F62  500A               	movf	??_atoi^0,w,c
   725  007F64  5E01               	subwf	?___wmul^0,f,c
   726  007F66  0E00               	movlw	0
   727  007F68  5A02               	subwfb	(?___wmul+1)^0,f,c
   728  007F6A  0E30               	movlw	48
   729  007F6C  2401               	addwf	?___wmul^0,w,c
   730  007F6E  6E15               	movwf	atoi@n^0,c
   731  007F70  0E00               	movlw	0
   732  007F72  2002               	addwfc	(?___wmul+1)^0,w,c
   733  007F74  6E16               	movwf	(atoi@n+1)^0,c
   734  007F76  EF84  F03F         	goto	l1270
   735  007F7A                     l1278:
   736  007F7A  0ED0               	movlw	208
   737  007F7C  6E0A               	movwf	??_atoi^0,c
   738  007F7E  0EFF               	movlw	255
   739  007F80  6E0B               	movwf	(??_atoi+1)^0,c
   740  007F82  C008  FFD9         	movff	atoi@s,fsr2l
   741  007F86  C009  FFDA         	movff	atoi@s+1,fsr2h
   742  007F8A  50DF               	movf	indf2,w,c
   743  007F8C  6E0C               	movwf	(??_atoi+2)^0,c
   744  007F8E  6A0D               	clrf	(??_atoi+3)^0,c
   745  007F90  500A               	movf	??_atoi^0,w,c
   746  007F92  260C               	addwf	(??_atoi+2)^0,f,c
   747  007F94  500B               	movf	(??_atoi+1)^0,w,c
   748  007F96  220D               	addwfc	(??_atoi+3)^0,f,c
   749  007F98  500D               	movf	(??_atoi+3)^0,w,c
   750  007F9A  E10A               	bnz	u540
   751  007F9C  0E0A               	movlw	10
   752  007F9E  5C0C               	subwf	(??_atoi+2)^0,w,c
   753  007FA0  A0D8               	btfss	status,0,c
   754  007FA2  EFD5  F03F         	goto	u541
   755  007FA6  EFD8  F03F         	goto	u540
   756  007FAA                     u541:
   757  007FAA  0E01               	movlw	1
   758  007FAC  EFD9  F03F         	goto	u550
   759  007FB0                     u540:
   760  007FB0  0E00               	movlw	0
   761  007FB2                     u550:
   762  007FB2  6E12               	movwf	_atoi$1026^0,c
   763  007FB4  6A13               	clrf	(_atoi$1026+1)^0,c
   764  007FB6  5012               	movf	_atoi$1026^0,w,c
   765  007FB8  1013               	iorwf	(_atoi$1026+1)^0,w,c
   766  007FBA  A4D8               	btfss	status,2,c
   767  007FBC  EFE2  F03F         	goto	u561
   768  007FC0  EFE4  F03F         	goto	u560
   769  007FC4                     u561:
   770  007FC4  EFA1  F03F         	goto	l1274
   771  007FC8                     u560:
   772  007FC8  500E               	movf	atoi@neg^0,w,c
   773  007FCA  100F               	iorwf	(atoi@neg+1)^0,w,c
   774  007FCC  A4D8               	btfss	status,2,c
   775  007FCE  EFEB  F03F         	goto	u571
   776  007FD2  EFED  F03F         	goto	u570
   777  007FD6                     u571:
   778  007FD6  EFFB  F03F         	goto	l845
   779  007FDA                     u570:
   780  007FDA  C015  F00A         	movff	atoi@n,??_atoi
   781  007FDE  C016  F00B         	movff	atoi@n+1,??_atoi+1
   782  007FE2  1E0A               	comf	??_atoi^0,f,c
   783  007FE4  1E0B               	comf	(??_atoi+1)^0,f,c
   784  007FE6  4A0A               	infsnz	??_atoi^0,f,c
   785  007FE8  2A0B               	incf	(??_atoi+1)^0,f,c
   786  007FEA  C00A  F008         	movff	??_atoi,?_atoi
   787  007FEE  C00B  F009         	movff	??_atoi+1,?_atoi+1
   788  007FF2  EFFF  F03F         	goto	l848
   789  007FF6                     l845:
   790  007FF6  C015  F008         	movff	atoi@n,?_atoi
   791  007FFA  C016  F009         	movff	atoi@n+1,?_atoi+1
   792  007FFE                     l848:
   793  007FFE  0012               	return		;funcret
   794  008000                     __end_of_atoi:
   795                           	callstack 0
   796                           
   797 ;; *************** function _isspace *****************
   798 ;; Defined at:
   799 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isspace.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  c               2    0[COMRAM] int 
   802 ;; Auto vars:     Size  Location     Type
   803 ;;		None
   804 ;; Return value:  Size  Location     Type
   805 ;;                  2    0[COMRAM] int 
   806 ;; Registers used:
   807 ;;		wreg, status,2, status,0
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   813 ;;      Params:         2       0       0       0       0       0       0       0       0
   814 ;;      Locals:         1       0       0       0       0       0       0       0       0
   815 ;;      Temps:          4       0       0       0       0       0       0       0       0
   816 ;;      Totals:         7       0       0       0       0       0       0       0       0
   817 ;;Total ram usage:        7 bytes
   818 ;; Hardware stack levels used: 1
   819 ;; This function calls:
   820 ;;		Nothing
   821 ;; This function is called by:
   822 ;;		_atoi
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text3
   827  007A52                     __ptext3:
   828                           	callstack 0
   829  007A52                     _isspace:
   830                           	callstack 29
   831  007A52  0E01               	movlw	1
   832  007A54  6E07               	movwf	_isspace$1042^0,c
   833  007A56  0E20               	movlw	32
   834  007A58  1801               	xorwf	isspace@c^0,w,c
   835  007A5A  1002               	iorwf	(isspace@c+1)^0,w,c
   836  007A5C  B4D8               	btfsc	status,2,c
   837  007A5E  EF33  F03D         	goto	u381
   838  007A62  EF35  F03D         	goto	u380
   839  007A66                     u381:
   840  007A66  EF4E  F03D         	goto	l1176
   841  007A6A                     u380:
   842  007A6A  0EF7               	movlw	247
   843  007A6C  6E03               	movwf	??_isspace^0,c
   844  007A6E  0EFF               	movlw	255
   845  007A70  6E04               	movwf	(??_isspace+1)^0,c
   846  007A72  C001  F005         	movff	isspace@c,??_isspace+2
   847  007A76  C002  F006         	movff	isspace@c+1,??_isspace+3
   848  007A7A  5003               	movf	??_isspace^0,w,c
   849  007A7C  2605               	addwf	(??_isspace+2)^0,f,c
   850  007A7E  5004               	movf	(??_isspace+1)^0,w,c
   851  007A80  2206               	addwfc	(??_isspace+3)^0,f,c
   852  007A82  5006               	movf	(??_isspace+3)^0,w,c
   853  007A84  E109               	bnz	u390
   854  007A86  0E05               	movlw	5
   855  007A88  5C05               	subwf	(??_isspace+2)^0,w,c
   856  007A8A  A0D8               	btfss	status,0,c
   857  007A8C  EF4A  F03D         	goto	u391
   858  007A90  EF4C  F03D         	goto	u390
   859  007A94                     u391:
   860  007A94  EF4E  F03D         	goto	l1176
   861  007A98                     u390:
   862  007A98  0E00               	movlw	0
   863  007A9A  6E07               	movwf	_isspace$1042^0,c
   864  007A9C                     l1176:
   865  007A9C  C007  F001         	movff	_isspace$1042,?_isspace
   866  007AA0  6A02               	clrf	(?_isspace+1)^0,c
   867  007AA2  0012               	return		;funcret
   868  007AA4                     __end_of_isspace:
   869                           	callstack 0
   870                           
   871 ;; *************** function _isdigit *****************
   872 ;; Defined at:
   873 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\isdigit.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  c               2    0[COMRAM] int 
   876 ;; Auto vars:     Size  Location     Type
   877 ;;		None
   878 ;; Return value:  Size  Location     Type
   879 ;;                  2    0[COMRAM] int 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   887 ;;      Params:         2       0       0       0       0       0       0       0       0
   888 ;;      Locals:         0       0       0       0       0       0       0       0       0
   889 ;;      Temps:          4       0       0       0       0       0       0       0       0
   890 ;;      Totals:         6       0       0       0       0       0       0       0       0
   891 ;;Total ram usage:        6 bytes
   892 ;; Hardware stack levels used: 1
   893 ;; This function calls:
   894 ;;		Nothing
   895 ;; This function is called by:
   896 ;;		_atoi
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text4
   901  007A1A                     __ptext4:
   902                           	callstack 0
   903  007A1A                     _isdigit:
   904                           	callstack 29
   905  007A1A  0ED0               	movlw	208
   906  007A1C  6E03               	movwf	??_isdigit^0,c
   907  007A1E  0EFF               	movlw	255
   908  007A20  6E04               	movwf	(??_isdigit+1)^0,c
   909  007A22  C001  F005         	movff	isdigit@c,??_isdigit+2
   910  007A26  C002  F006         	movff	isdigit@c+1,??_isdigit+3
   911  007A2A  5003               	movf	??_isdigit^0,w,c
   912  007A2C  2605               	addwf	(??_isdigit+2)^0,f,c
   913  007A2E  5004               	movf	(??_isdigit+1)^0,w,c
   914  007A30  2206               	addwfc	(??_isdigit+3)^0,f,c
   915  007A32  5006               	movf	(??_isdigit+3)^0,w,c
   916  007A34  E10A               	bnz	u400
   917  007A36  0E0A               	movlw	10
   918  007A38  5C05               	subwf	(??_isdigit+2)^0,w,c
   919  007A3A  A0D8               	btfss	status,0,c
   920  007A3C  EF22  F03D         	goto	u401
   921  007A40  EF25  F03D         	goto	u400
   922  007A44                     u401:
   923  007A44  0E01               	movlw	1
   924  007A46  EF26  F03D         	goto	u410
   925  007A4A                     u400:
   926  007A4A  0E00               	movlw	0
   927  007A4C                     u410:
   928  007A4C  6E01               	movwf	?_isdigit^0,c
   929  007A4E  6A02               	clrf	(?_isdigit+1)^0,c
   930  007A50  0012               	return		;funcret
   931  007A52                     __end_of_isdigit:
   932                           	callstack 0
   933                           
   934 ;; *************** function ___wmul *****************
   935 ;; Defined at:
   936 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;  multiplier      2    0[COMRAM] unsigned int 
   939 ;;  multiplicand    2    2[COMRAM] unsigned int 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  product         2    4[COMRAM] unsigned int 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  2    0[COMRAM] unsigned int 
   944 ;; Registers used:
   945 ;;		wreg, status,2, status,0, prodl, prodh
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   951 ;;      Params:         4       0       0       0       0       0       0       0       0
   952 ;;      Locals:         2       0       0       0       0       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0       0       0       0       0
   954 ;;      Totals:         6       0       0       0       0       0       0       0       0
   955 ;;Total ram usage:        6 bytes
   956 ;; Hardware stack levels used: 1
   957 ;; This function calls:
   958 ;;		Nothing
   959 ;; This function is called by:
   960 ;;		_atoi
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           	psect	text5
   965  0079BE                     __ptext5:
   966                           	callstack 0
   967  0079BE                     ___wmul:
   968                           	callstack 29
   969  0079BE  5001               	movf	___wmul@multiplier^0,w,c
   970  0079C0  0203               	mulwf	___wmul@multiplicand^0,c
   971  0079C2  CFF3 F005          	movff	prodl,___wmul@product
   972  0079C6  CFF4 F006          	movff	prodh,___wmul@product+1
   973  0079CA  5001               	movf	___wmul@multiplier^0,w,c
   974  0079CC  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   975  0079CE  50F3               	movf	243,w,c
   976  0079D0  2606               	addwf	(___wmul@product+1)^0,f,c
   977  0079D2  5002               	movf	(___wmul@multiplier+1)^0,w,c
   978  0079D4  0203               	mulwf	___wmul@multiplicand^0,c
   979  0079D6  50F3               	movf	243,w,c
   980  0079D8  2606               	addwf	(___wmul@product+1)^0,f,c
   981  0079DA  C005  F001         	movff	___wmul@product,?___wmul
   982  0079DE  C006  F002         	movff	___wmul@product+1,?___wmul+1
   983  0079E2  0012               	return		;funcret
   984  0079E4                     __end_of___wmul:
   985                           	callstack 0
   986                           
   987 ;; *************** function _Uart_Read_String *****************
   988 ;; Defined at:
   989 ;;		line 55 in file "uart.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;  Buf             2    0[COMRAM] PTR unsigned char 
   992 ;;		 -> cad_p(14), 
   993 ;;  s_buf           2    2[COMRAM] unsigned int 
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  cont_buf        2    7[COMRAM] unsigned int 
   996 ;;  c               1    6[COMRAM] unsigned char 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1006 ;;      Params:         4       0       0       0       0       0       0       0       0
  1007 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1008 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1009 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1010 ;;Total ram usage:        9 bytes
  1011 ;; Hardware stack levels used: 1
  1012 ;; Hardware stack levels required when called: 1
  1013 ;; This function calls:
  1014 ;;		_Uart_Read
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text6
  1021  007B0C                     __ptext6:
  1022                           	callstack 0
  1023  007B0C                     _Uart_Read_String:
  1024                           	callstack 29
  1025  007B0C                     
  1026                           ;uart.c: 55: void Uart_Read_String(char* Buf, unsigned int s_buf);uart.c: 56: {;uart.c: 
      +                          57:     unsigned int cont_buf = 0;
  1027  007B0C  0E00               	movlw	0
  1028  007B0E  6E09               	movwf	(Uart_Read_String@cont_buf+1)^0,c
  1029  007B10  0E00               	movlw	0
  1030  007B12  6E08               	movwf	Uart_Read_String@cont_buf^0,c
  1031  007B14                     l1202:
  1032                           
  1033                           ;uart.c: 60:     {;uart.c: 61:         c = Uart_Read();
  1034  007B14  ECCC  F03C         	call	_Uart_Read	;wreg free
  1035  007B18  6E07               	movwf	Uart_Read_String@c^0,c
  1036  007B1A                     
  1037                           ;uart.c: 62:         Buf[cont_buf++] = c;
  1038  007B1A  5008               	movf	Uart_Read_String@cont_buf^0,w,c
  1039  007B1C  2401               	addwf	Uart_Read_String@Buf^0,w,c
  1040  007B1E  6ED9               	movwf	fsr2l,c
  1041  007B20  5009               	movf	(Uart_Read_String@cont_buf+1)^0,w,c
  1042  007B22  2002               	addwfc	(Uart_Read_String@Buf+1)^0,w,c
  1043  007B24  6EDA               	movwf	fsr2h,c
  1044  007B26  C007  FFDF         	movff	Uart_Read_String@c,indf2
  1045  007B2A  4A08               	infsnz	Uart_Read_String@cont_buf^0,f,c
  1046  007B2C  2A09               	incf	(Uart_Read_String@cont_buf+1)^0,f,c
  1047  007B2E                     
  1048                           ;uart.c: 63:         if(cont_buf >= s_buf) break;
  1049  007B2E  5003               	movf	Uart_Read_String@s_buf^0,w,c
  1050  007B30  5C08               	subwf	Uart_Read_String@cont_buf^0,w,c
  1051  007B32  5004               	movf	(Uart_Read_String@s_buf+1)^0,w,c
  1052  007B34  5809               	subwfb	(Uart_Read_String@cont_buf+1)^0,w,c
  1053  007B36  A0D8               	btfss	status,0,c
  1054  007B38  EFA0  F03D         	goto	u441
  1055  007B3C  EFA2  F03D         	goto	u440
  1056  007B40                     u441:
  1057  007B40  EFA4  F03D         	goto	l1212
  1058  007B44                     u440:
  1059  007B44  EFAD  F03D         	goto	l1214
  1060  007B48                     l1212:
  1061                           
  1062                           ;uart.c: 64:     }while(c != '\n');
  1063  007B48  0E0A               	movlw	10
  1064  007B4A  1807               	xorwf	Uart_Read_String@c^0,w,c
  1065  007B4C  A4D8               	btfss	status,2,c
  1066  007B4E  EFAB  F03D         	goto	u451
  1067  007B52  EFAD  F03D         	goto	u450
  1068  007B56                     u451:
  1069  007B56  EF8A  F03D         	goto	l1202
  1070  007B5A                     u450:
  1071  007B5A                     l1214:
  1072                           
  1073                           ;uart.c: 65:     Buf[cont_buf-2] = '\0';
  1074  007B5A  5008               	movf	Uart_Read_String@cont_buf^0,w,c
  1075  007B5C  2401               	addwf	Uart_Read_String@Buf^0,w,c
  1076  007B5E  6E05               	movwf	??_Uart_Read_String^0,c
  1077  007B60  5009               	movf	(Uart_Read_String@cont_buf+1)^0,w,c
  1078  007B62  2002               	addwfc	(Uart_Read_String@Buf+1)^0,w,c
  1079  007B64  6E06               	movwf	(??_Uart_Read_String+1)^0,c
  1080  007B66  0EFE               	movlw	254
  1081  007B68  2405               	addwf	??_Uart_Read_String^0,w,c
  1082  007B6A  6ED9               	movwf	fsr2l,c
  1083  007B6C  0EFF               	movlw	255
  1084  007B6E  2006               	addwfc	(??_Uart_Read_String+1)^0,w,c
  1085  007B70  6EDA               	movwf	fsr2h,c
  1086  007B72  0E00               	movlw	0
  1087  007B74  6EDF               	movwf	indf2,c
  1088  007B76  0012               	return		;funcret
  1089  007B78                     __end_of_Uart_Read_String:
  1090                           	callstack 0
  1091                           
  1092 ;; *************** function _Uart_Read *****************
  1093 ;; Defined at:
  1094 ;;		line 43 in file "uart.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;		None
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;		None
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      unsigned char 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1108 ;;      Params:         0       0       0       0       0       0       0       0       0
  1109 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1111 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1112 ;;Total ram usage:        0 bytes
  1113 ;; Hardware stack levels used: 1
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		_Uart_Read_String
  1118 ;;		_Uart_Read_StringUntil
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text7
  1123  007998                     __ptext7:
  1124                           	callstack 0
  1125  007998                     _Uart_Read:
  1126                           	callstack 29
  1127  007998                     l72:
  1128  007998  AA9E               	btfss	158,5,c	;volatile
  1129  00799A  EFD1  F03C         	goto	u11
  1130  00799E  EFD3  F03C         	goto	u10
  1131  0079A2                     u11:
  1132  0079A2  EFCC  F03C         	goto	l72
  1133  0079A6                     u10:
  1134  0079A6                     
  1135                           ;uart.c: 46:     if(RCSTAbits.OERR == 1)
  1136  0079A6  A2AB               	btfss	171,1,c	;volatile
  1137  0079A8  EFD8  F03C         	goto	u21
  1138  0079AC  EFDA  F03C         	goto	u20
  1139  0079B0                     u21:
  1140  0079B0  EFDC  F03C         	goto	l75
  1141  0079B4                     u20:
  1142  0079B4                     
  1143                           ;uart.c: 47:     {;uart.c: 48:         RCSTAbits.CREN = 0;
  1144  0079B4  98AB               	bcf	171,4,c	;volatile
  1145                           
  1146                           ;uart.c: 49:         RCSTAbits.CREN = 1;
  1147  0079B6  88AB               	bsf	171,4,c	;volatile
  1148  0079B8                     l75:
  1149                           
  1150                           ;uart.c: 51:     PIR1bits.RCIF = 0;
  1151  0079B8  9A9E               	bcf	158,5,c	;volatile
  1152  0079BA                     
  1153                           ;uart.c: 52:     return RCREG;
  1154  0079BA  50AE               	movf	174,w,c	;volatile
  1155  0079BC  0012               	return		;funcret
  1156  0079BE                     __end_of_Uart_Read:
  1157                           	callstack 0
  1158                           
  1159 ;; *************** function _Uart_Read_Plot *****************
  1160 ;; Defined at:
  1161 ;;		line 11 in file "uart_plot.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  b_ini           1    wreg     unsigned char 
  1164 ;;  b_fin           1   13[COMRAM] unsigned char 
  1165 ;;  tr_or           2   14[COMRAM] PTR unsigned char 
  1166 ;;		 -> cad_p(14), 
  1167 ;;  n_str           2   16[COMRAM] PTR unsigned char 
  1168 ;;		 -> buffer(8), 
  1169 ;;  s_buf           2   18[COMRAM] int 
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  b_ini           1   21[COMRAM] unsigned char 
  1172 ;;  j               2   28[COMRAM] int 
  1173 ;;  i               2   26[COMRAM] int 
  1174 ;;  conta_fin       2   24[COMRAM] int 
  1175 ;;  conta_ini       2   22[COMRAM] int 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1185 ;;      Params:         7       0       0       0       0       0       0       0       0
  1186 ;;      Locals:         9       0       0       0       0       0       0       0       0
  1187 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1188 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1189 ;;Total ram usage:       17 bytes
  1190 ;; Hardware stack levels used: 1
  1191 ;; Hardware stack levels required when called: 1
  1192 ;; This function calls:
  1193 ;;		_Uart_Read_Substring
  1194 ;; This function is called by:
  1195 ;;		_main
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           	psect	text8
  1200  007C8A                     __ptext8:
  1201                           	callstack 0
  1202  007C8A                     _Uart_Read_Plot:
  1203                           	callstack 29
  1204                           
  1205                           ;incstack = 0
  1206                           ;Uart_Read_Plot@b_ini stored from wreg
  1207  007C8A  6E16               	movwf	Uart_Read_Plot@b_ini^0,c
  1208  007C8C                     
  1209                           ;uart_plot.c: 11: void Uart_Read_Plot(char b_ini, char b_fin, char* tr_or, char* n_str, 
      +                          int s_buf);uart_plot.c: 12: {;uart_plot.c: 13:     int conta_ini = 0;
  1210  007C8C  0E00               	movlw	0
  1211  007C8E  6E18               	movwf	(Uart_Read_Plot@conta_ini+1)^0,c
  1212  007C90  0E00               	movlw	0
  1213  007C92  6E17               	movwf	Uart_Read_Plot@conta_ini^0,c
  1214                           
  1215                           ;uart_plot.c: 14:     int conta_fin = 0;
  1216  007C94  0E00               	movlw	0
  1217  007C96  6E1A               	movwf	(Uart_Read_Plot@conta_fin+1)^0,c
  1218  007C98  0E00               	movlw	0
  1219  007C9A  6E19               	movwf	Uart_Read_Plot@conta_fin^0,c
  1220                           
  1221                           ;uart_plot.c: 15:     for(int i=0; i<s_buf; i++)
  1222  007C9C  0E00               	movlw	0
  1223  007C9E  6E1C               	movwf	(Uart_Read_Plot@i+1)^0,c
  1224  007CA0  0E00               	movlw	0
  1225  007CA2  6E1B               	movwf	Uart_Read_Plot@i^0,c
  1226  007CA4  EF6B  F03E         	goto	l1226
  1227  007CA8                     l1220:
  1228                           
  1229                           ;uart_plot.c: 16:     {;uart_plot.c: 17:         if(tr_or[i] == b_ini){
  1230  007CA8  501B               	movf	Uart_Read_Plot@i^0,w,c
  1231  007CAA  240F               	addwf	Uart_Read_Plot@tr_or^0,w,c
  1232  007CAC  6ED9               	movwf	fsr2l,c
  1233  007CAE  501C               	movf	(Uart_Read_Plot@i+1)^0,w,c
  1234  007CB0  2010               	addwfc	(Uart_Read_Plot@tr_or+1)^0,w,c
  1235  007CB2  6EDA               	movwf	fsr2h,c
  1236  007CB4  5016               	movf	Uart_Read_Plot@b_ini^0,w,c
  1237  007CB6  18DE               	xorwf	postinc2,w,c
  1238  007CB8  A4D8               	btfss	status,2,c
  1239  007CBA  EF61  F03E         	goto	u461
  1240  007CBE  EF63  F03E         	goto	u460
  1241  007CC2                     u461:
  1242  007CC2  EF69  F03E         	goto	l1224
  1243  007CC6                     u460:
  1244  007CC6                     
  1245                           ;uart_plot.c: 18:             conta_ini = i;
  1246  007CC6  C01B  F017         	movff	Uart_Read_Plot@i,Uart_Read_Plot@conta_ini
  1247  007CCA  C01C  F018         	movff	Uart_Read_Plot@i+1,Uart_Read_Plot@conta_ini+1
  1248                           
  1249                           ;uart_plot.c: 19:             break;
  1250  007CCE  EF7A  F03E         	goto	l1228
  1251  007CD2                     l1224:
  1252                           
  1253                           ;uart_plot.c: 21:     }
  1254  007CD2  4A1B               	infsnz	Uart_Read_Plot@i^0,f,c
  1255  007CD4  2A1C               	incf	(Uart_Read_Plot@i+1)^0,f,c
  1256  007CD6                     l1226:
  1257  007CD6  5013               	movf	Uart_Read_Plot@s_buf^0,w,c
  1258  007CD8  5C1B               	subwf	Uart_Read_Plot@i^0,w,c
  1259  007CDA  501C               	movf	(Uart_Read_Plot@i+1)^0,w,c
  1260  007CDC  0A80               	xorlw	128
  1261  007CDE  6E15               	movwf	??_Uart_Read_Plot^0,c
  1262  007CE0  5014               	movf	(Uart_Read_Plot@s_buf+1)^0,w,c
  1263  007CE2  0A80               	xorlw	128
  1264  007CE4  5815               	subwfb	??_Uart_Read_Plot^0,w,c
  1265  007CE6  A0D8               	btfss	status,0,c
  1266  007CE8  EF78  F03E         	goto	u471
  1267  007CEC  EF7A  F03E         	goto	u470
  1268  007CF0                     u471:
  1269  007CF0  EF54  F03E         	goto	l1220
  1270  007CF4                     u470:
  1271  007CF4                     l1228:
  1272                           
  1273                           ;uart_plot.c: 22:     for(int j=0; j<s_buf; j++)
  1274  007CF4  0E00               	movlw	0
  1275  007CF6  6E1E               	movwf	(Uart_Read_Plot@j+1)^0,c
  1276  007CF8  0E00               	movlw	0
  1277  007CFA  6E1D               	movwf	Uart_Read_Plot@j^0,c
  1278  007CFC  EF97  F03E         	goto	l1236
  1279  007D00                     l1230:
  1280                           
  1281                           ;uart_plot.c: 23:     {;uart_plot.c: 24:         if(tr_or[j] == b_fin){
  1282  007D00  501D               	movf	Uart_Read_Plot@j^0,w,c
  1283  007D02  240F               	addwf	Uart_Read_Plot@tr_or^0,w,c
  1284  007D04  6ED9               	movwf	fsr2l,c
  1285  007D06  501E               	movf	(Uart_Read_Plot@j+1)^0,w,c
  1286  007D08  2010               	addwfc	(Uart_Read_Plot@tr_or+1)^0,w,c
  1287  007D0A  6EDA               	movwf	fsr2h,c
  1288  007D0C  500E               	movf	Uart_Read_Plot@b_fin^0,w,c
  1289  007D0E  18DE               	xorwf	postinc2,w,c
  1290  007D10  A4D8               	btfss	status,2,c
  1291  007D12  EF8D  F03E         	goto	u481
  1292  007D16  EF8F  F03E         	goto	u480
  1293  007D1A                     u481:
  1294  007D1A  EF95  F03E         	goto	l1234
  1295  007D1E                     u480:
  1296  007D1E                     
  1297                           ;uart_plot.c: 25:             conta_fin = j;
  1298  007D1E  C01D  F019         	movff	Uart_Read_Plot@j,Uart_Read_Plot@conta_fin
  1299  007D22  C01E  F01A         	movff	Uart_Read_Plot@j+1,Uart_Read_Plot@conta_fin+1
  1300                           
  1301                           ;uart_plot.c: 26:             break;
  1302  007D26  EFA6  F03E         	goto	l1238
  1303  007D2A                     l1234:
  1304                           
  1305                           ;uart_plot.c: 28:     }
  1306  007D2A  4A1D               	infsnz	Uart_Read_Plot@j^0,f,c
  1307  007D2C  2A1E               	incf	(Uart_Read_Plot@j+1)^0,f,c
  1308  007D2E                     l1236:
  1309  007D2E  5013               	movf	Uart_Read_Plot@s_buf^0,w,c
  1310  007D30  5C1D               	subwf	Uart_Read_Plot@j^0,w,c
  1311  007D32  501E               	movf	(Uart_Read_Plot@j+1)^0,w,c
  1312  007D34  0A80               	xorlw	128
  1313  007D36  6E15               	movwf	??_Uart_Read_Plot^0,c
  1314  007D38  5014               	movf	(Uart_Read_Plot@s_buf+1)^0,w,c
  1315  007D3A  0A80               	xorlw	128
  1316  007D3C  5815               	subwfb	??_Uart_Read_Plot^0,w,c
  1317  007D3E  A0D8               	btfss	status,0,c
  1318  007D40  EFA4  F03E         	goto	u491
  1319  007D44  EFA6  F03E         	goto	u490
  1320  007D48                     u491:
  1321  007D48  EF80  F03E         	goto	l1230
  1322  007D4C                     u490:
  1323  007D4C                     l1238:
  1324                           
  1325                           ;uart_plot.c: 29:     Uart_Read_Substring(tr_or, n_str, conta_ini+1, conta_fin-1);
  1326  007D4C  C00F  F001         	movff	Uart_Read_Plot@tr_or,Uart_Read_Substring@cp
  1327  007D50  C010  F002         	movff	Uart_Read_Plot@tr_or+1,Uart_Read_Substring@cp+1
  1328  007D54  C011  F003         	movff	Uart_Read_Plot@n_str,Uart_Read_Substring@vc
  1329  007D58  C012  F004         	movff	Uart_Read_Plot@n_str+1,Uart_Read_Substring@vc+1
  1330  007D5C  0E01               	movlw	1
  1331  007D5E  2417               	addwf	Uart_Read_Plot@conta_ini^0,w,c
  1332  007D60  6E05               	movwf	Uart_Read_Substring@inc^0,c
  1333  007D62  0E00               	movlw	0
  1334  007D64  2018               	addwfc	(Uart_Read_Plot@conta_ini+1)^0,w,c
  1335  007D66  6E06               	movwf	(Uart_Read_Substring@inc+1)^0,c
  1336  007D68  0EFF               	movlw	255
  1337  007D6A  2419               	addwf	Uart_Read_Plot@conta_fin^0,w,c
  1338  007D6C  6E07               	movwf	Uart_Read_Substring@fn^0,c
  1339  007D6E  0EFF               	movlw	255
  1340  007D70  201A               	addwfc	(Uart_Read_Plot@conta_fin+1)^0,w,c
  1341  007D72  6E08               	movwf	(Uart_Read_Substring@fn+1)^0,c
  1342  007D74  EC52  F03D         	call	_Uart_Read_Substring	;wreg free
  1343  007D78  0012               	return		;funcret
  1344  007D7A                     __end_of_Uart_Read_Plot:
  1345                           	callstack 0
  1346                           
  1347 ;; *************** function _Uart_Read_Substring *****************
  1348 ;; Defined at:
  1349 ;;		line 69 in file "uart.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;  cp              2    0[COMRAM] PTR unsigned char 
  1352 ;;		 -> cad_p(14), 
  1353 ;;  vc              2    2[COMRAM] PTR unsigned char 
  1354 ;;		 -> buffer(8), 
  1355 ;;  inc             2    4[COMRAM] int 
  1356 ;;  fn              2    6[COMRAM] int 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  lt              2    9[COMRAM] int 
  1359 ;;  pt              2   11[COMRAM] int 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1369 ;;      Params:         8       0       0       0       0       0       0       0       0
  1370 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1371 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1372 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1373 ;;Total ram usage:       13 bytes
  1374 ;; Hardware stack levels used: 1
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_Uart_Read_Plot
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text9
  1383  007AA4                     __ptext9:
  1384                           	callstack 0
  1385  007AA4                     _Uart_Read_Substring:
  1386                           	callstack 29
  1387  007AA4                     
  1388                           ;uart.c: 69: void Uart_Read_Substring(char* cp, char* vc, int inc, int fn);uart.c: 70: {
      +                          ;uart.c: 71:     int pt = 0;
  1389  007AA4  0E00               	movlw	0
  1390  007AA6  6E0D               	movwf	(Uart_Read_Substring@pt+1)^0,c
  1391  007AA8  0E00               	movlw	0
  1392  007AAA  6E0C               	movwf	Uart_Read_Substring@pt^0,c
  1393  007AAC                     
  1394                           ;uart.c: 72:     for(int lt=inc; lt<=fn; lt++)
  1395  007AAC  C005  F00A         	movff	Uart_Read_Substring@inc,Uart_Read_Substring@lt
  1396  007AB0  C006  F00B         	movff	Uart_Read_Substring@inc+1,Uart_Read_Substring@lt+1
  1397  007AB4  EF6E  F03D         	goto	l1134
  1398  007AB8                     l1128:
  1399                           
  1400                           ;uart.c: 73:     {;uart.c: 74:         vc[pt] = cp[lt];
  1401  007AB8  500A               	movf	Uart_Read_Substring@lt^0,w,c
  1402  007ABA  2401               	addwf	Uart_Read_Substring@cp^0,w,c
  1403  007ABC  6ED9               	movwf	fsr2l,c
  1404  007ABE  500B               	movf	(Uart_Read_Substring@lt+1)^0,w,c
  1405  007AC0  2002               	addwfc	(Uart_Read_Substring@cp+1)^0,w,c
  1406  007AC2  6EDA               	movwf	fsr2h,c
  1407  007AC4  500C               	movf	Uart_Read_Substring@pt^0,w,c
  1408  007AC6  2403               	addwf	Uart_Read_Substring@vc^0,w,c
  1409  007AC8  6EE1               	movwf	fsr1l,c
  1410  007ACA  500D               	movf	(Uart_Read_Substring@pt+1)^0,w,c
  1411  007ACC  2004               	addwfc	(Uart_Read_Substring@vc+1)^0,w,c
  1412  007ACE  6EE2               	movwf	fsr1h,c
  1413  007AD0  CFDF FFE7          	movff	indf2,indf1
  1414  007AD4                     
  1415                           ;uart.c: 75:         pt++;
  1416  007AD4  4A0C               	infsnz	Uart_Read_Substring@pt^0,f,c
  1417  007AD6  2A0D               	incf	(Uart_Read_Substring@pt+1)^0,f,c
  1418  007AD8                     
  1419                           ;uart.c: 76:     }
  1420  007AD8  4A0A               	infsnz	Uart_Read_Substring@lt^0,f,c
  1421  007ADA  2A0B               	incf	(Uart_Read_Substring@lt+1)^0,f,c
  1422  007ADC                     l1134:
  1423  007ADC  500A               	movf	Uart_Read_Substring@lt^0,w,c
  1424  007ADE  5C07               	subwf	Uart_Read_Substring@fn^0,w,c
  1425  007AE0  5008               	movf	(Uart_Read_Substring@fn+1)^0,w,c
  1426  007AE2  0A80               	xorlw	128
  1427  007AE4  6E09               	movwf	??_Uart_Read_Substring^0,c
  1428  007AE6  500B               	movf	(Uart_Read_Substring@lt+1)^0,w,c
  1429  007AE8  0A80               	xorlw	128
  1430  007AEA  5809               	subwfb	??_Uart_Read_Substring^0,w,c
  1431  007AEC  B0D8               	btfsc	status,0,c
  1432  007AEE  EF7B  F03D         	goto	u341
  1433  007AF2  EF7D  F03D         	goto	u340
  1434  007AF6                     u341:
  1435  007AF6  EF5C  F03D         	goto	l1128
  1436  007AFA                     u340:
  1437  007AFA                     
  1438                           ;uart.c: 77:     vc[pt] = '\0';
  1439  007AFA  500C               	movf	Uart_Read_Substring@pt^0,w,c
  1440  007AFC  2403               	addwf	Uart_Read_Substring@vc^0,w,c
  1441  007AFE  6ED9               	movwf	fsr2l,c
  1442  007B00  500D               	movf	(Uart_Read_Substring@pt+1)^0,w,c
  1443  007B02  2004               	addwfc	(Uart_Read_Substring@vc+1)^0,w,c
  1444  007B04  6EDA               	movwf	fsr2h,c
  1445  007B06  0E00               	movlw	0
  1446  007B08  6EDF               	movwf	indf2,c
  1447  007B0A  0012               	return		;funcret
  1448  007B0C                     __end_of_Uart_Read_Substring:
  1449                           	callstack 0
  1450                           
  1451 ;; *************** function _Uart_Init *****************
  1452 ;; Defined at:
  1453 ;;		line 11 in file "uart.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;  baud            4   13[COMRAM] unsigned long 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  vx              2   21[COMRAM] unsigned int 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg, status,2, status,0, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1467 ;;      Params:         4       0       0       0       0       0       0       0       0
  1468 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1469 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1470 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1471 ;;Total ram usage:       10 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; Hardware stack levels required when called: 1
  1474 ;; This function calls:
  1475 ;;		___lldiv
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           	psect	text10
  1482  007B78                     __ptext10:
  1483                           	callstack 0
  1484  007B78                     _Uart_Init:
  1485                           	callstack 29
  1486  007B78                     
  1487                           ;uart.c: 11: void Uart_Init(unsigned long baud);uart.c: 12: {;uart.c: 13:     TRISCbits.
      +                          RC6 = 0;
  1488  007B78  9C94               	bcf	148,6,c	;volatile
  1489                           
  1490                           ;uart.c: 14:     TRISCbits.RC7 = 1;
  1491  007B7A  8E94               	bsf	148,7,c	;volatile
  1492  007B7C                     
  1493                           ;uart.c: 15:     TXSTA = 0x24;
  1494  007B7C  0E24               	movlw	36
  1495  007B7E  6EAC               	movwf	172,c	;volatile
  1496                           
  1497                           ;uart.c: 16:     RCSTA = 0x90;
  1498  007B80  0E90               	movlw	144
  1499  007B82  6EAB               	movwf	171,c	;volatile
  1500                           
  1501                           ;uart.c: 17:     BAUDCON = 0x00;
  1502  007B84  0E00               	movlw	0
  1503  007B86  6EB8               	movwf	184,c	;volatile
  1504  007B88                     
  1505                           ;uart.c: 18:     BAUDCONbits.BRG16 = 1;
  1506  007B88  86B8               	bsf	184,3,c	;volatile
  1507  007B8A                     
  1508                           ;uart.c: 19:     unsigned int vx = (48000000/(baud*4))-1;
  1509  007B8A  0E00               	movlw	0
  1510  007B8C  6E01               	movwf	___lldiv@dividend^0,c
  1511  007B8E  0E6C               	movlw	108
  1512  007B90  6E02               	movwf	(___lldiv@dividend+1)^0,c
  1513  007B92  0EDC               	movlw	220
  1514  007B94  6E03               	movwf	(___lldiv@dividend+2)^0,c
  1515  007B96  0E02               	movlw	2
  1516  007B98  6E04               	movwf	(___lldiv@dividend+3)^0,c
  1517  007B9A  C00E  F012         	movff	Uart_Init@baud,??_Uart_Init
  1518  007B9E  C00F  F013         	movff	Uart_Init@baud+1,??_Uart_Init+1
  1519  007BA2  C010  F014         	movff	Uart_Init@baud+2,??_Uart_Init+2
  1520  007BA6  C011  F015         	movff	Uart_Init@baud+3,??_Uart_Init+3
  1521  007BAA  0E02               	movlw	2
  1522  007BAC                     u425:
  1523  007BAC  90D8               	bcf	status,0,c
  1524  007BAE  3612               	rlcf	??_Uart_Init^0,f,c
  1525  007BB0  3613               	rlcf	(??_Uart_Init+1)^0,f,c
  1526  007BB2  3614               	rlcf	(??_Uart_Init+2)^0,f,c
  1527  007BB4  3615               	rlcf	(??_Uart_Init+3)^0,f,c
  1528  007BB6  2EE8               	decfsz	wreg,f,c
  1529  007BB8  EFD6  F03D         	goto	u425
  1530  007BBC  C012  F005         	movff	??_Uart_Init,___lldiv@divisor
  1531  007BC0  C013  F006         	movff	??_Uart_Init+1,___lldiv@divisor+1
  1532  007BC4  C014  F007         	movff	??_Uart_Init+2,___lldiv@divisor+2
  1533  007BC8  C015  F008         	movff	??_Uart_Init+3,___lldiv@divisor+3
  1534  007BCC  ECF3  F03D         	call	___lldiv	;wreg free
  1535  007BD0  0EFF               	movlw	255
  1536  007BD2  2401               	addwf	?___lldiv^0,w,c
  1537  007BD4  6E16               	movwf	Uart_Init@vx^0,c
  1538  007BD6  0EFF               	movlw	255
  1539  007BD8  2002               	addwfc	(?___lldiv+1)^0,w,c
  1540  007BDA  6E17               	movwf	(Uart_Init@vx+1)^0,c
  1541  007BDC                     
  1542                           ;uart.c: 20:     SPBRG = vx & 0x00FF;
  1543  007BDC  C016  FFAF         	movff	Uart_Init@vx,4015	;volatile
  1544  007BE0                     
  1545                           ;uart.c: 21:     SPBRGH = vx >> 8;
  1546  007BE0  5017               	movf	(Uart_Init@vx+1)^0,w,c
  1547  007BE2  6EB0               	movwf	176,c	;volatile
  1548  007BE4  0012               	return		;funcret
  1549  007BE6                     __end_of_Uart_Init:
  1550                           	callstack 0
  1551                           
  1552 ;; *************** function ___lldiv *****************
  1553 ;; Defined at:
  1554 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__lldiv.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;  dividend        4    0[COMRAM] unsigned long 
  1557 ;;  divisor         4    4[COMRAM] unsigned long 
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;  quotient        4    8[COMRAM] unsigned long 
  1560 ;;  counter         1   12[COMRAM] unsigned char 
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  4    0[COMRAM] unsigned long 
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1570 ;;      Params:         8       0       0       0       0       0       0       0       0
  1571 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1572 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1573 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1574 ;;Total ram usage:       13 bytes
  1575 ;; Hardware stack levels used: 1
  1576 ;; This function calls:
  1577 ;;		Nothing
  1578 ;; This function is called by:
  1579 ;;		_Uart_Init
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text11
  1584  007BE6                     __ptext11:
  1585                           	callstack 0
  1586  007BE6                     ___lldiv:
  1587                           	callstack 29
  1588  007BE6  0E00               	movlw	0
  1589  007BE8  6E09               	movwf	___lldiv@quotient^0,c
  1590  007BEA  0E00               	movlw	0
  1591  007BEC  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  1592  007BEE  0E00               	movlw	0
  1593  007BF0  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  1594  007BF2  0E00               	movlw	0
  1595  007BF4  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  1596  007BF6  5005               	movf	___lldiv@divisor^0,w,c
  1597  007BF8  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  1598  007BFA  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  1599  007BFC  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  1600  007BFE  B4D8               	btfsc	status,2,c
  1601  007C00  EF04  F03E         	goto	u351
  1602  007C04  EF06  F03E         	goto	u350
  1603  007C08                     u351:
  1604  007C08  EF3C  F03E         	goto	l173
  1605  007C0C                     u350:
  1606  007C0C  0E01               	movlw	1
  1607  007C0E  6E0D               	movwf	___lldiv@counter^0,c
  1608  007C10  EF10  F03E         	goto	l1154
  1609  007C14                     l1152:
  1610  007C14  90D8               	bcf	status,0,c
  1611  007C16  3605               	rlcf	___lldiv@divisor^0,f,c
  1612  007C18  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  1613  007C1A  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  1614  007C1C  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  1615  007C1E  2A0D               	incf	___lldiv@counter^0,f,c
  1616  007C20                     l1154:
  1617  007C20  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  1618  007C22  EF15  F03E         	goto	u361
  1619  007C26  EF17  F03E         	goto	u360
  1620  007C2A                     u361:
  1621  007C2A  EF0A  F03E         	goto	l1152
  1622  007C2E                     u360:
  1623  007C2E                     l1156:
  1624  007C2E  90D8               	bcf	status,0,c
  1625  007C30  3609               	rlcf	___lldiv@quotient^0,f,c
  1626  007C32  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  1627  007C34  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  1628  007C36  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  1629  007C38  5005               	movf	___lldiv@divisor^0,w,c
  1630  007C3A  5C01               	subwf	___lldiv@dividend^0,w,c
  1631  007C3C  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1632  007C3E  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  1633  007C40  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1634  007C42  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  1635  007C44  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1636  007C46  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  1637  007C48  A0D8               	btfss	status,0,c
  1638  007C4A  EF29  F03E         	goto	u371
  1639  007C4E  EF2B  F03E         	goto	u370
  1640  007C52                     u371:
  1641  007C52  EF34  F03E         	goto	l1164
  1642  007C56                     u370:
  1643  007C56  5005               	movf	___lldiv@divisor^0,w,c
  1644  007C58  5E01               	subwf	___lldiv@dividend^0,f,c
  1645  007C5A  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1646  007C5C  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  1647  007C5E  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1648  007C60  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  1649  007C62  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1650  007C64  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  1651  007C66  8009               	bsf	___lldiv@quotient^0,0,c
  1652  007C68                     l1164:
  1653  007C68  90D8               	bcf	status,0,c
  1654  007C6A  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  1655  007C6C  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  1656  007C6E  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  1657  007C70  3205               	rrcf	___lldiv@divisor^0,f,c
  1658  007C72  2E0D               	decfsz	___lldiv@counter^0,f,c
  1659  007C74  EF17  F03E         	goto	l1156
  1660  007C78                     l173:
  1661  007C78  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1662  007C7C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1663  007C80  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1664  007C84  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1665  007C88  0012               	return		;funcret
  1666  007C8A                     __end_of___lldiv:
  1667                           	callstack 0
  1668                           
  1669 ;; *************** function _Uart_Available *****************
  1670 ;; Defined at:
  1671 ;;		line 24 in file "uart.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;		None
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;		None
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  2    0[COMRAM] short 
  1678 ;; Registers used:
  1679 ;;		wreg, status,2
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1685 ;;      Params:         2       0       0       0       0       0       0       0       0
  1686 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1687 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1688 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1689 ;;Total ram usage:        3 bytes
  1690 ;; Hardware stack levels used: 1
  1691 ;; This function calls:
  1692 ;;		Nothing
  1693 ;; This function is called by:
  1694 ;;		_main
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text12
  1699  007958                     __ptext12:
  1700                           	callstack 0
  1701  007958                     _Uart_Available:
  1702                           	callstack 30
  1703  007958                     
  1704                           ;uart.c: 26:     return PIR1bits.RCIF ? 1 : 0;
  1705  007958  BA9E               	btfsc	158,5,c	;volatile
  1706  00795A  EFB1  F03C         	goto	u431
  1707  00795E  EFB5  F03C         	goto	u430
  1708  007962                     u431:
  1709  007962  6A03               	clrf	??_Uart_Available^0,c
  1710  007964  2A03               	incf	??_Uart_Available^0,f,c
  1711  007966  EFB6  F03C         	goto	u438
  1712  00796A                     u430:
  1713  00796A  6A03               	clrf	??_Uart_Available^0,c
  1714  00796C                     u438:
  1715  00796C  5003               	movf	??_Uart_Available^0,w,c
  1716  00796E  6E01               	movwf	?_Uart_Available^0,c
  1717  007970  6A02               	clrf	(?_Uart_Available+1)^0,c
  1718  007972  0012               	return		;funcret
  1719  007974                     __end_of_Uart_Available:
  1720                           	callstack 0
  1721                           
  1722 ;; *************** function _PWM_Init *****************
  1723 ;; Defined at:
  1724 ;;		line 11 in file "pwm.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1738 ;;      Params:         0       0       0       0       0       0       0       0       0
  1739 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1741 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used: 1
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_main
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text13
  1752  007974                     __ptext13:
  1753                           	callstack 0
  1754  007974                     _PWM_Init:
  1755                           	callstack 30
  1756  007974                     
  1757                           ;pwm.c: 13:     PR2 = 0x3E;
  1758  007974  0E3E               	movlw	62
  1759  007976  6ECB               	movwf	203,c	;volatile
  1760                           
  1761                           ;pwm.c: 15:     CCPR1L = 0;
  1762  007978  0E00               	movlw	0
  1763  00797A  6EBE               	movwf	190,c	;volatile
  1764  00797C                     
  1765                           ;pwm.c: 16:     TRISCbits.TRISC2 = 0;
  1766  00797C  9494               	bcf	148,2,c	;volatile
  1767                           
  1768                           ;pwm.c: 20:     CCPR2L = 0;
  1769  00797E  0E00               	movlw	0
  1770  007980  6EBB               	movwf	187,c	;volatile
  1771  007982                     
  1772                           ;pwm.c: 21:     TRISCbits.TRISC1 = 0;
  1773  007982  9294               	bcf	148,1,c	;volatile
  1774                           
  1775                           ;pwm.c: 23:     T2CON = 0x03;
  1776  007984  0E03               	movlw	3
  1777  007986  6ECA               	movwf	202,c	;volatile
  1778                           
  1779                           ;pwm.c: 26:     CCP1CON = 0x0C;
  1780  007988  0E0C               	movlw	12
  1781  00798A  6EBD               	movwf	189,c	;volatile
  1782                           
  1783                           ;pwm.c: 29:     CCP2CON = 0x0C;
  1784  00798C  0E0C               	movlw	12
  1785  00798E  6EBA               	movwf	186,c	;volatile
  1786                           
  1787                           ;pwm.c: 31:     TMR2 = 0;
  1788  007990  0E00               	movlw	0
  1789  007992  6ECC               	movwf	204,c	;volatile
  1790  007994                     
  1791                           ;pwm.c: 32:     T2CONbits.TMR2ON = 1;
  1792  007994  84CA               	bsf	202,2,c	;volatile
  1793  007996  0012               	return		;funcret
  1794  007998                     __end_of_PWM_Init:
  1795                           	callstack 0
  1796                           
  1797 ;; *************** function _PWM_1_Set_Duty *****************
  1798 ;; Defined at:
  1799 ;;		line 35 in file "pwm.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  value           1    wreg     unsigned char 
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;  value           1    0[COMRAM] unsigned char 
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2, status,0
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1813 ;;      Params:         0       0       0       0       0       0       0       0       0
  1814 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1816 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1817 ;;Total ram usage:        1 bytes
  1818 ;; Hardware stack levels used: 1
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_main
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text14
  1827  007936                     __ptext14:
  1828                           	callstack 0
  1829  007936                     _PWM_1_Set_Duty:
  1830                           	callstack 30
  1831                           
  1832                           ;incstack = 0
  1833                           ;PWM_1_Set_Duty@value stored from wreg
  1834  007936  6E01               	movwf	PWM_1_Set_Duty@value^0,c
  1835  007938                     
  1836                           ;pwm.c: 35: void PWM_1_Set_Duty(unsigned char value);pwm.c: 36: {;pwm.c: 37:     CCPR1L 
      +                          = (value >> 2);
  1837  007938  4001               	rrncf	PWM_1_Set_Duty@value^0,w,c
  1838  00793A  42E8               	rrncf	wreg,f,c
  1839  00793C  0B3F               	andlw	63
  1840  00793E  6EBE               	movwf	190,c	;volatile
  1841  007940  0012               	return		;funcret
  1842  007942                     __end_of_PWM_1_Set_Duty:
  1843                           	callstack 0
  1844  0000                     
  1845                           	psect	rparam
  1846  0000                     
  1847                           	psect	idloc
  1848                           
  1849                           ;Config register IDLOC0 @ 0x200000
  1850                           ;	unspecified, using default values
  1851  200000                     	org	2097152
  1852  200000  FF                 	db	255
  1853                           
  1854                           ;Config register IDLOC1 @ 0x200001
  1855                           ;	unspecified, using default values
  1856  200001                     	org	2097153
  1857  200001  FF                 	db	255
  1858                           
  1859                           ;Config register IDLOC2 @ 0x200002
  1860                           ;	unspecified, using default values
  1861  200002                     	org	2097154
  1862  200002  FF                 	db	255
  1863                           
  1864                           ;Config register IDLOC3 @ 0x200003
  1865                           ;	unspecified, using default values
  1866  200003                     	org	2097155
  1867  200003  FF                 	db	255
  1868                           
  1869                           ;Config register IDLOC4 @ 0x200004
  1870                           ;	unspecified, using default values
  1871  200004                     	org	2097156
  1872  200004  FF                 	db	255
  1873                           
  1874                           ;Config register IDLOC5 @ 0x200005
  1875                           ;	unspecified, using default values
  1876  200005                     	org	2097157
  1877  200005  FF                 	db	255
  1878                           
  1879                           ;Config register IDLOC6 @ 0x200006
  1880                           ;	unspecified, using default values
  1881  200006                     	org	2097158
  1882  200006  FF                 	db	255
  1883                           
  1884                           ;Config register IDLOC7 @ 0x200007
  1885                           ;	unspecified, using default values
  1886  200007                     	org	2097159
  1887  200007  FF                 	db	255
  1888                           
  1889                           	psect	config
  1890                           
  1891                           ;Config register CONFIG1L @ 0x300000
  1892                           ;	PLL Prescaler Selection bits
  1893                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1894                           ;	System Clock Postscaler Selection bits
  1895                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1896                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1897                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1898  300000                     	org	3145728
  1899  300000  21                 	db	33
  1900                           
  1901                           ;Config register CONFIG1H @ 0x300001
  1902                           ;	Oscillator Selection bits
  1903                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  1904                           ;	Fail-Safe Clock Monitor Enable bit
  1905                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1906                           ;	Internal/External Oscillator Switchover bit
  1907                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1908  300001                     	org	3145729
  1909  300001  0E                 	db	14
  1910                           
  1911                           ;Config register CONFIG2L @ 0x300002
  1912                           ;	Power-up Timer Enable bit
  1913                           ;	PWRT = OFF, PWRT disabled
  1914                           ;	Brown-out Reset Enable bits
  1915                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1916                           ;	Brown-out Reset Voltage bits
  1917                           ;	BORV = 3, Minimum setting 2.05V
  1918                           ;	USB Voltage Regulator Enable bit
  1919                           ;	VREGEN = OFF, USB voltage regulator disabled
  1920  300002                     	org	3145730
  1921  300002  19                 	db	25
  1922                           
  1923                           ;Config register CONFIG2H @ 0x300003
  1924                           ;	Watchdog Timer Enable bit
  1925                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1926                           ;	Watchdog Timer Postscale Select bits
  1927                           ;	WDTPS = 32768, 1:32768
  1928  300003                     	org	3145731
  1929  300003  1E                 	db	30
  1930                           
  1931                           ; Padding undefined space
  1932  300004                     	org	3145732
  1933  300004  FF                 	db	255
  1934                           
  1935                           ;Config register CONFIG3H @ 0x300005
  1936                           ;	CCP2 MUX bit
  1937                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1938                           ;	PORTB A/D Enable bit
  1939                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1940                           ;	Low-Power Timer 1 Oscillator Enable bit
  1941                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1942                           ;	MCLR Pin Enable bit
  1943                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1944  300005                     	org	3145733
  1945  300005  81                 	db	129
  1946                           
  1947                           ;Config register CONFIG4L @ 0x300006
  1948                           ;	Stack Full/Underflow Reset Enable bit
  1949                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1950                           ;	Single-Supply ICSP Enable bit
  1951                           ;	LVP = OFF, Single-Supply ICSP disabled
  1952                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1953                           ;	ICPRT = OFF, ICPORT disabled
  1954                           ;	Extended Instruction Set Enable bit
  1955                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1956                           ;	Background Debugger Enable bit
  1957                           ;	DEBUG = 0x1, unprogrammed default
  1958  300006                     	org	3145734
  1959  300006  81                 	db	129
  1960                           
  1961                           ; Padding undefined space
  1962  300007                     	org	3145735
  1963  300007  FF                 	db	255
  1964                           
  1965                           ;Config register CONFIG5L @ 0x300008
  1966                           ;	Code Protection bit
  1967                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1968                           ;	Code Protection bit
  1969                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1970                           ;	Code Protection bit
  1971                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1972                           ;	Code Protection bit
  1973                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1974  300008                     	org	3145736
  1975  300008  0F                 	db	15
  1976                           
  1977                           ;Config register CONFIG5H @ 0x300009
  1978                           ;	Boot Block Code Protection bit
  1979                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1980                           ;	Data EEPROM Code Protection bit
  1981                           ;	CPD = OFF, Data EEPROM is not code-protected
  1982  300009                     	org	3145737
  1983  300009  C0                 	db	192
  1984                           
  1985                           ;Config register CONFIG6L @ 0x30000A
  1986                           ;	Write Protection bit
  1987                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1988                           ;	Write Protection bit
  1989                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1990                           ;	Write Protection bit
  1991                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1992                           ;	Write Protection bit
  1993                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1994  30000A                     	org	3145738
  1995  30000A  0F                 	db	15
  1996                           
  1997                           ;Config register CONFIG6H @ 0x30000B
  1998                           ;	Configuration Register Write Protection bit
  1999                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2000                           ;	Boot Block Write Protection bit
  2001                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  2002                           ;	Data EEPROM Write Protection bit
  2003                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2004  30000B                     	org	3145739
  2005  30000B  E0                 	db	224
  2006                           
  2007                           ;Config register CONFIG7L @ 0x30000C
  2008                           ;	Table Read Protection bit
  2009                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2010                           ;	Table Read Protection bit
  2011                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2012                           ;	Table Read Protection bit
  2013                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2014                           ;	Table Read Protection bit
  2015                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2016  30000C                     	org	3145740
  2017  30000C  0F                 	db	15
  2018                           
  2019                           ;Config register CONFIG7H @ 0x30000D
  2020                           ;	Boot Block Table Read Protection bit
  2021                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2022  30000D                     	org	3145741
  2023  30000D  40                 	db	64
  2024                           tosu	equ	0xFFF
  2025                           tosh	equ	0xFFE
  2026                           tosl	equ	0xFFD
  2027                           stkptr	equ	0xFFC
  2028                           pclatu	equ	0xFFB
  2029                           pclath	equ	0xFFA
  2030                           pcl	equ	0xFF9
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           prodh	equ	0xFF4
  2036                           prodl	equ	0xFF3
  2037                           indf0	equ	0xFEF
  2038                           postinc0	equ	0xFEE
  2039                           postdec0	equ	0xFED
  2040                           preinc0	equ	0xFEC
  2041                           plusw0	equ	0xFEB
  2042                           fsr0h	equ	0xFEA
  2043                           fsr0l	equ	0xFE9
  2044                           wreg	equ	0xFE8
  2045                           indf1	equ	0xFE7
  2046                           postinc1	equ	0xFE6
  2047                           postdec1	equ	0xFE5
  2048                           preinc1	equ	0xFE4
  2049                           plusw1	equ	0xFE3
  2050                           fsr1h	equ	0xFE2
  2051                           fsr1l	equ	0xFE1
  2052                           bsr	equ	0xFE0
  2053                           indf2	equ	0xFDF
  2054                           postinc2	equ	0xFDE
  2055                           postdec2	equ	0xFDD
  2056                           preinc2	equ	0xFDC
  2057                           plusw2	equ	0xFDB
  2058                           fsr2h	equ	0xFDA
  2059                           fsr2l	equ	0xFD9
  2060                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      57
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 14
		 -> cad_p(COMRAM[14]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 14
		 -> cad_p(COMRAM[14]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 8
		 -> buffer(COMRAM[8]), 

    Uart_Read_Plot@n_str	PTR unsigned char  size(2) Largest target is 8
		 -> buffer(COMRAM[8]), 

    Uart_Read_Plot@tr_or	PTR unsigned char  size(2) Largest target is 14
		 -> cad_p(COMRAM[14]), 

    Uart_Read_Substring@cp	PTR unsigned char  size(2) Largest target is 14
		 -> cad_p(COMRAM[14]), 

    Uart_Read_Substring@vc	PTR unsigned char  size(2) Largest target is 8
		 -> buffer(COMRAM[8]), 

    Uart_Read_String@Buf	PTR unsigned char  size(2) Largest target is 14
		 -> cad_p(COMRAM[14]), 


Critical Paths under _main in COMRAM

    _main->_Uart_Read_Plot
    _atoi->_isspace
    _Uart_Read_Plot->_Uart_Read_Substring
    _Uart_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    3666
                                             30 COMRAM     5     5      0
                     _PWM_1_Set_Duty
                           _PWM_Init
                     _Uart_Available
                          _Uart_Init
                     _Uart_Read_Plot
                   _Uart_Read_String
                               _atoi
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               4     2      2     242
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _atoi                                                15    13      2    1076
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (2) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Uart_Read_String                                     9     5      4     332
                                              0 COMRAM     9     5      4
                          _Uart_Read
 ---------------------------------------------------------------------------------
 (2) _Uart_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Uart_Read_Plot                                      17    10      7    1475
                                             13 COMRAM    17    10      7
                _Uart_Read_Substring
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _Uart_Read_Substring                                 13     5      8     507
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _Uart_Init                                           10     6      4     457
                                             13 COMRAM    10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _Uart_Available                                       3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_1_Set_Duty                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM_1_Set_Duty
   _PWM_Init
   _Uart_Available
   _Uart_Init
     ___lldiv
   _Uart_Read_Plot
     _Uart_Read_Substring
     _strlen (ARG)
   _Uart_Read_String
     _Uart_Read
   _atoi
     ___wmul
     _isdigit
     _isspace
   _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      39       1       60.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39      20        0.0%
DATA                 0      0      39       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Sep 30 17:54:36 2021

     __size_of_Uart_Read_Plot 00F0               ?_PWM_1_Set_Duty 0001                            l21 7996  
                          l24 7940                            l54 7BE4                            l72 7998  
                          l57 7972                            l74 79A6                            l82 7B76  
                          l75 79B8                            l76 79BC                            l88 7B0A  
                          u10 79A6                            u11 79A2                            u20 79B4  
                          u21 79B0           ___wmul@multiplicand 0003                           l108 7D78  
                         l146 79E2                           l180 7C88                           l173 7C78  
                         l851 7A50                           l940 797C                           l845 7FF6  
                         l942 7982                           l870 7998                           l944 7994  
                         l872 79B4                           l848 7FFE                           l946 7938  
                         l938 7974                           l874 79BA                           l859 7AA2  
                         l868 7A18                           u400 7A4A                           u401 7A44  
                         u410 7A4C                           u340 7AFA                           u500 7A0C  
                         u341 7AF6                           u501 7A08                           u430 796A  
                         u350 7C0C                           u510 7EAC                           _PR2 000FCB  
                         u431 7962                           u351 7C08                           u511 7EA8  
                         u360 7C2E                           u440 7B44                           u520 7EE0  
                         u361 7C2A                           u425 7BAC                           u441 7B40  
                         u521 7EDC                           u370 7C56                           u450 7B5A  
                         u530 7EFC                           u371 7C52                           u451 7B56  
                         u531 7EF8                           u460 7CC6                           u380 7A6A  
                         u540 7FB0                           u461 7CC2                           u381 7A66  
                         u541 7FAA                           u605 7E66                           u438 796C  
                         u470 7CF4                           u390 7A98                           u550 7FB2  
                         u606 7E68                           u471 7CF0                           u391 7A94  
                         u480 7D1E                           u560 7FC8                           u481 7D1A  
                         u561 7FC4                           u490 7D4C                           u570 7FDA  
                         u491 7D48                           u571 7FD6                           u580 7DBC  
                         u581 7DB8                           u595 7E5C                           u596 7E5E  
                         wreg 000FE8                          l1200 7B0C                          l1130 7AD4  
                        l1202 7B14                          l1132 7AD8                          l1124 7AA4  
                        l1220 7CA8                          l1212 7B48                          l1204 7B1A  
                        l1140 79BE                          l1300 7D84                          l1150 7C0C  
                        l1134 7ADC                          l1126 7AAC                          l1230 7D00  
                        l1222 7CC6                          l1214 7B5A                          l1206 7B2A  
                        l1142 79DA                          l1310 7DD0                          l1302 7D86  
                        l1160 7C56                          l1152 7C14                          l1136 7AFA  
                        l1128 7AB8                          l1232 7D1E                          l1224 7CD2  
                        l1216 7B76                          l1208 7B2E                          l1240 79E4  
                        l1320 7E54                          l1312 7DFE                          l1304 7D8A  
                        l1162 7C66                          l1154 7C20                          l1146 7BE6  
                        l1138 7B0A                          l1234 7D2A                          l1226 7CD6  
                        l1218 7C8C                          l1170 7A56                          l1330 7F2C  
                        l1250 7E76                          l1242 79F0                          l1322 7E5E  
                        l1314 7E2C                          l1306 7D9E                          l1164 7C68  
                        l1156 7C2E                          l1148 7BF6                          l1236 7D2E  
                        l1228 7CF4                          l1180 7A1A                          l1172 7A6A  
                        l1260 7EE0                          l1252 7E8A                          l1244 79F4  
                        l1324 7E68                          l1316 7E38                          l1308 7DBC  
                        l1166 7C72                          l1158 7C38                          l1190 7B8A  
                        l1238 7D4C                          l1174 7A98                          l1270 7F08  
                        l1262 7EE4                          l1254 7E8E                          l1246 7A0C  
                        l1318 7E44                          l1192 7BDC                          l1184 7B78  
                        l1176 7A9C                          l1168 7A52                          l1272 7F10  
                        l1256 7E92                          l1194 7BE0                          l1186 7B7C  
                        l1282 7FB6                          l1274 7F42                          l1266 7EEA  
                        l1258 7EAC                          l1196 7958                          l1188 7B88  
                        l1284 7FC8                          l1268 7F00                          l1292 7D7A  
                        l1286 7FDA                          l1278 7F7A                          l1294 7D7E  
                        l1296 7D80                          l1298 7D82      __end_of_Uart_Read_String 7B78  
                        _TMR2 000FCC                          _atoi 7E76                          _main 7D7A  
                        fsr2h 000FDA                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          prodh 000FF4  
                        prodl 000FF3         Uart_Read_Substring@cp 0001         Uart_Read_Substring@fn 0007  
       Uart_Read_Substring@lt 000A         Uart_Read_Substring@vc 0003         Uart_Read_Substring@pt 000C  
                        start 0000                  ___param_bank 000000                         ?_atoi 0008  
                       ?_main 0001               __end_of___lldiv 7C8A                         _T2CON 000FCA  
                       _RCREG 000FAE                         _RCSTA 000FAB         Uart_Read_String@s_buf 0003  
                       _SPBRG 000FAF                         _TXREG 000FAD                         _TXSTA 000FAC  
                       _cad_p 0024               __end_of_isdigit 7A52                         atoi@n 0015  
                       atoi@s 0008               __end_of_isspace 7AA4              __end_of_PWM_Init 7998  
      Uart_Read_Substring@inc 0005                         status 000FD8               __initialization 7942  
                __end_of_atoi 8000                  __end_of_main 7E76                        ??_atoi 000A  
                      ??_main 001F                 __activetblptr 000002                _Uart_Available 7958  
                      _CCPR1L 000FBE                        _CCPR2L 000FBB                        _SPBRGH 000FB0  
         Uart_Read_Plot@b_fin 000E           Uart_Read_Plot@b_ini 0016       Uart_Read_Plot@conta_fin 0019  
     Uart_Read_Plot@conta_ini 0017           Uart_Read_Plot@n_str 0011           Uart_Read_Plot@s_buf 0013  
              _Uart_Read_Plot 7C8A           Uart_Read_Plot@tr_or 000F                        ___wmul 79BE  
                   ??___lldiv 0009                        _buffer 0032                        clear_0 7948  
                      isa$std 000001            __size_of_Uart_Init 006E            __size_of_Uart_Read 0026  
                      _strlen 79E4                 main@valor_pwm 0023                     ??_isdigit 0003  
                   ??_isspace 0003        __end_of_Uart_Available 7974                        tblptru 000FF8  
                  __accesstop 0060       __end_of__initialization 794E  __size_of_Uart_Read_Substring 0068  
            ??_PWM_1_Set_Duty 0001                 ___rparam_used 000001        __end_of_Uart_Read_Plot 7D7A  
              __pcstackCOMRAM 0001           Uart_Read_String@Buf 0001                     ?_PWM_Init 0001  
             ?_Uart_Available 0001             ?_Uart_Read_String 0001             __end_of_Uart_Init 7BE6  
           __end_of_Uart_Read 79BE            ??_Uart_Read_String 0005               ?_Uart_Read_Plot 000E  
                     ?___wmul 0001                       _CCP1CON 000FBD                       _CCP2CON 000FBA  
                     _BAUDCON 000FB8                    ??_PWM_Init 0001                       ?_strlen 0001  
                 Uart_Init@vx 0016                       __Hparam 0000                       __Lparam 0000  
                     ___lldiv 7BE6               __size_of___wmul 0026                       __pcinit 7942  
                     __ramtop 0800                       __ptext0 7D7A                       __ptext1 79E4  
                     __ptext2 7E76                       __ptext3 7A52                       __ptext4 7A1A  
                     __ptext5 79BE                       __ptext6 7B0C                       __ptext7 7998  
                     __ptext8 7C8A                       __ptext9 7AA4               __size_of_strlen 0036  
                   _T2CONbits 000FCA                       _isdigit 7A1A                       _isspace 7A52  
                     atoi@neg 000E          end_of_initialization 794E                 __Lmediumconst 0000  
             ___lldiv@divisor 0005                 Uart_Init@baud 000E               ___lldiv@counter 000D  
                   _RCSTAbits 000FAB                       postinc0 000FEE                       postinc2 000FDE  
                     strlen@a 0003                       strlen@s 0001           _Uart_Read_Substring 7AA4  
                   _TRISCbits 000F94                     _TRISDbits 000F95          ?_Uart_Read_Substring 0001  
                   _TXSTAbits 000FAC           PWM_1_Set_Duty@value 0001                __end_of___wmul 79E4  
                 _BAUDCONbits 000FB8              ??_Uart_Available 0003                __end_of_strlen 7A1A  
           __size_of_PWM_Init 0024           start_initialization 7942             Uart_Read_String@c 0007  
            ??_Uart_Read_Plot 0015         ??_Uart_Read_Substring 0009                     _Uart_Init 7B78  
                   _Uart_Read 7998                      ??___wmul 0005     __size_of_Uart_Read_String 006C  
                    ??_strlen 0003                   __pbssCOMRAM 0024                     _atoi$1024 0010  
                   _atoi$1025 0014                     _atoi$1026 0012                    ?_Uart_Init 000E  
                  ?_Uart_Read 0001                      ?___lldiv 0001       __size_of_PWM_1_Set_Duty 000C  
                    ?_isdigit 0001                      ?_isspace 0001                ___wmul@product 0005  
                    _LATDbits 000F8C      Uart_Read_String@cont_buf 0008                      _PIR1bits 000F9E  
             main@estado_led1 001F               main@estado_led2 0021                    _ADCON1bits 000FC1  
                    _PWM_Init 7974             ___wmul@multiplier 0001                  _isspace$1042 0007  
                    __Hrparam 0000                   ??_Uart_Init 0012                   ??_Uart_Read 0001  
                    __Lrparam 0000              _Uart_Read_String 7B0C              __size_of___lldiv 00A4  
            __size_of_isdigit 0038              __size_of_isspace 0052                      __ptext10 7B78  
                    __ptext11 7BE6                      __ptext12 7958                      __ptext13 7974  
                    __ptext14 7936                 __size_of_atoi 018A                 __size_of_main 00FC  
                    isa$xinst 000000                _PWM_1_Set_Duty 7936               Uart_Read_Plot@i 001B  
             Uart_Read_Plot@j 001D                      isdigit@c 0001   __end_of_Uart_Read_Substring 7B0C  
                    isspace@c 0001              ___lldiv@dividend 0001        __end_of_PWM_1_Set_Duty 7942  
            ___lldiv@quotient 0009       __size_of_Uart_Available 001C  
